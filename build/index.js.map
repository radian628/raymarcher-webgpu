{
  "version": 3,
  "sources": ["../node_modules/is-any-array/src/index.ts", "../node_modules/ml-array-max/lib/index.js", "../node_modules/ml-array-min/lib/index.js", "../node_modules/ml-array-rescale/lib/index.js", "../node_modules/ml-matrix/matrix.js", "../r628/src/math/vector.ts", "../r628/src/webgl/mesh.ts", "../src/bind-group-generator.ts", "raw-ns:/mnt/c/Users/baker/Documents/GitHub/raymarcher-webgpu/src/blit-to-screen.wgsl?raw", "../src/blit-to-screen.ts", "raw-ns:/mnt/c/Users/baker/Documents/GitHub/raymarcher-webgpu/src/compute.wgsl?raw", "wgsl:/mnt/c/Users/baker/Documents/GitHub/raymarcher-webgpu/src/compute.wgsl", "../node_modules/ml-matrix/matrix.mjs", "../src/matrix-inverse.ts", "../src/index.ts"],
  "sourcesContent": ["// eslint-disable-next-line @typescript-eslint/unbound-method\nconst toString = Object.prototype.toString;\n\nexport type AnyArray =\n  | any[] // eslint-disable-line @typescript-eslint/no-explicit-any\n  | Int8Array\n  | Uint8Array\n  | Uint8ClampedArray\n  | Int16Array\n  | Uint16Array\n  | Int32Array\n  | Uint32Array\n  | Float32Array\n  | Float64Array;\n\n/**\n * Checks if an object is an instance of an Array (array or typed array, except those that contain bigint values).\n *\n * @param value - Object to check.\n * @returns True if the object is an array or a typed array.\n */\nexport function isAnyArray(value: unknown): value is AnyArray {\n  const tag = toString.call(value);\n  return tag.endsWith('Array]') && !tag.includes('Big');\n}\n", "'use strict';\n\nvar isAnyArray = require('is-any-array');\n\nfunction max(input, options = {}) {\n  if (!isAnyArray.isAnyArray(input)) {\n    throw new TypeError('input must be an array');\n  }\n\n  if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  const { fromIndex = 0, toIndex = input.length } = options;\n\n  if (\n    fromIndex < 0 ||\n    fromIndex >= input.length ||\n    !Number.isInteger(fromIndex)\n  ) {\n    throw new Error('fromIndex must be a positive integer smaller than length');\n  }\n\n  if (\n    toIndex <= fromIndex ||\n    toIndex > input.length ||\n    !Number.isInteger(toIndex)\n  ) {\n    throw new Error(\n      'toIndex must be an integer greater than fromIndex and at most equal to length',\n    );\n  }\n\n  let maxValue = input[fromIndex];\n  for (let i = fromIndex + 1; i < toIndex; i++) {\n    if (input[i] > maxValue) maxValue = input[i];\n  }\n  return maxValue;\n}\n\nmodule.exports = max;\n", "'use strict';\n\nvar isAnyArray = require('is-any-array');\n\nfunction min(input, options = {}) {\n  if (!isAnyArray.isAnyArray(input)) {\n    throw new TypeError('input must be an array');\n  }\n\n  if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  const { fromIndex = 0, toIndex = input.length } = options;\n\n  if (\n    fromIndex < 0 ||\n    fromIndex >= input.length ||\n    !Number.isInteger(fromIndex)\n  ) {\n    throw new Error('fromIndex must be a positive integer smaller than length');\n  }\n\n  if (\n    toIndex <= fromIndex ||\n    toIndex > input.length ||\n    !Number.isInteger(toIndex)\n  ) {\n    throw new Error(\n      'toIndex must be an integer greater than fromIndex and at most equal to length',\n    );\n  }\n\n  let minValue = input[fromIndex];\n  for (let i = fromIndex + 1; i < toIndex; i++) {\n    if (input[i] < minValue) minValue = input[i];\n  }\n  return minValue;\n}\n\nmodule.exports = min;\n", "'use strict';\n\nvar isAnyArray = require('is-any-array');\nvar max = require('ml-array-max');\nvar min = require('ml-array-min');\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nvar max__default = /*#__PURE__*/_interopDefaultLegacy(max);\nvar min__default = /*#__PURE__*/_interopDefaultLegacy(min);\n\nfunction rescale(input, options = {}) {\n  if (!isAnyArray.isAnyArray(input)) {\n    throw new TypeError('input must be an array');\n  } else if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  let output;\n  if (options.output !== undefined) {\n    if (!isAnyArray.isAnyArray(options.output)) {\n      throw new TypeError('output option must be an array if specified');\n    }\n    output = options.output;\n  } else {\n    output = new Array(input.length);\n  }\n\n  const currentMin = min__default['default'](input);\n  const currentMax = max__default['default'](input);\n\n  if (currentMin === currentMax) {\n    throw new RangeError(\n      'minimum and maximum input values are equal. Cannot rescale a constant array',\n    );\n  }\n\n  const {\n    min: minValue = options.autoMinMax ? currentMin : 0,\n    max: maxValue = options.autoMinMax ? currentMax : 1,\n  } = options;\n\n  if (minValue >= maxValue) {\n    throw new RangeError('min option must be smaller than max option');\n  }\n\n  const factor = (maxValue - minValue) / (currentMax - currentMin);\n  for (let i = 0; i < input.length; i++) {\n    output[i] = (input[i] - currentMin) * factor + minValue;\n  }\n\n  return output;\n}\n\nmodule.exports = rescale;\n", "'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar isAnyArray = require('is-any-array');\nvar rescale = require('ml-array-rescale');\n\nconst indent = ' '.repeat(2);\nconst indentData = ' '.repeat(4);\n\n/**\n * @this {Matrix}\n * @returns {string}\n */\nfunction inspectMatrix() {\n  return inspectMatrixWithOptions(this);\n}\n\nfunction inspectMatrixWithOptions(matrix, options = {}) {\n  const {\n    maxRows = 15,\n    maxColumns = 10,\n    maxNumSize = 8,\n    padMinus = 'auto',\n  } = options;\n  return `${matrix.constructor.name} {\n${indent}[\n${indentData}${inspectData(matrix, maxRows, maxColumns, maxNumSize, padMinus)}\n${indent}]\n${indent}rows: ${matrix.rows}\n${indent}columns: ${matrix.columns}\n}`;\n}\n\nfunction inspectData(matrix, maxRows, maxColumns, maxNumSize, padMinus) {\n  const { rows, columns } = matrix;\n  const maxI = Math.min(rows, maxRows);\n  const maxJ = Math.min(columns, maxColumns);\n  const result = [];\n\n  if (padMinus === 'auto') {\n    padMinus = false;\n    loop: for (let i = 0; i < maxI; i++) {\n      for (let j = 0; j < maxJ; j++) {\n        if (matrix.get(i, j) < 0) {\n          padMinus = true;\n          break loop;\n        }\n      }\n    }\n  }\n\n  for (let i = 0; i < maxI; i++) {\n    let line = [];\n    for (let j = 0; j < maxJ; j++) {\n      line.push(formatNumber(matrix.get(i, j), maxNumSize, padMinus));\n    }\n    result.push(`${line.join(' ')}`);\n  }\n  if (maxJ !== columns) {\n    result[result.length - 1] += ` ... ${columns - maxColumns} more columns`;\n  }\n  if (maxI !== rows) {\n    result.push(`... ${rows - maxRows} more rows`);\n  }\n  return result.join(`\\n${indentData}`);\n}\n\nfunction formatNumber(num, maxNumSize, padMinus) {\n  return (\n    num >= 0 && padMinus\n      ? ` ${formatNumber2(num, maxNumSize - 1)}`\n      : formatNumber2(num, maxNumSize)\n  ).padEnd(maxNumSize);\n}\n\nfunction formatNumber2(num, len) {\n  // small.length numbers should be as is\n  let str = num.toString();\n  if (str.length <= len) return str;\n\n  // (7)'0.00123' is better then (7)'1.23e-2'\n  // (8)'0.000123' is worse then (7)'1.23e-3',\n  let fix = num.toFixed(len);\n  if (fix.length > len) {\n    fix = num.toFixed(Math.max(0, len - (fix.length - len)));\n  }\n  if (\n    fix.length <= len &&\n    !fix.startsWith('0.000') &&\n    !fix.startsWith('-0.000')\n  ) {\n    return fix;\n  }\n\n  // well, if it's still too long the user should've used longer numbers\n  let exp = num.toExponential(len);\n  if (exp.length > len) {\n    exp = num.toExponential(Math.max(0, len - (exp.length - len)));\n  }\n  return exp.slice(0);\n}\n\nfunction installMathOperations(AbstractMatrix, Matrix) {\n  AbstractMatrix.prototype.add = function add(value) {\n    if (typeof value === 'number') return this.addS(value);\n    return this.addM(value);\n  };\n\n  AbstractMatrix.prototype.addS = function addS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.addM = function addM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.add = function add(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.add(value);\n  };\n\n  AbstractMatrix.prototype.sub = function sub(value) {\n    if (typeof value === 'number') return this.subS(value);\n    return this.subM(value);\n  };\n\n  AbstractMatrix.prototype.subS = function subS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.subM = function subM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sub = function sub(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sub(value);\n  };\n  AbstractMatrix.prototype.subtract = AbstractMatrix.prototype.sub;\n  AbstractMatrix.prototype.subtractS = AbstractMatrix.prototype.subS;\n  AbstractMatrix.prototype.subtractM = AbstractMatrix.prototype.subM;\n  AbstractMatrix.subtract = AbstractMatrix.sub;\n\n  AbstractMatrix.prototype.mul = function mul(value) {\n    if (typeof value === 'number') return this.mulS(value);\n    return this.mulM(value);\n  };\n\n  AbstractMatrix.prototype.mulS = function mulS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.mulM = function mulM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.mul = function mul(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.mul(value);\n  };\n  AbstractMatrix.prototype.multiply = AbstractMatrix.prototype.mul;\n  AbstractMatrix.prototype.multiplyS = AbstractMatrix.prototype.mulS;\n  AbstractMatrix.prototype.multiplyM = AbstractMatrix.prototype.mulM;\n  AbstractMatrix.multiply = AbstractMatrix.mul;\n\n  AbstractMatrix.prototype.div = function div(value) {\n    if (typeof value === 'number') return this.divS(value);\n    return this.divM(value);\n  };\n\n  AbstractMatrix.prototype.divS = function divS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.divM = function divM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.div = function div(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.div(value);\n  };\n  AbstractMatrix.prototype.divide = AbstractMatrix.prototype.div;\n  AbstractMatrix.prototype.divideS = AbstractMatrix.prototype.divS;\n  AbstractMatrix.prototype.divideM = AbstractMatrix.prototype.divM;\n  AbstractMatrix.divide = AbstractMatrix.div;\n\n  AbstractMatrix.prototype.mod = function mod(value) {\n    if (typeof value === 'number') return this.modS(value);\n    return this.modM(value);\n  };\n\n  AbstractMatrix.prototype.modS = function modS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) % value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.modM = function modM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) % matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.mod = function mod(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.mod(value);\n  };\n  AbstractMatrix.prototype.modulus = AbstractMatrix.prototype.mod;\n  AbstractMatrix.prototype.modulusS = AbstractMatrix.prototype.modS;\n  AbstractMatrix.prototype.modulusM = AbstractMatrix.prototype.modM;\n  AbstractMatrix.modulus = AbstractMatrix.mod;\n\n  AbstractMatrix.prototype.and = function and(value) {\n    if (typeof value === 'number') return this.andS(value);\n    return this.andM(value);\n  };\n\n  AbstractMatrix.prototype.andS = function andS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) & value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.andM = function andM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) & matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.and = function and(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.and(value);\n  };\n\n  AbstractMatrix.prototype.or = function or(value) {\n    if (typeof value === 'number') return this.orS(value);\n    return this.orM(value);\n  };\n\n  AbstractMatrix.prototype.orS = function orS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) | value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.orM = function orM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) | matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.or = function or(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.or(value);\n  };\n\n  AbstractMatrix.prototype.xor = function xor(value) {\n    if (typeof value === 'number') return this.xorS(value);\n    return this.xorM(value);\n  };\n\n  AbstractMatrix.prototype.xorS = function xorS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) ^ value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.xorM = function xorM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) ^ matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.xor = function xor(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.xor(value);\n  };\n\n  AbstractMatrix.prototype.leftShift = function leftShift(value) {\n    if (typeof value === 'number') return this.leftShiftS(value);\n    return this.leftShiftM(value);\n  };\n\n  AbstractMatrix.prototype.leftShiftS = function leftShiftS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) << value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.leftShiftM = function leftShiftM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) << matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.leftShift = function leftShift(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.leftShift(value);\n  };\n\n  AbstractMatrix.prototype.signPropagatingRightShift = function signPropagatingRightShift(value) {\n    if (typeof value === 'number') return this.signPropagatingRightShiftS(value);\n    return this.signPropagatingRightShiftM(value);\n  };\n\n  AbstractMatrix.prototype.signPropagatingRightShiftS = function signPropagatingRightShiftS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >> value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.signPropagatingRightShiftM = function signPropagatingRightShiftM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >> matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.signPropagatingRightShift = function signPropagatingRightShift(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.signPropagatingRightShift(value);\n  };\n\n  AbstractMatrix.prototype.rightShift = function rightShift(value) {\n    if (typeof value === 'number') return this.rightShiftS(value);\n    return this.rightShiftM(value);\n  };\n\n  AbstractMatrix.prototype.rightShiftS = function rightShiftS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >>> value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.rightShiftM = function rightShiftM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >>> matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.rightShift = function rightShift(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.rightShift(value);\n  };\n  AbstractMatrix.prototype.zeroFillRightShift = AbstractMatrix.prototype.rightShift;\n  AbstractMatrix.prototype.zeroFillRightShiftS = AbstractMatrix.prototype.rightShiftS;\n  AbstractMatrix.prototype.zeroFillRightShiftM = AbstractMatrix.prototype.rightShiftM;\n  AbstractMatrix.zeroFillRightShift = AbstractMatrix.rightShift;\n\n  AbstractMatrix.prototype.not = function not() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, ~(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.not = function not(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.not();\n  };\n\n  AbstractMatrix.prototype.abs = function abs() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.abs(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.abs = function abs(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.abs();\n  };\n\n  AbstractMatrix.prototype.acos = function acos() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.acos(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.acos = function acos(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.acos();\n  };\n\n  AbstractMatrix.prototype.acosh = function acosh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.acosh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.acosh = function acosh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.acosh();\n  };\n\n  AbstractMatrix.prototype.asin = function asin() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.asin(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.asin = function asin(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.asin();\n  };\n\n  AbstractMatrix.prototype.asinh = function asinh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.asinh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.asinh = function asinh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.asinh();\n  };\n\n  AbstractMatrix.prototype.atan = function atan() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.atan(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.atan = function atan(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.atan();\n  };\n\n  AbstractMatrix.prototype.atanh = function atanh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.atanh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.atanh = function atanh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.atanh();\n  };\n\n  AbstractMatrix.prototype.cbrt = function cbrt() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.cbrt(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.cbrt = function cbrt(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.cbrt();\n  };\n\n  AbstractMatrix.prototype.ceil = function ceil() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.ceil(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.ceil = function ceil(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.ceil();\n  };\n\n  AbstractMatrix.prototype.clz32 = function clz32() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.clz32(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.clz32 = function clz32(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.clz32();\n  };\n\n  AbstractMatrix.prototype.cos = function cos() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.cos(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.cos = function cos(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.cos();\n  };\n\n  AbstractMatrix.prototype.cosh = function cosh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.cosh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.cosh = function cosh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.cosh();\n  };\n\n  AbstractMatrix.prototype.exp = function exp() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.exp(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.exp = function exp(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.exp();\n  };\n\n  AbstractMatrix.prototype.expm1 = function expm1() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.expm1(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.expm1 = function expm1(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.expm1();\n  };\n\n  AbstractMatrix.prototype.floor = function floor() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.floor(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.floor = function floor(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.floor();\n  };\n\n  AbstractMatrix.prototype.fround = function fround() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.fround(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.fround = function fround(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.fround();\n  };\n\n  AbstractMatrix.prototype.log = function log() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.log = function log(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log();\n  };\n\n  AbstractMatrix.prototype.log1p = function log1p() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log1p(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.log1p = function log1p(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log1p();\n  };\n\n  AbstractMatrix.prototype.log10 = function log10() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log10(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.log10 = function log10(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log10();\n  };\n\n  AbstractMatrix.prototype.log2 = function log2() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log2(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.log2 = function log2(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log2();\n  };\n\n  AbstractMatrix.prototype.round = function round() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.round(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.round = function round(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.round();\n  };\n\n  AbstractMatrix.prototype.sign = function sign() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sign(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sign = function sign(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sign();\n  };\n\n  AbstractMatrix.prototype.sin = function sin() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sin(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sin = function sin(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sin();\n  };\n\n  AbstractMatrix.prototype.sinh = function sinh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sinh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sinh = function sinh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sinh();\n  };\n\n  AbstractMatrix.prototype.sqrt = function sqrt() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sqrt(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sqrt = function sqrt(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sqrt();\n  };\n\n  AbstractMatrix.prototype.tan = function tan() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.tan(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.tan = function tan(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.tan();\n  };\n\n  AbstractMatrix.prototype.tanh = function tanh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.tanh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.tanh = function tanh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.tanh();\n  };\n\n  AbstractMatrix.prototype.trunc = function trunc() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.trunc(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.trunc = function trunc(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.trunc();\n  };\n\n  AbstractMatrix.pow = function pow(matrix, arg0) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.pow(arg0);\n  };\n\n  AbstractMatrix.prototype.pow = function pow(value) {\n    if (typeof value === 'number') return this.powS(value);\n    return this.powM(value);\n  };\n\n  AbstractMatrix.prototype.powS = function powS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) ** value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.powM = function powM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) ** matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n}\n\n/**\n * @private\n * Check that a row index is not out of bounds\n * @param {Matrix} matrix\n * @param {number} index\n * @param {boolean} [outer]\n */\nfunction checkRowIndex(matrix, index, outer) {\n  let max = outer ? matrix.rows : matrix.rows - 1;\n  if (index < 0 || index > max) {\n    throw new RangeError('Row index out of range');\n  }\n}\n\n/**\n * @private\n * Check that a column index is not out of bounds\n * @param {Matrix} matrix\n * @param {number} index\n * @param {boolean} [outer]\n */\nfunction checkColumnIndex(matrix, index, outer) {\n  let max = outer ? matrix.columns : matrix.columns - 1;\n  if (index < 0 || index > max) {\n    throw new RangeError('Column index out of range');\n  }\n}\n\n/**\n * @private\n * Check that the provided vector is an array with the right length\n * @param {Matrix} matrix\n * @param {Array|Matrix} vector\n * @return {Array}\n * @throws {RangeError}\n */\nfunction checkRowVector(matrix, vector) {\n  if (vector.to1DArray) {\n    vector = vector.to1DArray();\n  }\n  if (vector.length !== matrix.columns) {\n    throw new RangeError(\n      'vector size must be the same as the number of columns',\n    );\n  }\n  return vector;\n}\n\n/**\n * @private\n * Check that the provided vector is an array with the right length\n * @param {Matrix} matrix\n * @param {Array|Matrix} vector\n * @return {Array}\n * @throws {RangeError}\n */\nfunction checkColumnVector(matrix, vector) {\n  if (vector.to1DArray) {\n    vector = vector.to1DArray();\n  }\n  if (vector.length !== matrix.rows) {\n    throw new RangeError('vector size must be the same as the number of rows');\n  }\n  return vector;\n}\n\nfunction checkRowIndices(matrix, rowIndices) {\n  if (!isAnyArray.isAnyArray(rowIndices)) {\n    throw new TypeError('row indices must be an array');\n  }\n\n  for (let i = 0; i < rowIndices.length; i++) {\n    if (rowIndices[i] < 0 || rowIndices[i] >= matrix.rows) {\n      throw new RangeError('row indices are out of range');\n    }\n  }\n}\n\nfunction checkColumnIndices(matrix, columnIndices) {\n  if (!isAnyArray.isAnyArray(columnIndices)) {\n    throw new TypeError('column indices must be an array');\n  }\n\n  for (let i = 0; i < columnIndices.length; i++) {\n    if (columnIndices[i] < 0 || columnIndices[i] >= matrix.columns) {\n      throw new RangeError('column indices are out of range');\n    }\n  }\n}\n\nfunction checkRange(matrix, startRow, endRow, startColumn, endColumn) {\n  if (arguments.length !== 5) {\n    throw new RangeError('expected 4 arguments');\n  }\n  checkNumber('startRow', startRow);\n  checkNumber('endRow', endRow);\n  checkNumber('startColumn', startColumn);\n  checkNumber('endColumn', endColumn);\n  if (\n    startRow > endRow ||\n    startColumn > endColumn ||\n    startRow < 0 ||\n    startRow >= matrix.rows ||\n    endRow < 0 ||\n    endRow >= matrix.rows ||\n    startColumn < 0 ||\n    startColumn >= matrix.columns ||\n    endColumn < 0 ||\n    endColumn >= matrix.columns\n  ) {\n    throw new RangeError('Submatrix indices are out of range');\n  }\n}\n\nfunction newArray(length, value = 0) {\n  let array = [];\n  for (let i = 0; i < length; i++) {\n    array.push(value);\n  }\n  return array;\n}\n\nfunction checkNumber(name, value) {\n  if (typeof value !== 'number') {\n    throw new TypeError(`${name} must be a number`);\n  }\n}\n\nfunction checkNonEmpty(matrix) {\n  if (matrix.isEmpty()) {\n    throw new Error('Empty matrix has no elements to index');\n  }\n}\n\nfunction sumByRow(matrix) {\n  let sum = newArray(matrix.rows);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[i] += matrix.get(i, j);\n    }\n  }\n  return sum;\n}\n\nfunction sumByColumn(matrix) {\n  let sum = newArray(matrix.columns);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[j] += matrix.get(i, j);\n    }\n  }\n  return sum;\n}\n\nfunction sumAll(matrix) {\n  let v = 0;\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      v += matrix.get(i, j);\n    }\n  }\n  return v;\n}\n\nfunction productByRow(matrix) {\n  let sum = newArray(matrix.rows, 1);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[i] *= matrix.get(i, j);\n    }\n  }\n  return sum;\n}\n\nfunction productByColumn(matrix) {\n  let sum = newArray(matrix.columns, 1);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[j] *= matrix.get(i, j);\n    }\n  }\n  return sum;\n}\n\nfunction productAll(matrix) {\n  let v = 1;\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      v *= matrix.get(i, j);\n    }\n  }\n  return v;\n}\n\nfunction varianceByRow(matrix, unbiased, mean) {\n  const rows = matrix.rows;\n  const cols = matrix.columns;\n  const variance = [];\n\n  for (let i = 0; i < rows; i++) {\n    let sum1 = 0;\n    let sum2 = 0;\n    let x = 0;\n    for (let j = 0; j < cols; j++) {\n      x = matrix.get(i, j) - mean[i];\n      sum1 += x;\n      sum2 += x * x;\n    }\n    if (unbiased) {\n      variance.push((sum2 - (sum1 * sum1) / cols) / (cols - 1));\n    } else {\n      variance.push((sum2 - (sum1 * sum1) / cols) / cols);\n    }\n  }\n  return variance;\n}\n\nfunction varianceByColumn(matrix, unbiased, mean) {\n  const rows = matrix.rows;\n  const cols = matrix.columns;\n  const variance = [];\n\n  for (let j = 0; j < cols; j++) {\n    let sum1 = 0;\n    let sum2 = 0;\n    let x = 0;\n    for (let i = 0; i < rows; i++) {\n      x = matrix.get(i, j) - mean[j];\n      sum1 += x;\n      sum2 += x * x;\n    }\n    if (unbiased) {\n      variance.push((sum2 - (sum1 * sum1) / rows) / (rows - 1));\n    } else {\n      variance.push((sum2 - (sum1 * sum1) / rows) / rows);\n    }\n  }\n  return variance;\n}\n\nfunction varianceAll(matrix, unbiased, mean) {\n  const rows = matrix.rows;\n  const cols = matrix.columns;\n  const size = rows * cols;\n\n  let sum1 = 0;\n  let sum2 = 0;\n  let x = 0;\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      x = matrix.get(i, j) - mean;\n      sum1 += x;\n      sum2 += x * x;\n    }\n  }\n  if (unbiased) {\n    return (sum2 - (sum1 * sum1) / size) / (size - 1);\n  } else {\n    return (sum2 - (sum1 * sum1) / size) / size;\n  }\n}\n\nfunction centerByRow(matrix, mean) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) - mean[i]);\n    }\n  }\n}\n\nfunction centerByColumn(matrix, mean) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) - mean[j]);\n    }\n  }\n}\n\nfunction centerAll(matrix, mean) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) - mean);\n    }\n  }\n}\n\nfunction getScaleByRow(matrix) {\n  const scale = [];\n  for (let i = 0; i < matrix.rows; i++) {\n    let sum = 0;\n    for (let j = 0; j < matrix.columns; j++) {\n      sum += matrix.get(i, j) ** 2 / (matrix.columns - 1);\n    }\n    scale.push(Math.sqrt(sum));\n  }\n  return scale;\n}\n\nfunction scaleByRow(matrix, scale) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) / scale[i]);\n    }\n  }\n}\n\nfunction getScaleByColumn(matrix) {\n  const scale = [];\n  for (let j = 0; j < matrix.columns; j++) {\n    let sum = 0;\n    for (let i = 0; i < matrix.rows; i++) {\n      sum += matrix.get(i, j) ** 2 / (matrix.rows - 1);\n    }\n    scale.push(Math.sqrt(sum));\n  }\n  return scale;\n}\n\nfunction scaleByColumn(matrix, scale) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) / scale[j]);\n    }\n  }\n}\n\nfunction getScaleAll(matrix) {\n  const divider = matrix.size - 1;\n  let sum = 0;\n  for (let j = 0; j < matrix.columns; j++) {\n    for (let i = 0; i < matrix.rows; i++) {\n      sum += matrix.get(i, j) ** 2 / divider;\n    }\n  }\n  return Math.sqrt(sum);\n}\n\nfunction scaleAll(matrix, scale) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) / scale);\n    }\n  }\n}\n\nclass AbstractMatrix {\n  static from1DArray(newRows, newColumns, newData) {\n    let length = newRows * newColumns;\n    if (length !== newData.length) {\n      throw new RangeError('data length does not match given dimensions');\n    }\n    let newMatrix = new Matrix(newRows, newColumns);\n    for (let row = 0; row < newRows; row++) {\n      for (let column = 0; column < newColumns; column++) {\n        newMatrix.set(row, column, newData[row * newColumns + column]);\n      }\n    }\n    return newMatrix;\n  }\n\n  static rowVector(newData) {\n    let vector = new Matrix(1, newData.length);\n    for (let i = 0; i < newData.length; i++) {\n      vector.set(0, i, newData[i]);\n    }\n    return vector;\n  }\n\n  static columnVector(newData) {\n    let vector = new Matrix(newData.length, 1);\n    for (let i = 0; i < newData.length; i++) {\n      vector.set(i, 0, newData[i]);\n    }\n    return vector;\n  }\n\n  static zeros(rows, columns) {\n    return new Matrix(rows, columns);\n  }\n\n  static ones(rows, columns) {\n    return new Matrix(rows, columns).fill(1);\n  }\n\n  static rand(rows, columns, options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { random = Math.random } = options;\n    let matrix = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        matrix.set(i, j, random());\n      }\n    }\n    return matrix;\n  }\n\n  static randInt(rows, columns, options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { min = 0, max = 1000, random = Math.random } = options;\n    if (!Number.isInteger(min)) throw new TypeError('min must be an integer');\n    if (!Number.isInteger(max)) throw new TypeError('max must be an integer');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    let interval = max - min;\n    let matrix = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        let value = min + Math.round(random() * interval);\n        matrix.set(i, j, value);\n      }\n    }\n    return matrix;\n  }\n\n  static eye(rows, columns, value) {\n    if (columns === undefined) columns = rows;\n    if (value === undefined) value = 1;\n    let min = Math.min(rows, columns);\n    let matrix = this.zeros(rows, columns);\n    for (let i = 0; i < min; i++) {\n      matrix.set(i, i, value);\n    }\n    return matrix;\n  }\n\n  static diag(data, rows, columns) {\n    let l = data.length;\n    if (rows === undefined) rows = l;\n    if (columns === undefined) columns = rows;\n    let min = Math.min(l, rows, columns);\n    let matrix = this.zeros(rows, columns);\n    for (let i = 0; i < min; i++) {\n      matrix.set(i, i, data[i]);\n    }\n    return matrix;\n  }\n\n  static min(matrix1, matrix2) {\n    matrix1 = this.checkMatrix(matrix1);\n    matrix2 = this.checkMatrix(matrix2);\n    let rows = matrix1.rows;\n    let columns = matrix1.columns;\n    let result = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        result.set(i, j, Math.min(matrix1.get(i, j), matrix2.get(i, j)));\n      }\n    }\n    return result;\n  }\n\n  static max(matrix1, matrix2) {\n    matrix1 = this.checkMatrix(matrix1);\n    matrix2 = this.checkMatrix(matrix2);\n    let rows = matrix1.rows;\n    let columns = matrix1.columns;\n    let result = new this(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        result.set(i, j, Math.max(matrix1.get(i, j), matrix2.get(i, j)));\n      }\n    }\n    return result;\n  }\n\n  static checkMatrix(value) {\n    return AbstractMatrix.isMatrix(value) ? value : new Matrix(value);\n  }\n\n  static isMatrix(value) {\n    return value != null && value.klass === 'Matrix';\n  }\n\n  get size() {\n    return this.rows * this.columns;\n  }\n\n  apply(callback) {\n    if (typeof callback !== 'function') {\n      throw new TypeError('callback must be a function');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        callback.call(this, i, j);\n      }\n    }\n    return this;\n  }\n\n  to1DArray() {\n    let array = [];\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        array.push(this.get(i, j));\n      }\n    }\n    return array;\n  }\n\n  to2DArray() {\n    let copy = [];\n    for (let i = 0; i < this.rows; i++) {\n      copy.push([]);\n      for (let j = 0; j < this.columns; j++) {\n        copy[i].push(this.get(i, j));\n      }\n    }\n    return copy;\n  }\n\n  toJSON() {\n    return this.to2DArray();\n  }\n\n  isRowVector() {\n    return this.rows === 1;\n  }\n\n  isColumnVector() {\n    return this.columns === 1;\n  }\n\n  isVector() {\n    return this.rows === 1 || this.columns === 1;\n  }\n\n  isSquare() {\n    return this.rows === this.columns;\n  }\n\n  isEmpty() {\n    return this.rows === 0 || this.columns === 0;\n  }\n\n  isSymmetric() {\n    if (this.isSquare()) {\n      for (let i = 0; i < this.rows; i++) {\n        for (let j = 0; j <= i; j++) {\n          if (this.get(i, j) !== this.get(j, i)) {\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  isDistance() {\n    if (!this.isSymmetric()) return false;\n\n    for (let i = 0; i < this.rows; i++) {\n      if (this.get(i, i) !== 0) return false;\n    }\n\n    return true;\n  }\n\n  isEchelonForm() {\n    let i = 0;\n    let j = 0;\n    let previousColumn = -1;\n    let isEchelonForm = true;\n    let checked = false;\n    while (i < this.rows && isEchelonForm) {\n      j = 0;\n      checked = false;\n      while (j < this.columns && checked === false) {\n        if (this.get(i, j) === 0) {\n          j++;\n        } else if (this.get(i, j) === 1 && j > previousColumn) {\n          checked = true;\n          previousColumn = j;\n        } else {\n          isEchelonForm = false;\n          checked = true;\n        }\n      }\n      i++;\n    }\n    return isEchelonForm;\n  }\n\n  isReducedEchelonForm() {\n    let i = 0;\n    let j = 0;\n    let previousColumn = -1;\n    let isReducedEchelonForm = true;\n    let checked = false;\n    while (i < this.rows && isReducedEchelonForm) {\n      j = 0;\n      checked = false;\n      while (j < this.columns && checked === false) {\n        if (this.get(i, j) === 0) {\n          j++;\n        } else if (this.get(i, j) === 1 && j > previousColumn) {\n          checked = true;\n          previousColumn = j;\n        } else {\n          isReducedEchelonForm = false;\n          checked = true;\n        }\n      }\n      for (let k = j + 1; k < this.rows; k++) {\n        if (this.get(i, k) !== 0) {\n          isReducedEchelonForm = false;\n        }\n      }\n      i++;\n    }\n    return isReducedEchelonForm;\n  }\n\n  echelonForm() {\n    let result = this.clone();\n    let h = 0;\n    let k = 0;\n    while (h < result.rows && k < result.columns) {\n      let iMax = h;\n      for (let i = h; i < result.rows; i++) {\n        if (result.get(i, k) > result.get(iMax, k)) {\n          iMax = i;\n        }\n      }\n      if (result.get(iMax, k) === 0) {\n        k++;\n      } else {\n        result.swapRows(h, iMax);\n        let tmp = result.get(h, k);\n        for (let j = k; j < result.columns; j++) {\n          result.set(h, j, result.get(h, j) / tmp);\n        }\n        for (let i = h + 1; i < result.rows; i++) {\n          let factor = result.get(i, k) / result.get(h, k);\n          result.set(i, k, 0);\n          for (let j = k + 1; j < result.columns; j++) {\n            result.set(i, j, result.get(i, j) - result.get(h, j) * factor);\n          }\n        }\n        h++;\n        k++;\n      }\n    }\n    return result;\n  }\n\n  reducedEchelonForm() {\n    let result = this.echelonForm();\n    let m = result.columns;\n    let n = result.rows;\n    let h = n - 1;\n    while (h >= 0) {\n      if (result.maxRow(h) === 0) {\n        h--;\n      } else {\n        let p = 0;\n        let pivot = false;\n        while (p < n && pivot === false) {\n          if (result.get(h, p) === 1) {\n            pivot = true;\n          } else {\n            p++;\n          }\n        }\n        for (let i = 0; i < h; i++) {\n          let factor = result.get(i, p);\n          for (let j = p; j < m; j++) {\n            let tmp = result.get(i, j) - factor * result.get(h, j);\n            result.set(i, j, tmp);\n          }\n        }\n        h--;\n      }\n    }\n    return result;\n  }\n\n  set() {\n    throw new Error('set method is unimplemented');\n  }\n\n  get() {\n    throw new Error('get method is unimplemented');\n  }\n\n  repeat(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { rows = 1, columns = 1 } = options;\n    if (!Number.isInteger(rows) || rows <= 0) {\n      throw new TypeError('rows must be a positive integer');\n    }\n    if (!Number.isInteger(columns) || columns <= 0) {\n      throw new TypeError('columns must be a positive integer');\n    }\n    let matrix = new Matrix(this.rows * rows, this.columns * columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        matrix.setSubMatrix(this, this.rows * i, this.columns * j);\n      }\n    }\n    return matrix;\n  }\n\n  fill(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, value);\n      }\n    }\n    return this;\n  }\n\n  neg() {\n    return this.mulS(-1);\n  }\n\n  getRow(index) {\n    checkRowIndex(this, index);\n    let row = [];\n    for (let i = 0; i < this.columns; i++) {\n      row.push(this.get(index, i));\n    }\n    return row;\n  }\n\n  getRowVector(index) {\n    return Matrix.rowVector(this.getRow(index));\n  }\n\n  setRow(index, array) {\n    checkRowIndex(this, index);\n    array = checkRowVector(this, array);\n    for (let i = 0; i < this.columns; i++) {\n      this.set(index, i, array[i]);\n    }\n    return this;\n  }\n\n  swapRows(row1, row2) {\n    checkRowIndex(this, row1);\n    checkRowIndex(this, row2);\n    for (let i = 0; i < this.columns; i++) {\n      let temp = this.get(row1, i);\n      this.set(row1, i, this.get(row2, i));\n      this.set(row2, i, temp);\n    }\n    return this;\n  }\n\n  getColumn(index) {\n    checkColumnIndex(this, index);\n    let column = [];\n    for (let i = 0; i < this.rows; i++) {\n      column.push(this.get(i, index));\n    }\n    return column;\n  }\n\n  getColumnVector(index) {\n    return Matrix.columnVector(this.getColumn(index));\n  }\n\n  setColumn(index, array) {\n    checkColumnIndex(this, index);\n    array = checkColumnVector(this, array);\n    for (let i = 0; i < this.rows; i++) {\n      this.set(i, index, array[i]);\n    }\n    return this;\n  }\n\n  swapColumns(column1, column2) {\n    checkColumnIndex(this, column1);\n    checkColumnIndex(this, column2);\n    for (let i = 0; i < this.rows; i++) {\n      let temp = this.get(i, column1);\n      this.set(i, column1, this.get(i, column2));\n      this.set(i, column2, temp);\n    }\n    return this;\n  }\n\n  addRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + vector[j]);\n      }\n    }\n    return this;\n  }\n\n  subRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - vector[j]);\n      }\n    }\n    return this;\n  }\n\n  mulRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * vector[j]);\n      }\n    }\n    return this;\n  }\n\n  divRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / vector[j]);\n      }\n    }\n    return this;\n  }\n\n  addColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + vector[i]);\n      }\n    }\n    return this;\n  }\n\n  subColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - vector[i]);\n      }\n    }\n    return this;\n  }\n\n  mulColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * vector[i]);\n      }\n    }\n    return this;\n  }\n\n  divColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / vector[i]);\n      }\n    }\n    return this;\n  }\n\n  mulRow(index, value) {\n    checkRowIndex(this, index);\n    for (let i = 0; i < this.columns; i++) {\n      this.set(index, i, this.get(index, i) * value);\n    }\n    return this;\n  }\n\n  mulColumn(index, value) {\n    checkColumnIndex(this, index);\n    for (let i = 0; i < this.rows; i++) {\n      this.set(i, index, this.get(i, index) * value);\n    }\n    return this;\n  }\n\n  max(by) {\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    switch (by) {\n      case 'row': {\n        const max = new Array(this.rows).fill(Number.NEGATIVE_INFINITY);\n        for (let row = 0; row < this.rows; row++) {\n          for (let column = 0; column < this.columns; column++) {\n            if (this.get(row, column) > max[row]) {\n              max[row] = this.get(row, column);\n            }\n          }\n        }\n        return max;\n      }\n      case 'column': {\n        const max = new Array(this.columns).fill(Number.NEGATIVE_INFINITY);\n        for (let row = 0; row < this.rows; row++) {\n          for (let column = 0; column < this.columns; column++) {\n            if (this.get(row, column) > max[column]) {\n              max[column] = this.get(row, column);\n            }\n          }\n        }\n        return max;\n      }\n      case undefined: {\n        let max = this.get(0, 0);\n        for (let row = 0; row < this.rows; row++) {\n          for (let column = 0; column < this.columns; column++) {\n            if (this.get(row, column) > max) {\n              max = this.get(row, column);\n            }\n          }\n        }\n        return max;\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  maxIndex() {\n    checkNonEmpty(this);\n    let v = this.get(0, 0);\n    let idx = [0, 0];\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.get(i, j) > v) {\n          v = this.get(i, j);\n          idx[0] = i;\n          idx[1] = j;\n        }\n      }\n    }\n    return idx;\n  }\n\n  min(by) {\n    if (this.isEmpty()) {\n      return NaN;\n    }\n\n    switch (by) {\n      case 'row': {\n        const min = new Array(this.rows).fill(Number.POSITIVE_INFINITY);\n        for (let row = 0; row < this.rows; row++) {\n          for (let column = 0; column < this.columns; column++) {\n            if (this.get(row, column) < min[row]) {\n              min[row] = this.get(row, column);\n            }\n          }\n        }\n        return min;\n      }\n      case 'column': {\n        const min = new Array(this.columns).fill(Number.POSITIVE_INFINITY);\n        for (let row = 0; row < this.rows; row++) {\n          for (let column = 0; column < this.columns; column++) {\n            if (this.get(row, column) < min[column]) {\n              min[column] = this.get(row, column);\n            }\n          }\n        }\n        return min;\n      }\n      case undefined: {\n        let min = this.get(0, 0);\n        for (let row = 0; row < this.rows; row++) {\n          for (let column = 0; column < this.columns; column++) {\n            if (this.get(row, column) < min) {\n              min = this.get(row, column);\n            }\n          }\n        }\n        return min;\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  minIndex() {\n    checkNonEmpty(this);\n    let v = this.get(0, 0);\n    let idx = [0, 0];\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.get(i, j) < v) {\n          v = this.get(i, j);\n          idx[0] = i;\n          idx[1] = j;\n        }\n      }\n    }\n    return idx;\n  }\n\n  maxRow(row) {\n    checkRowIndex(this, row);\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    let v = this.get(row, 0);\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) > v) {\n        v = this.get(row, i);\n      }\n    }\n    return v;\n  }\n\n  maxRowIndex(row) {\n    checkRowIndex(this, row);\n    checkNonEmpty(this);\n    let v = this.get(row, 0);\n    let idx = [row, 0];\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) > v) {\n        v = this.get(row, i);\n        idx[1] = i;\n      }\n    }\n    return idx;\n  }\n\n  minRow(row) {\n    checkRowIndex(this, row);\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    let v = this.get(row, 0);\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) < v) {\n        v = this.get(row, i);\n      }\n    }\n    return v;\n  }\n\n  minRowIndex(row) {\n    checkRowIndex(this, row);\n    checkNonEmpty(this);\n    let v = this.get(row, 0);\n    let idx = [row, 0];\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) < v) {\n        v = this.get(row, i);\n        idx[1] = i;\n      }\n    }\n    return idx;\n  }\n\n  maxColumn(column) {\n    checkColumnIndex(this, column);\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    let v = this.get(0, column);\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) > v) {\n        v = this.get(i, column);\n      }\n    }\n    return v;\n  }\n\n  maxColumnIndex(column) {\n    checkColumnIndex(this, column);\n    checkNonEmpty(this);\n    let v = this.get(0, column);\n    let idx = [0, column];\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) > v) {\n        v = this.get(i, column);\n        idx[0] = i;\n      }\n    }\n    return idx;\n  }\n\n  minColumn(column) {\n    checkColumnIndex(this, column);\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    let v = this.get(0, column);\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) < v) {\n        v = this.get(i, column);\n      }\n    }\n    return v;\n  }\n\n  minColumnIndex(column) {\n    checkColumnIndex(this, column);\n    checkNonEmpty(this);\n    let v = this.get(0, column);\n    let idx = [0, column];\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) < v) {\n        v = this.get(i, column);\n        idx[0] = i;\n      }\n    }\n    return idx;\n  }\n\n  diag() {\n    let min = Math.min(this.rows, this.columns);\n    let diag = [];\n    for (let i = 0; i < min; i++) {\n      diag.push(this.get(i, i));\n    }\n    return diag;\n  }\n\n  norm(type = 'frobenius') {\n    switch (type) {\n      case 'max':\n        return this.max();\n      case 'frobenius':\n        return Math.sqrt(this.dot(this));\n      default:\n        throw new RangeError(`unknown norm type: ${type}`);\n    }\n  }\n\n  cumulativeSum() {\n    let sum = 0;\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        sum += this.get(i, j);\n        this.set(i, j, sum);\n      }\n    }\n    return this;\n  }\n\n  dot(vector2) {\n    if (AbstractMatrix.isMatrix(vector2)) vector2 = vector2.to1DArray();\n    let vector1 = this.to1DArray();\n    if (vector1.length !== vector2.length) {\n      throw new RangeError('vectors do not have the same size');\n    }\n    let dot = 0;\n    for (let i = 0; i < vector1.length; i++) {\n      dot += vector1[i] * vector2[i];\n    }\n    return dot;\n  }\n\n  mmul(other) {\n    other = Matrix.checkMatrix(other);\n\n    let m = this.rows;\n    let n = this.columns;\n    let p = other.columns;\n\n    let result = new Matrix(m, p);\n\n    let Bcolj = new Float64Array(n);\n    for (let j = 0; j < p; j++) {\n      for (let k = 0; k < n; k++) {\n        Bcolj[k] = other.get(k, j);\n      }\n\n      for (let i = 0; i < m; i++) {\n        let s = 0;\n        for (let k = 0; k < n; k++) {\n          s += this.get(i, k) * Bcolj[k];\n        }\n\n        result.set(i, j, s);\n      }\n    }\n    return result;\n  }\n\n  mpow(scalar) {\n    if (!this.isSquare()) {\n      throw new RangeError('Matrix must be square');\n    }\n    if (!Number.isInteger(scalar) || scalar < 0) {\n      throw new RangeError('Exponent must be a non-negative integer');\n    }\n    // Russian Peasant exponentiation, i.e. exponentiation by squaring\n    let result = Matrix.eye(this.rows);\n    let bb = this;\n    // Note: Don't bit shift. In JS, that would truncate at 32 bits\n    for (let e = scalar; e >= 1; e /= 2) {\n      if ((e & 1) !== 0) {\n        result = result.mmul(bb);\n      }\n      bb = bb.mmul(bb);\n    }\n    return result;\n  }\n\n  strassen2x2(other) {\n    other = Matrix.checkMatrix(other);\n    let result = new Matrix(2, 2);\n    const a11 = this.get(0, 0);\n    const b11 = other.get(0, 0);\n    const a12 = this.get(0, 1);\n    const b12 = other.get(0, 1);\n    const a21 = this.get(1, 0);\n    const b21 = other.get(1, 0);\n    const a22 = this.get(1, 1);\n    const b22 = other.get(1, 1);\n\n    // Compute intermediate values.\n    const m1 = (a11 + a22) * (b11 + b22);\n    const m2 = (a21 + a22) * b11;\n    const m3 = a11 * (b12 - b22);\n    const m4 = a22 * (b21 - b11);\n    const m5 = (a11 + a12) * b22;\n    const m6 = (a21 - a11) * (b11 + b12);\n    const m7 = (a12 - a22) * (b21 + b22);\n\n    // Combine intermediate values into the output.\n    const c00 = m1 + m4 - m5 + m7;\n    const c01 = m3 + m5;\n    const c10 = m2 + m4;\n    const c11 = m1 - m2 + m3 + m6;\n\n    result.set(0, 0, c00);\n    result.set(0, 1, c01);\n    result.set(1, 0, c10);\n    result.set(1, 1, c11);\n    return result;\n  }\n\n  strassen3x3(other) {\n    other = Matrix.checkMatrix(other);\n    let result = new Matrix(3, 3);\n\n    const a00 = this.get(0, 0);\n    const a01 = this.get(0, 1);\n    const a02 = this.get(0, 2);\n    const a10 = this.get(1, 0);\n    const a11 = this.get(1, 1);\n    const a12 = this.get(1, 2);\n    const a20 = this.get(2, 0);\n    const a21 = this.get(2, 1);\n    const a22 = this.get(2, 2);\n\n    const b00 = other.get(0, 0);\n    const b01 = other.get(0, 1);\n    const b02 = other.get(0, 2);\n    const b10 = other.get(1, 0);\n    const b11 = other.get(1, 1);\n    const b12 = other.get(1, 2);\n    const b20 = other.get(2, 0);\n    const b21 = other.get(2, 1);\n    const b22 = other.get(2, 2);\n\n    const m1 = (a00 + a01 + a02 - a10 - a11 - a21 - a22) * b11;\n    const m2 = (a00 - a10) * (-b01 + b11);\n    const m3 = a11 * (-b00 + b01 + b10 - b11 - b12 - b20 + b22);\n    const m4 = (-a00 + a10 + a11) * (b00 - b01 + b11);\n    const m5 = (a10 + a11) * (-b00 + b01);\n    const m6 = a00 * b00;\n    const m7 = (-a00 + a20 + a21) * (b00 - b02 + b12);\n    const m8 = (-a00 + a20) * (b02 - b12);\n    const m9 = (a20 + a21) * (-b00 + b02);\n    const m10 = (a00 + a01 + a02 - a11 - a12 - a20 - a21) * b12;\n    const m11 = a21 * (-b00 + b02 + b10 - b11 - b12 - b20 + b21);\n    const m12 = (-a02 + a21 + a22) * (b11 + b20 - b21);\n    const m13 = (a02 - a22) * (b11 - b21);\n    const m14 = a02 * b20;\n    const m15 = (a21 + a22) * (-b20 + b21);\n    const m16 = (-a02 + a11 + a12) * (b12 + b20 - b22);\n    const m17 = (a02 - a12) * (b12 - b22);\n    const m18 = (a11 + a12) * (-b20 + b22);\n    const m19 = a01 * b10;\n    const m20 = a12 * b21;\n    const m21 = a10 * b02;\n    const m22 = a20 * b01;\n    const m23 = a22 * b22;\n\n    const c00 = m6 + m14 + m19;\n    const c01 = m1 + m4 + m5 + m6 + m12 + m14 + m15;\n    const c02 = m6 + m7 + m9 + m10 + m14 + m16 + m18;\n    const c10 = m2 + m3 + m4 + m6 + m14 + m16 + m17;\n    const c11 = m2 + m4 + m5 + m6 + m20;\n    const c12 = m14 + m16 + m17 + m18 + m21;\n    const c20 = m6 + m7 + m8 + m11 + m12 + m13 + m14;\n    const c21 = m12 + m13 + m14 + m15 + m22;\n    const c22 = m6 + m7 + m8 + m9 + m23;\n\n    result.set(0, 0, c00);\n    result.set(0, 1, c01);\n    result.set(0, 2, c02);\n    result.set(1, 0, c10);\n    result.set(1, 1, c11);\n    result.set(1, 2, c12);\n    result.set(2, 0, c20);\n    result.set(2, 1, c21);\n    result.set(2, 2, c22);\n    return result;\n  }\n\n  mmulStrassen(y) {\n    y = Matrix.checkMatrix(y);\n    let x = this.clone();\n    let r1 = x.rows;\n    let c1 = x.columns;\n    let r2 = y.rows;\n    let c2 = y.columns;\n    if (c1 !== r2) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        `Multiplying ${r1} x ${c1} and ${r2} x ${c2} matrix: dimensions do not match.`,\n      );\n    }\n\n    // Put a matrix into the top left of a matrix of zeros.\n    // `rows` and `cols` are the dimensions of the output matrix.\n    function embed(mat, rows, cols) {\n      let r = mat.rows;\n      let c = mat.columns;\n      if (r === rows && c === cols) {\n        return mat;\n      } else {\n        let resultat = AbstractMatrix.zeros(rows, cols);\n        resultat = resultat.setSubMatrix(mat, 0, 0);\n        return resultat;\n      }\n    }\n\n    // Make sure both matrices are the same size.\n    // This is exclusively for simplicity:\n    // this algorithm can be implemented with matrices of different sizes.\n\n    let r = Math.max(r1, r2);\n    let c = Math.max(c1, c2);\n    x = embed(x, r, c);\n    y = embed(y, r, c);\n\n    // Our recursive multiplication function.\n    function blockMult(a, b, rows, cols) {\n      // For small matrices, resort to naive multiplication.\n      if (rows <= 512 || cols <= 512) {\n        return a.mmul(b); // a is equivalent to this\n      }\n\n      // Apply dynamic padding.\n      if (rows % 2 === 1 && cols % 2 === 1) {\n        a = embed(a, rows + 1, cols + 1);\n        b = embed(b, rows + 1, cols + 1);\n      } else if (rows % 2 === 1) {\n        a = embed(a, rows + 1, cols);\n        b = embed(b, rows + 1, cols);\n      } else if (cols % 2 === 1) {\n        a = embed(a, rows, cols + 1);\n        b = embed(b, rows, cols + 1);\n      }\n\n      let halfRows = parseInt(a.rows / 2, 10);\n      let halfCols = parseInt(a.columns / 2, 10);\n      // Subdivide input matrices.\n      let a11 = a.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n      let b11 = b.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n\n      let a12 = a.subMatrix(0, halfRows - 1, halfCols, a.columns - 1);\n      let b12 = b.subMatrix(0, halfRows - 1, halfCols, b.columns - 1);\n\n      let a21 = a.subMatrix(halfRows, a.rows - 1, 0, halfCols - 1);\n      let b21 = b.subMatrix(halfRows, b.rows - 1, 0, halfCols - 1);\n\n      let a22 = a.subMatrix(halfRows, a.rows - 1, halfCols, a.columns - 1);\n      let b22 = b.subMatrix(halfRows, b.rows - 1, halfCols, b.columns - 1);\n\n      // Compute intermediate values.\n      let m1 = blockMult(\n        AbstractMatrix.add(a11, a22),\n        AbstractMatrix.add(b11, b22),\n        halfRows,\n        halfCols,\n      );\n      let m2 = blockMult(AbstractMatrix.add(a21, a22), b11, halfRows, halfCols);\n      let m3 = blockMult(a11, AbstractMatrix.sub(b12, b22), halfRows, halfCols);\n      let m4 = blockMult(a22, AbstractMatrix.sub(b21, b11), halfRows, halfCols);\n      let m5 = blockMult(AbstractMatrix.add(a11, a12), b22, halfRows, halfCols);\n      let m6 = blockMult(\n        AbstractMatrix.sub(a21, a11),\n        AbstractMatrix.add(b11, b12),\n        halfRows,\n        halfCols,\n      );\n      let m7 = blockMult(\n        AbstractMatrix.sub(a12, a22),\n        AbstractMatrix.add(b21, b22),\n        halfRows,\n        halfCols,\n      );\n\n      // Combine intermediate values into the output.\n      let c11 = AbstractMatrix.add(m1, m4);\n      c11.sub(m5);\n      c11.add(m7);\n      let c12 = AbstractMatrix.add(m3, m5);\n      let c21 = AbstractMatrix.add(m2, m4);\n      let c22 = AbstractMatrix.sub(m1, m2);\n      c22.add(m3);\n      c22.add(m6);\n\n      // Crop output to the desired size (undo dynamic padding).\n      let result = AbstractMatrix.zeros(2 * c11.rows, 2 * c11.columns);\n      result = result.setSubMatrix(c11, 0, 0);\n      result = result.setSubMatrix(c12, c11.rows, 0);\n      result = result.setSubMatrix(c21, 0, c11.columns);\n      result = result.setSubMatrix(c22, c11.rows, c11.columns);\n      return result.subMatrix(0, rows - 1, 0, cols - 1);\n    }\n\n    return blockMult(x, y, r, c);\n  }\n\n  scaleRows(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { min = 0, max = 1 } = options;\n    if (!Number.isFinite(min)) throw new TypeError('min must be a number');\n    if (!Number.isFinite(max)) throw new TypeError('max must be a number');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    let newMatrix = new Matrix(this.rows, this.columns);\n    for (let i = 0; i < this.rows; i++) {\n      const row = this.getRow(i);\n      if (row.length > 0) {\n        rescale(row, { min, max, output: row });\n      }\n      newMatrix.setRow(i, row);\n    }\n    return newMatrix;\n  }\n\n  scaleColumns(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { min = 0, max = 1 } = options;\n    if (!Number.isFinite(min)) throw new TypeError('min must be a number');\n    if (!Number.isFinite(max)) throw new TypeError('max must be a number');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    let newMatrix = new Matrix(this.rows, this.columns);\n    for (let i = 0; i < this.columns; i++) {\n      const column = this.getColumn(i);\n      if (column.length) {\n        rescale(column, {\n          min,\n          max,\n          output: column,\n        });\n      }\n      newMatrix.setColumn(i, column);\n    }\n    return newMatrix;\n  }\n\n  flipRows() {\n    const middle = Math.ceil(this.columns / 2);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < middle; j++) {\n        let first = this.get(i, j);\n        let last = this.get(i, this.columns - 1 - j);\n        this.set(i, j, last);\n        this.set(i, this.columns - 1 - j, first);\n      }\n    }\n    return this;\n  }\n\n  flipColumns() {\n    const middle = Math.ceil(this.rows / 2);\n    for (let j = 0; j < this.columns; j++) {\n      for (let i = 0; i < middle; i++) {\n        let first = this.get(i, j);\n        let last = this.get(this.rows - 1 - i, j);\n        this.set(i, j, last);\n        this.set(this.rows - 1 - i, j, first);\n      }\n    }\n    return this;\n  }\n\n  kroneckerProduct(other) {\n    other = Matrix.checkMatrix(other);\n\n    let m = this.rows;\n    let n = this.columns;\n    let p = other.rows;\n    let q = other.columns;\n\n    let result = new Matrix(m * p, n * q);\n    for (let i = 0; i < m; i++) {\n      for (let j = 0; j < n; j++) {\n        for (let k = 0; k < p; k++) {\n          for (let l = 0; l < q; l++) {\n            result.set(p * i + k, q * j + l, this.get(i, j) * other.get(k, l));\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n  kroneckerSum(other) {\n    other = Matrix.checkMatrix(other);\n    if (!this.isSquare() || !other.isSquare()) {\n      throw new Error('Kronecker Sum needs two Square Matrices');\n    }\n    let m = this.rows;\n    let n = other.rows;\n    let AxI = this.kroneckerProduct(Matrix.eye(n, n));\n    let IxB = Matrix.eye(m, m).kroneckerProduct(other);\n    return AxI.add(IxB);\n  }\n\n  transpose() {\n    let result = new Matrix(this.columns, this.rows);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        result.set(j, i, this.get(i, j));\n      }\n    }\n    return result;\n  }\n\n  sortRows(compareFunction = compareNumbers) {\n    for (let i = 0; i < this.rows; i++) {\n      this.setRow(i, this.getRow(i).sort(compareFunction));\n    }\n    return this;\n  }\n\n  sortColumns(compareFunction = compareNumbers) {\n    for (let i = 0; i < this.columns; i++) {\n      this.setColumn(i, this.getColumn(i).sort(compareFunction));\n    }\n    return this;\n  }\n\n  subMatrix(startRow, endRow, startColumn, endColumn) {\n    checkRange(this, startRow, endRow, startColumn, endColumn);\n    let newMatrix = new Matrix(\n      endRow - startRow + 1,\n      endColumn - startColumn + 1,\n    );\n    for (let i = startRow; i <= endRow; i++) {\n      for (let j = startColumn; j <= endColumn; j++) {\n        newMatrix.set(i - startRow, j - startColumn, this.get(i, j));\n      }\n    }\n    return newMatrix;\n  }\n\n  subMatrixRow(indices, startColumn, endColumn) {\n    if (startColumn === undefined) startColumn = 0;\n    if (endColumn === undefined) endColumn = this.columns - 1;\n    if (\n      startColumn > endColumn ||\n      startColumn < 0 ||\n      startColumn >= this.columns ||\n      endColumn < 0 ||\n      endColumn >= this.columns\n    ) {\n      throw new RangeError('Argument out of range');\n    }\n\n    let newMatrix = new Matrix(indices.length, endColumn - startColumn + 1);\n    for (let i = 0; i < indices.length; i++) {\n      for (let j = startColumn; j <= endColumn; j++) {\n        if (indices[i] < 0 || indices[i] >= this.rows) {\n          throw new RangeError(`Row index out of range: ${indices[i]}`);\n        }\n        newMatrix.set(i, j - startColumn, this.get(indices[i], j));\n      }\n    }\n    return newMatrix;\n  }\n\n  subMatrixColumn(indices, startRow, endRow) {\n    if (startRow === undefined) startRow = 0;\n    if (endRow === undefined) endRow = this.rows - 1;\n    if (\n      startRow > endRow ||\n      startRow < 0 ||\n      startRow >= this.rows ||\n      endRow < 0 ||\n      endRow >= this.rows\n    ) {\n      throw new RangeError('Argument out of range');\n    }\n\n    let newMatrix = new Matrix(endRow - startRow + 1, indices.length);\n    for (let i = 0; i < indices.length; i++) {\n      for (let j = startRow; j <= endRow; j++) {\n        if (indices[i] < 0 || indices[i] >= this.columns) {\n          throw new RangeError(`Column index out of range: ${indices[i]}`);\n        }\n        newMatrix.set(j - startRow, i, this.get(j, indices[i]));\n      }\n    }\n    return newMatrix;\n  }\n\n  setSubMatrix(matrix, startRow, startColumn) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (matrix.isEmpty()) {\n      return this;\n    }\n    let endRow = startRow + matrix.rows - 1;\n    let endColumn = startColumn + matrix.columns - 1;\n    checkRange(this, startRow, endRow, startColumn, endColumn);\n    for (let i = 0; i < matrix.rows; i++) {\n      for (let j = 0; j < matrix.columns; j++) {\n        this.set(startRow + i, startColumn + j, matrix.get(i, j));\n      }\n    }\n    return this;\n  }\n\n  selection(rowIndices, columnIndices) {\n    checkRowIndices(this, rowIndices);\n    checkColumnIndices(this, columnIndices);\n    let newMatrix = new Matrix(rowIndices.length, columnIndices.length);\n    for (let i = 0; i < rowIndices.length; i++) {\n      let rowIndex = rowIndices[i];\n      for (let j = 0; j < columnIndices.length; j++) {\n        let columnIndex = columnIndices[j];\n        newMatrix.set(i, j, this.get(rowIndex, columnIndex));\n      }\n    }\n    return newMatrix;\n  }\n\n  trace() {\n    let min = Math.min(this.rows, this.columns);\n    let trace = 0;\n    for (let i = 0; i < min; i++) {\n      trace += this.get(i, i);\n    }\n    return trace;\n  }\n\n  clone() {\n    return this.constructor.copy(this, new Matrix(this.rows, this.columns));\n  }\n\n  /**\n   * @template {AbstractMatrix} M\n   * @param {AbstractMatrix} from\n   * @param {M} to\n   * @return {M}\n   */\n  static copy(from, to) {\n    for (const [row, column, value] of from.entries()) {\n      to.set(row, column, value);\n    }\n\n    return to;\n  }\n\n  sum(by) {\n    switch (by) {\n      case 'row':\n        return sumByRow(this);\n      case 'column':\n        return sumByColumn(this);\n      case undefined:\n        return sumAll(this);\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  product(by) {\n    switch (by) {\n      case 'row':\n        return productByRow(this);\n      case 'column':\n        return productByColumn(this);\n      case undefined:\n        return productAll(this);\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  mean(by) {\n    const sum = this.sum(by);\n    switch (by) {\n      case 'row': {\n        for (let i = 0; i < this.rows; i++) {\n          sum[i] /= this.columns;\n        }\n        return sum;\n      }\n      case 'column': {\n        for (let i = 0; i < this.columns; i++) {\n          sum[i] /= this.rows;\n        }\n        return sum;\n      }\n      case undefined:\n        return sum / this.size;\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  variance(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { unbiased = true, mean = this.mean(by) } = options;\n    if (typeof unbiased !== 'boolean') {\n      throw new TypeError('unbiased must be a boolean');\n    }\n    switch (by) {\n      case 'row': {\n        if (!isAnyArray.isAnyArray(mean)) {\n          throw new TypeError('mean must be an array');\n        }\n        return varianceByRow(this, unbiased, mean);\n      }\n      case 'column': {\n        if (!isAnyArray.isAnyArray(mean)) {\n          throw new TypeError('mean must be an array');\n        }\n        return varianceByColumn(this, unbiased, mean);\n      }\n      case undefined: {\n        if (typeof mean !== 'number') {\n          throw new TypeError('mean must be a number');\n        }\n        return varianceAll(this, unbiased, mean);\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  standardDeviation(by, options) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    const variance = this.variance(by, options);\n    if (by === undefined) {\n      return Math.sqrt(variance);\n    } else {\n      for (let i = 0; i < variance.length; i++) {\n        variance[i] = Math.sqrt(variance[i]);\n      }\n      return variance;\n    }\n  }\n\n  center(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { center = this.mean(by) } = options;\n    switch (by) {\n      case 'row': {\n        if (!isAnyArray.isAnyArray(center)) {\n          throw new TypeError('center must be an array');\n        }\n        centerByRow(this, center);\n        return this;\n      }\n      case 'column': {\n        if (!isAnyArray.isAnyArray(center)) {\n          throw new TypeError('center must be an array');\n        }\n        centerByColumn(this, center);\n        return this;\n      }\n      case undefined: {\n        if (typeof center !== 'number') {\n          throw new TypeError('center must be a number');\n        }\n        centerAll(this, center);\n        return this;\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  scale(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    let scale = options.scale;\n    switch (by) {\n      case 'row': {\n        if (scale === undefined) {\n          scale = getScaleByRow(this);\n        } else if (!isAnyArray.isAnyArray(scale)) {\n          throw new TypeError('scale must be an array');\n        }\n        scaleByRow(this, scale);\n        return this;\n      }\n      case 'column': {\n        if (scale === undefined) {\n          scale = getScaleByColumn(this);\n        } else if (!isAnyArray.isAnyArray(scale)) {\n          throw new TypeError('scale must be an array');\n        }\n        scaleByColumn(this, scale);\n        return this;\n      }\n      case undefined: {\n        if (scale === undefined) {\n          scale = getScaleAll(this);\n        } else if (typeof scale !== 'number') {\n          throw new TypeError('scale must be a number');\n        }\n        scaleAll(this, scale);\n        return this;\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  toString(options) {\n    return inspectMatrixWithOptions(this, options);\n  }\n\n  [Symbol.iterator]() {\n    return this.entries();\n  }\n\n  /**\n   * iterator from left to right, from top to bottom\n   * yield [row, column, value]\n   * @returns {Generator<[number, number, number], void, void>}\n   */\n  *entries() {\n    for (let row = 0; row < this.rows; row++) {\n      for (let col = 0; col < this.columns; col++) {\n        yield [row, col, this.get(row, col)];\n      }\n    }\n  }\n\n  /**\n   * iterator from left to right, from top to bottom\n   * yield value\n   * @returns {Generator<number, void, void>}\n   */\n  *values() {\n    for (let row = 0; row < this.rows; row++) {\n      for (let col = 0; col < this.columns; col++) {\n        yield this.get(row, col);\n      }\n    }\n  }\n}\n\nAbstractMatrix.prototype.klass = 'Matrix';\nif (typeof Symbol !== 'undefined') {\n  AbstractMatrix.prototype[Symbol.for('nodejs.util.inspect.custom')] =\n    inspectMatrix;\n}\n\nfunction compareNumbers(a, b) {\n  return a - b;\n}\n\nfunction isArrayOfNumbers(array) {\n  return array.every((element) => {\n    return typeof element === 'number';\n  });\n}\n\n// Synonyms\nAbstractMatrix.random = AbstractMatrix.rand;\nAbstractMatrix.randomInt = AbstractMatrix.randInt;\nAbstractMatrix.diagonal = AbstractMatrix.diag;\nAbstractMatrix.prototype.diagonal = AbstractMatrix.prototype.diag;\nAbstractMatrix.identity = AbstractMatrix.eye;\nAbstractMatrix.prototype.negate = AbstractMatrix.prototype.neg;\nAbstractMatrix.prototype.tensorProduct =\n  AbstractMatrix.prototype.kroneckerProduct;\n\nclass Matrix extends AbstractMatrix {\n  /**\n   * @type {Float64Array[]}\n   */\n  data;\n\n  /**\n   * Init an empty matrix\n   * @param {number} nRows\n   * @param {number} nColumns\n   */\n  #initData(nRows, nColumns) {\n    this.data = [];\n\n    if (Number.isInteger(nColumns) && nColumns >= 0) {\n      for (let i = 0; i < nRows; i++) {\n        this.data.push(new Float64Array(nColumns));\n      }\n    } else {\n      throw new TypeError('nColumns must be a positive integer');\n    }\n\n    this.rows = nRows;\n    this.columns = nColumns;\n  }\n\n  constructor(nRows, nColumns) {\n    super();\n    if (Matrix.isMatrix(nRows)) {\n      this.#initData(nRows.rows, nRows.columns);\n      Matrix.copy(nRows, this);\n    } else if (Number.isInteger(nRows) && nRows >= 0) {\n      this.#initData(nRows, nColumns);\n    } else if (isAnyArray.isAnyArray(nRows)) {\n      // Copy the values from the 2D array\n      const arrayData = nRows;\n      nRows = arrayData.length;\n      nColumns = nRows ? arrayData[0].length : 0;\n      if (typeof nColumns !== 'number') {\n        throw new TypeError(\n          'Data must be a 2D array with at least one element',\n        );\n      }\n      this.data = [];\n\n      for (let i = 0; i < nRows; i++) {\n        if (arrayData[i].length !== nColumns) {\n          throw new RangeError('Inconsistent array dimensions');\n        }\n        if (!isArrayOfNumbers(arrayData[i])) {\n          throw new TypeError('Input data contains non-numeric values');\n        }\n        this.data.push(Float64Array.from(arrayData[i]));\n      }\n\n      this.rows = nRows;\n      this.columns = nColumns;\n    } else {\n      throw new TypeError(\n        'First argument must be a positive number or an array',\n      );\n    }\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.data[rowIndex][columnIndex] = value;\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.data[rowIndex][columnIndex];\n  }\n\n  removeRow(index) {\n    checkRowIndex(this, index);\n    this.data.splice(index, 1);\n    this.rows -= 1;\n    return this;\n  }\n\n  addRow(index, array) {\n    if (array === undefined) {\n      array = index;\n      index = this.rows;\n    }\n    checkRowIndex(this, index, true);\n    array = Float64Array.from(checkRowVector(this, array));\n    this.data.splice(index, 0, array);\n    this.rows += 1;\n    return this;\n  }\n\n  removeColumn(index) {\n    checkColumnIndex(this, index);\n    for (let i = 0; i < this.rows; i++) {\n      const newRow = new Float64Array(this.columns - 1);\n      for (let j = 0; j < index; j++) {\n        newRow[j] = this.data[i][j];\n      }\n      for (let j = index + 1; j < this.columns; j++) {\n        newRow[j - 1] = this.data[i][j];\n      }\n      this.data[i] = newRow;\n    }\n    this.columns -= 1;\n    return this;\n  }\n\n  addColumn(index, array) {\n    if (typeof array === 'undefined') {\n      array = index;\n      index = this.columns;\n    }\n    checkColumnIndex(this, index, true);\n    array = checkColumnVector(this, array);\n    for (let i = 0; i < this.rows; i++) {\n      const newRow = new Float64Array(this.columns + 1);\n      let j = 0;\n      for (; j < index; j++) {\n        newRow[j] = this.data[i][j];\n      }\n      newRow[j++] = array[i];\n      for (; j < this.columns + 1; j++) {\n        newRow[j] = this.data[i][j - 1];\n      }\n      this.data[i] = newRow;\n    }\n    this.columns += 1;\n    return this;\n  }\n}\n\ninstallMathOperations(AbstractMatrix, Matrix);\n\n/**\n * @typedef {0 | 1 | number | boolean} Mask\n */\n\nclass SymmetricMatrix extends AbstractMatrix {\n  /** @type {Matrix} */\n  #matrix;\n\n  get size() {\n    return this.#matrix.size;\n  }\n\n  get rows() {\n    return this.#matrix.rows;\n  }\n\n  get columns() {\n    return this.#matrix.columns;\n  }\n\n  get diagonalSize() {\n    return this.rows;\n  }\n\n  /**\n   * not the same as matrix.isSymmetric()\n   * Here is to check if it's instanceof SymmetricMatrix without bundling issues\n   *\n   * @param value\n   * @returns {boolean}\n   */\n  static isSymmetricMatrix(value) {\n    return Matrix.isMatrix(value) && value.klassType === 'SymmetricMatrix';\n  }\n\n  /**\n   * @param diagonalSize\n   * @return {SymmetricMatrix}\n   */\n  static zeros(diagonalSize) {\n    return new this(diagonalSize);\n  }\n\n  /**\n   * @param diagonalSize\n   * @return {SymmetricMatrix}\n   */\n  static ones(diagonalSize) {\n    return new this(diagonalSize).fill(1);\n  }\n\n  /**\n   * @param {number | AbstractMatrix | ArrayLike<ArrayLike<number>>} diagonalSize\n   * @return {this}\n   */\n  constructor(diagonalSize) {\n    super();\n\n    if (Matrix.isMatrix(diagonalSize)) {\n      if (!diagonalSize.isSymmetric()) {\n        throw new TypeError('not symmetric data');\n      }\n\n      this.#matrix = Matrix.copy(\n        diagonalSize,\n        new Matrix(diagonalSize.rows, diagonalSize.rows),\n      );\n    } else if (Number.isInteger(diagonalSize) && diagonalSize >= 0) {\n      this.#matrix = new Matrix(diagonalSize, diagonalSize);\n    } else {\n      this.#matrix = new Matrix(diagonalSize);\n\n      if (!this.isSymmetric()) {\n        throw new TypeError('not symmetric data');\n      }\n    }\n  }\n\n  clone() {\n    const matrix = new SymmetricMatrix(this.diagonalSize);\n\n    for (const [row, col, value] of this.upperRightEntries()) {\n      matrix.set(row, col, value);\n    }\n\n    return matrix;\n  }\n\n  toMatrix() {\n    return new Matrix(this);\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.#matrix.get(rowIndex, columnIndex);\n  }\n  set(rowIndex, columnIndex, value) {\n    // symmetric set\n    this.#matrix.set(rowIndex, columnIndex, value);\n    this.#matrix.set(columnIndex, rowIndex, value);\n\n    return this;\n  }\n\n  removeCross(index) {\n    // symmetric remove side\n    this.#matrix.removeRow(index);\n    this.#matrix.removeColumn(index);\n\n    return this;\n  }\n\n  addCross(index, array) {\n    if (array === undefined) {\n      array = index;\n      index = this.diagonalSize;\n    }\n\n    const row = array.slice();\n    row.splice(index, 1);\n\n    this.#matrix.addRow(index, row);\n    this.#matrix.addColumn(index, array);\n\n    return this;\n  }\n\n  /**\n   * @param {Mask[]} mask\n   */\n  applyMask(mask) {\n    if (mask.length !== this.diagonalSize) {\n      throw new RangeError('Mask size do not match with matrix size');\n    }\n\n    // prepare sides to remove from matrix from mask\n    /** @type {number[]} */\n    const sidesToRemove = [];\n    for (const [index, passthroughs] of mask.entries()) {\n      if (passthroughs) continue;\n      sidesToRemove.push(index);\n    }\n    // to remove from highest to lowest for no mutation shifting\n    sidesToRemove.reverse();\n\n    // remove sides\n    for (const sideIndex of sidesToRemove) {\n      this.removeCross(sideIndex);\n    }\n\n    return this;\n  }\n\n  /**\n   * Compact format upper-right corner of matrix\n   * iterate from left to right, from top to bottom.\n   *\n   * ```\n   *   A B C D\n   * A 1 2 3 4\n   * B 2 5 6 7\n   * C 3 6 8 9\n   * D 4 7 9 10\n   * ```\n   *\n   * will return compact 1D array `[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]`\n   *\n   * length is S(i=0, n=sideSize) => 10 for a 4 sideSized matrix\n   *\n   * @returns {number[]}\n   */\n  toCompact() {\n    const { diagonalSize } = this;\n\n    /** @type {number[]} */\n    const compact = new Array((diagonalSize * (diagonalSize + 1)) / 2);\n    for (let col = 0, row = 0, index = 0; index < compact.length; index++) {\n      compact[index] = this.get(row, col);\n\n      if (++col >= diagonalSize) col = ++row;\n    }\n\n    return compact;\n  }\n\n  /**\n   * @param {number[]} compact\n   * @return {SymmetricMatrix}\n   */\n  static fromCompact(compact) {\n    const compactSize = compact.length;\n    // compactSize = (sideSize * (sideSize + 1)) / 2\n    // https://mathsolver.microsoft.com/fr/solve-problem/y%20%3D%20%20x%20%60cdot%20%20%20%60frac%7B%20%20%60left(%20x%2B1%20%20%60right)%20%20%20%20%7D%7B%202%20%20%7D\n    // sideSize = (Sqrt(8 \u00D7 compactSize + 1) - 1) / 2\n    const diagonalSize = (Math.sqrt(8 * compactSize + 1) - 1) / 2;\n\n    if (!Number.isInteger(diagonalSize)) {\n      throw new TypeError(\n        `This array is not a compact representation of a Symmetric Matrix, ${JSON.stringify(\n          compact,\n        )}`,\n      );\n    }\n\n    const matrix = new SymmetricMatrix(diagonalSize);\n    for (let col = 0, row = 0, index = 0; index < compactSize; index++) {\n      matrix.set(col, row, compact[index]);\n      if (++col >= diagonalSize) col = ++row;\n    }\n\n    return matrix;\n  }\n\n  /**\n   * half iterator upper-right-corner from left to right, from top to bottom\n   * yield [row, column, value]\n   *\n   * @returns {Generator<[number, number, number], void, void>}\n   */\n  *upperRightEntries() {\n    for (let row = 0, col = 0; row < this.diagonalSize; void 0) {\n      const value = this.get(row, col);\n\n      yield [row, col, value];\n\n      // at the end of row, move cursor to next row at diagonal position\n      if (++col >= this.diagonalSize) col = ++row;\n    }\n  }\n\n  /**\n   * half iterator upper-right-corner from left to right, from top to bottom\n   * yield value\n   *\n   * @returns {Generator<[number, number, number], void, void>}\n   */\n  *upperRightValues() {\n    for (let row = 0, col = 0; row < this.diagonalSize; void 0) {\n      const value = this.get(row, col);\n\n      yield value;\n\n      // at the end of row, move cursor to next row at diagonal position\n      if (++col >= this.diagonalSize) col = ++row;\n    }\n  }\n}\nSymmetricMatrix.prototype.klassType = 'SymmetricMatrix';\n\nclass DistanceMatrix extends SymmetricMatrix {\n  /**\n   * not the same as matrix.isSymmetric()\n   * Here is to check if it's instanceof SymmetricMatrix without bundling issues\n   *\n   * @param value\n   * @returns {boolean}\n   */\n  static isDistanceMatrix(value) {\n    return (\n      SymmetricMatrix.isSymmetricMatrix(value) &&\n      value.klassSubType === 'DistanceMatrix'\n    );\n  }\n\n  constructor(sideSize) {\n    super(sideSize);\n\n    if (!this.isDistance()) {\n      throw new TypeError('Provided arguments do no produce a distance matrix');\n    }\n  }\n\n  set(rowIndex, columnIndex, value) {\n    // distance matrix diagonal is 0\n    if (rowIndex === columnIndex) value = 0;\n\n    return super.set(rowIndex, columnIndex, value);\n  }\n\n  addCross(index, array) {\n    if (array === undefined) {\n      array = index;\n      index = this.diagonalSize;\n    }\n\n    // ensure distance\n    array = array.slice();\n    array[index] = 0;\n\n    return super.addCross(index, array);\n  }\n\n  toSymmetricMatrix() {\n    return new SymmetricMatrix(this);\n  }\n\n  clone() {\n    const matrix = new DistanceMatrix(this.diagonalSize);\n\n    for (const [row, col, value] of this.upperRightEntries()) {\n      if (row === col) continue;\n      matrix.set(row, col, value);\n    }\n\n    return matrix;\n  }\n\n  /**\n   * Compact format upper-right corner of matrix\n   * no diagonal (only zeros)\n   * iterable from left to right, from top to bottom.\n   *\n   * ```\n   *   A B C D\n   * A 0 1 2 3\n   * B 1 0 4 5\n   * C 2 4 0 6\n   * D 3 5 6 0\n   * ```\n   *\n   * will return compact 1D array `[1, 2, 3, 4, 5, 6]`\n   *\n   * length is S(i=0, n=sideSize-1) => 6 for a 4 side sized matrix\n   *\n   * @returns {number[]}\n   */\n  toCompact() {\n    const { diagonalSize } = this;\n    const compactLength = ((diagonalSize - 1) * diagonalSize) / 2;\n\n    /** @type {number[]} */\n    const compact = new Array(compactLength);\n    for (let col = 1, row = 0, index = 0; index < compact.length; index++) {\n      compact[index] = this.get(row, col);\n\n      if (++col >= diagonalSize) col = ++row + 1;\n    }\n\n    return compact;\n  }\n\n  /**\n   * @param {number[]} compact\n   */\n  static fromCompact(compact) {\n    const compactSize = compact.length;\n\n    if (compactSize === 0) {\n      return new this(0);\n    }\n\n    // compactSize in Natural integer range ]0;\u221E]\n    // compactSize = (sideSize * (sideSize - 1)) / 2\n    // sideSize = (Sqrt(8 \u00D7 compactSize + 1) + 1) / 2\n    const diagonalSize = (Math.sqrt(8 * compactSize + 1) + 1) / 2;\n\n    if (!Number.isInteger(diagonalSize)) {\n      throw new TypeError(\n        `This array is not a compact representation of a DistanceMatrix, ${JSON.stringify(\n          compact,\n        )}`,\n      );\n    }\n\n    const matrix = new this(diagonalSize);\n    for (let col = 1, row = 0, index = 0; index < compactSize; index++) {\n      matrix.set(col, row, compact[index]);\n      if (++col >= diagonalSize) col = ++row + 1;\n    }\n\n    return matrix;\n  }\n}\nDistanceMatrix.prototype.klassSubType = 'DistanceMatrix';\n\nclass BaseView extends AbstractMatrix {\n  constructor(matrix, rows, columns) {\n    super();\n    this.matrix = matrix;\n    this.rows = rows;\n    this.columns = columns;\n  }\n}\n\nclass MatrixColumnView extends BaseView {\n  constructor(matrix, column) {\n    checkColumnIndex(matrix, column);\n    super(matrix, matrix.rows, 1);\n    this.column = column;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(rowIndex, this.column, value);\n    return this;\n  }\n\n  get(rowIndex) {\n    return this.matrix.get(rowIndex, this.column);\n  }\n}\n\nclass MatrixColumnSelectionView extends BaseView {\n  constructor(matrix, columnIndices) {\n    checkColumnIndices(matrix, columnIndices);\n    super(matrix, matrix.rows, columnIndices.length);\n    this.columnIndices = columnIndices;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(rowIndex, this.columnIndices[columnIndex], value);\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(rowIndex, this.columnIndices[columnIndex]);\n  }\n}\n\nclass MatrixFlipColumnView extends BaseView {\n  constructor(matrix) {\n    super(matrix, matrix.rows, matrix.columns);\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(rowIndex, this.columns - columnIndex - 1, value);\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(rowIndex, this.columns - columnIndex - 1);\n  }\n}\n\nclass MatrixFlipRowView extends BaseView {\n  constructor(matrix) {\n    super(matrix, matrix.rows, matrix.columns);\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(this.rows - rowIndex - 1, columnIndex, value);\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(this.rows - rowIndex - 1, columnIndex);\n  }\n}\n\nclass MatrixRowView extends BaseView {\n  constructor(matrix, row) {\n    checkRowIndex(matrix, row);\n    super(matrix, 1, matrix.columns);\n    this.row = row;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(this.row, columnIndex, value);\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(this.row, columnIndex);\n  }\n}\n\nclass MatrixRowSelectionView extends BaseView {\n  constructor(matrix, rowIndices) {\n    checkRowIndices(matrix, rowIndices);\n    super(matrix, rowIndices.length, matrix.columns);\n    this.rowIndices = rowIndices;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(this.rowIndices[rowIndex], columnIndex, value);\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(this.rowIndices[rowIndex], columnIndex);\n  }\n}\n\nclass MatrixSelectionView extends BaseView {\n  constructor(matrix, rowIndices, columnIndices) {\n    checkRowIndices(matrix, rowIndices);\n    checkColumnIndices(matrix, columnIndices);\n    super(matrix, rowIndices.length, columnIndices.length);\n    this.rowIndices = rowIndices;\n    this.columnIndices = columnIndices;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(\n      this.rowIndices[rowIndex],\n      this.columnIndices[columnIndex],\n      value,\n    );\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(\n      this.rowIndices[rowIndex],\n      this.columnIndices[columnIndex],\n    );\n  }\n}\n\nclass MatrixSubView extends BaseView {\n  constructor(matrix, startRow, endRow, startColumn, endColumn) {\n    checkRange(matrix, startRow, endRow, startColumn, endColumn);\n    super(matrix, endRow - startRow + 1, endColumn - startColumn + 1);\n    this.startRow = startRow;\n    this.startColumn = startColumn;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(\n      this.startRow + rowIndex,\n      this.startColumn + columnIndex,\n      value,\n    );\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(\n      this.startRow + rowIndex,\n      this.startColumn + columnIndex,\n    );\n  }\n}\n\nclass MatrixTransposeView extends BaseView {\n  constructor(matrix) {\n    super(matrix, matrix.columns, matrix.rows);\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(columnIndex, rowIndex, value);\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(columnIndex, rowIndex);\n  }\n}\n\nclass WrapperMatrix1D extends AbstractMatrix {\n  constructor(data, options = {}) {\n    const { rows = 1 } = options;\n\n    if (data.length % rows !== 0) {\n      throw new Error('the data length is not divisible by the number of rows');\n    }\n    super();\n    this.rows = rows;\n    this.columns = data.length / rows;\n    this.data = data;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    let index = this._calculateIndex(rowIndex, columnIndex);\n    this.data[index] = value;\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    let index = this._calculateIndex(rowIndex, columnIndex);\n    return this.data[index];\n  }\n\n  _calculateIndex(row, column) {\n    return row * this.columns + column;\n  }\n}\n\nclass WrapperMatrix2D extends AbstractMatrix {\n  constructor(data) {\n    super();\n    this.data = data;\n    this.rows = data.length;\n    this.columns = data[0].length;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.data[rowIndex][columnIndex] = value;\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.data[rowIndex][columnIndex];\n  }\n}\n\nfunction wrap(array, options) {\n  if (isAnyArray.isAnyArray(array)) {\n    if (array[0] && isAnyArray.isAnyArray(array[0])) {\n      return new WrapperMatrix2D(array);\n    } else {\n      return new WrapperMatrix1D(array, options);\n    }\n  } else {\n    throw new Error('the argument is not an array');\n  }\n}\n\nclass LuDecomposition {\n  constructor(matrix) {\n    matrix = WrapperMatrix2D.checkMatrix(matrix);\n\n    let lu = matrix.clone();\n    let rows = lu.rows;\n    let columns = lu.columns;\n    let pivotVector = new Float64Array(rows);\n    let pivotSign = 1;\n    let i, j, k, p, s, t, v;\n    let LUcolj, kmax;\n\n    for (i = 0; i < rows; i++) {\n      pivotVector[i] = i;\n    }\n\n    LUcolj = new Float64Array(rows);\n\n    for (j = 0; j < columns; j++) {\n      for (i = 0; i < rows; i++) {\n        LUcolj[i] = lu.get(i, j);\n      }\n\n      for (i = 0; i < rows; i++) {\n        kmax = Math.min(i, j);\n        s = 0;\n        for (k = 0; k < kmax; k++) {\n          s += lu.get(i, k) * LUcolj[k];\n        }\n        LUcolj[i] -= s;\n        lu.set(i, j, LUcolj[i]);\n      }\n\n      p = j;\n      for (i = j + 1; i < rows; i++) {\n        if (Math.abs(LUcolj[i]) > Math.abs(LUcolj[p])) {\n          p = i;\n        }\n      }\n\n      if (p !== j) {\n        for (k = 0; k < columns; k++) {\n          t = lu.get(p, k);\n          lu.set(p, k, lu.get(j, k));\n          lu.set(j, k, t);\n        }\n\n        v = pivotVector[p];\n        pivotVector[p] = pivotVector[j];\n        pivotVector[j] = v;\n\n        pivotSign = -pivotSign;\n      }\n\n      if (j < rows && lu.get(j, j) !== 0) {\n        for (i = j + 1; i < rows; i++) {\n          lu.set(i, j, lu.get(i, j) / lu.get(j, j));\n        }\n      }\n    }\n\n    this.LU = lu;\n    this.pivotVector = pivotVector;\n    this.pivotSign = pivotSign;\n  }\n\n  isSingular() {\n    let data = this.LU;\n    let col = data.columns;\n    for (let j = 0; j < col; j++) {\n      if (data.get(j, j) === 0) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  solve(value) {\n    value = Matrix.checkMatrix(value);\n\n    let lu = this.LU;\n    let rows = lu.rows;\n\n    if (rows !== value.rows) {\n      throw new Error('Invalid matrix dimensions');\n    }\n    if (this.isSingular()) {\n      throw new Error('LU matrix is singular');\n    }\n\n    let count = value.columns;\n    let X = value.subMatrixRow(this.pivotVector, 0, count - 1);\n    let columns = lu.columns;\n    let i, j, k;\n\n    for (k = 0; k < columns; k++) {\n      for (i = k + 1; i < columns; i++) {\n        for (j = 0; j < count; j++) {\n          X.set(i, j, X.get(i, j) - X.get(k, j) * lu.get(i, k));\n        }\n      }\n    }\n    for (k = columns - 1; k >= 0; k--) {\n      for (j = 0; j < count; j++) {\n        X.set(k, j, X.get(k, j) / lu.get(k, k));\n      }\n      for (i = 0; i < k; i++) {\n        for (j = 0; j < count; j++) {\n          X.set(i, j, X.get(i, j) - X.get(k, j) * lu.get(i, k));\n        }\n      }\n    }\n    return X;\n  }\n\n  get determinant() {\n    let data = this.LU;\n    if (!data.isSquare()) {\n      throw new Error('Matrix must be square');\n    }\n    let determinant = this.pivotSign;\n    let col = data.columns;\n    for (let j = 0; j < col; j++) {\n      determinant *= data.get(j, j);\n    }\n    return determinant;\n  }\n\n  get lowerTriangularMatrix() {\n    let data = this.LU;\n    let rows = data.rows;\n    let columns = data.columns;\n    let X = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        if (i > j) {\n          X.set(i, j, data.get(i, j));\n        } else if (i === j) {\n          X.set(i, j, 1);\n        } else {\n          X.set(i, j, 0);\n        }\n      }\n    }\n    return X;\n  }\n\n  get upperTriangularMatrix() {\n    let data = this.LU;\n    let rows = data.rows;\n    let columns = data.columns;\n    let X = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        if (i <= j) {\n          X.set(i, j, data.get(i, j));\n        } else {\n          X.set(i, j, 0);\n        }\n      }\n    }\n    return X;\n  }\n\n  get pivotPermutationVector() {\n    return Array.from(this.pivotVector);\n  }\n}\n\nfunction hypotenuse(a, b) {\n  let r = 0;\n  if (Math.abs(a) > Math.abs(b)) {\n    r = b / a;\n    return Math.abs(a) * Math.sqrt(1 + r * r);\n  }\n  if (b !== 0) {\n    r = a / b;\n    return Math.abs(b) * Math.sqrt(1 + r * r);\n  }\n  return 0;\n}\n\nclass QrDecomposition {\n  constructor(value) {\n    value = WrapperMatrix2D.checkMatrix(value);\n\n    let qr = value.clone();\n    let m = value.rows;\n    let n = value.columns;\n    let rdiag = new Float64Array(n);\n    let i, j, k, s;\n\n    for (k = 0; k < n; k++) {\n      let nrm = 0;\n      for (i = k; i < m; i++) {\n        nrm = hypotenuse(nrm, qr.get(i, k));\n      }\n      if (nrm !== 0) {\n        if (qr.get(k, k) < 0) {\n          nrm = -nrm;\n        }\n        for (i = k; i < m; i++) {\n          qr.set(i, k, qr.get(i, k) / nrm);\n        }\n        qr.set(k, k, qr.get(k, k) + 1);\n        for (j = k + 1; j < n; j++) {\n          s = 0;\n          for (i = k; i < m; i++) {\n            s += qr.get(i, k) * qr.get(i, j);\n          }\n          s = -s / qr.get(k, k);\n          for (i = k; i < m; i++) {\n            qr.set(i, j, qr.get(i, j) + s * qr.get(i, k));\n          }\n        }\n      }\n      rdiag[k] = -nrm;\n    }\n\n    this.QR = qr;\n    this.Rdiag = rdiag;\n  }\n\n  solve(value) {\n    value = Matrix.checkMatrix(value);\n\n    let qr = this.QR;\n    let m = qr.rows;\n\n    if (value.rows !== m) {\n      throw new Error('Matrix row dimensions must agree');\n    }\n    if (!this.isFullRank()) {\n      throw new Error('Matrix is rank deficient');\n    }\n\n    let count = value.columns;\n    let X = value.clone();\n    let n = qr.columns;\n    let i, j, k, s;\n\n    for (k = 0; k < n; k++) {\n      for (j = 0; j < count; j++) {\n        s = 0;\n        for (i = k; i < m; i++) {\n          s += qr.get(i, k) * X.get(i, j);\n        }\n        s = -s / qr.get(k, k);\n        for (i = k; i < m; i++) {\n          X.set(i, j, X.get(i, j) + s * qr.get(i, k));\n        }\n      }\n    }\n    for (k = n - 1; k >= 0; k--) {\n      for (j = 0; j < count; j++) {\n        X.set(k, j, X.get(k, j) / this.Rdiag[k]);\n      }\n      for (i = 0; i < k; i++) {\n        for (j = 0; j < count; j++) {\n          X.set(i, j, X.get(i, j) - X.get(k, j) * qr.get(i, k));\n        }\n      }\n    }\n\n    return X.subMatrix(0, n - 1, 0, count - 1);\n  }\n\n  isFullRank() {\n    let columns = this.QR.columns;\n    for (let i = 0; i < columns; i++) {\n      if (this.Rdiag[i] === 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  get upperTriangularMatrix() {\n    let qr = this.QR;\n    let n = qr.columns;\n    let X = new Matrix(n, n);\n    let i, j;\n    for (i = 0; i < n; i++) {\n      for (j = 0; j < n; j++) {\n        if (i < j) {\n          X.set(i, j, qr.get(i, j));\n        } else if (i === j) {\n          X.set(i, j, this.Rdiag[i]);\n        } else {\n          X.set(i, j, 0);\n        }\n      }\n    }\n    return X;\n  }\n\n  get orthogonalMatrix() {\n    let qr = this.QR;\n    let rows = qr.rows;\n    let columns = qr.columns;\n    let X = new Matrix(rows, columns);\n    let i, j, k, s;\n\n    for (k = columns - 1; k >= 0; k--) {\n      for (i = 0; i < rows; i++) {\n        X.set(i, k, 0);\n      }\n      X.set(k, k, 1);\n      for (j = k; j < columns; j++) {\n        if (qr.get(k, k) !== 0) {\n          s = 0;\n          for (i = k; i < rows; i++) {\n            s += qr.get(i, k) * X.get(i, j);\n          }\n\n          s = -s / qr.get(k, k);\n\n          for (i = k; i < rows; i++) {\n            X.set(i, j, X.get(i, j) + s * qr.get(i, k));\n          }\n        }\n      }\n    }\n    return X;\n  }\n}\n\nclass SingularValueDecomposition {\n  constructor(value, options = {}) {\n    value = WrapperMatrix2D.checkMatrix(value);\n\n    if (value.isEmpty()) {\n      throw new Error('Matrix must be non-empty');\n    }\n\n    let m = value.rows;\n    let n = value.columns;\n\n    const {\n      computeLeftSingularVectors = true,\n      computeRightSingularVectors = true,\n      autoTranspose = false,\n    } = options;\n\n    let wantu = Boolean(computeLeftSingularVectors);\n    let wantv = Boolean(computeRightSingularVectors);\n\n    let swapped = false;\n    let a;\n    if (m < n) {\n      if (!autoTranspose) {\n        a = value.clone();\n        // eslint-disable-next-line no-console\n        console.warn(\n          'Computing SVD on a matrix with more columns than rows. Consider enabling autoTranspose',\n        );\n      } else {\n        a = value.transpose();\n        m = a.rows;\n        n = a.columns;\n        swapped = true;\n        let aux = wantu;\n        wantu = wantv;\n        wantv = aux;\n      }\n    } else {\n      a = value.clone();\n    }\n\n    let nu = Math.min(m, n);\n    let ni = Math.min(m + 1, n);\n    let s = new Float64Array(ni);\n    let U = new Matrix(m, nu);\n    let V = new Matrix(n, n);\n\n    let e = new Float64Array(n);\n    let work = new Float64Array(m);\n\n    let si = new Float64Array(ni);\n    for (let i = 0; i < ni; i++) si[i] = i;\n\n    let nct = Math.min(m - 1, n);\n    let nrt = Math.max(0, Math.min(n - 2, m));\n    let mrc = Math.max(nct, nrt);\n\n    for (let k = 0; k < mrc; k++) {\n      if (k < nct) {\n        s[k] = 0;\n        for (let i = k; i < m; i++) {\n          s[k] = hypotenuse(s[k], a.get(i, k));\n        }\n        if (s[k] !== 0) {\n          if (a.get(k, k) < 0) {\n            s[k] = -s[k];\n          }\n          for (let i = k; i < m; i++) {\n            a.set(i, k, a.get(i, k) / s[k]);\n          }\n          a.set(k, k, a.get(k, k) + 1);\n        }\n        s[k] = -s[k];\n      }\n\n      for (let j = k + 1; j < n; j++) {\n        if (k < nct && s[k] !== 0) {\n          let t = 0;\n          for (let i = k; i < m; i++) {\n            t += a.get(i, k) * a.get(i, j);\n          }\n          t = -t / a.get(k, k);\n          for (let i = k; i < m; i++) {\n            a.set(i, j, a.get(i, j) + t * a.get(i, k));\n          }\n        }\n        e[j] = a.get(k, j);\n      }\n\n      if (wantu && k < nct) {\n        for (let i = k; i < m; i++) {\n          U.set(i, k, a.get(i, k));\n        }\n      }\n\n      if (k < nrt) {\n        e[k] = 0;\n        for (let i = k + 1; i < n; i++) {\n          e[k] = hypotenuse(e[k], e[i]);\n        }\n        if (e[k] !== 0) {\n          if (e[k + 1] < 0) {\n            e[k] = 0 - e[k];\n          }\n          for (let i = k + 1; i < n; i++) {\n            e[i] /= e[k];\n          }\n          e[k + 1] += 1;\n        }\n        e[k] = -e[k];\n        if (k + 1 < m && e[k] !== 0) {\n          for (let i = k + 1; i < m; i++) {\n            work[i] = 0;\n          }\n          for (let i = k + 1; i < m; i++) {\n            for (let j = k + 1; j < n; j++) {\n              work[i] += e[j] * a.get(i, j);\n            }\n          }\n          for (let j = k + 1; j < n; j++) {\n            let t = -e[j] / e[k + 1];\n            for (let i = k + 1; i < m; i++) {\n              a.set(i, j, a.get(i, j) + t * work[i]);\n            }\n          }\n        }\n        if (wantv) {\n          for (let i = k + 1; i < n; i++) {\n            V.set(i, k, e[i]);\n          }\n        }\n      }\n    }\n\n    let p = Math.min(n, m + 1);\n    if (nct < n) {\n      s[nct] = a.get(nct, nct);\n    }\n    if (m < p) {\n      s[p - 1] = 0;\n    }\n    if (nrt + 1 < p) {\n      e[nrt] = a.get(nrt, p - 1);\n    }\n    e[p - 1] = 0;\n\n    if (wantu) {\n      for (let j = nct; j < nu; j++) {\n        for (let i = 0; i < m; i++) {\n          U.set(i, j, 0);\n        }\n        U.set(j, j, 1);\n      }\n      for (let k = nct - 1; k >= 0; k--) {\n        if (s[k] !== 0) {\n          for (let j = k + 1; j < nu; j++) {\n            let t = 0;\n            for (let i = k; i < m; i++) {\n              t += U.get(i, k) * U.get(i, j);\n            }\n            t = -t / U.get(k, k);\n            for (let i = k; i < m; i++) {\n              U.set(i, j, U.get(i, j) + t * U.get(i, k));\n            }\n          }\n          for (let i = k; i < m; i++) {\n            U.set(i, k, -U.get(i, k));\n          }\n          U.set(k, k, 1 + U.get(k, k));\n          for (let i = 0; i < k - 1; i++) {\n            U.set(i, k, 0);\n          }\n        } else {\n          for (let i = 0; i < m; i++) {\n            U.set(i, k, 0);\n          }\n          U.set(k, k, 1);\n        }\n      }\n    }\n\n    if (wantv) {\n      for (let k = n - 1; k >= 0; k--) {\n        if (k < nrt && e[k] !== 0) {\n          for (let j = k + 1; j < n; j++) {\n            let t = 0;\n            for (let i = k + 1; i < n; i++) {\n              t += V.get(i, k) * V.get(i, j);\n            }\n            t = -t / V.get(k + 1, k);\n            for (let i = k + 1; i < n; i++) {\n              V.set(i, j, V.get(i, j) + t * V.get(i, k));\n            }\n          }\n        }\n        for (let i = 0; i < n; i++) {\n          V.set(i, k, 0);\n        }\n        V.set(k, k, 1);\n      }\n    }\n\n    let pp = p - 1;\n    let eps = Number.EPSILON;\n    while (p > 0) {\n      let k, kase;\n      for (k = p - 2; k >= -1; k--) {\n        if (k === -1) {\n          break;\n        }\n        const alpha =\n          Number.MIN_VALUE + eps * Math.abs(s[k] + Math.abs(s[k + 1]));\n        if (Math.abs(e[k]) <= alpha || Number.isNaN(e[k])) {\n          e[k] = 0;\n          break;\n        }\n      }\n      if (k === p - 2) {\n        kase = 4;\n      } else {\n        let ks;\n        for (ks = p - 1; ks >= k; ks--) {\n          if (ks === k) {\n            break;\n          }\n          let t =\n            (ks !== p ? Math.abs(e[ks]) : 0) +\n            (ks !== k + 1 ? Math.abs(e[ks - 1]) : 0);\n          if (Math.abs(s[ks]) <= eps * t) {\n            s[ks] = 0;\n            break;\n          }\n        }\n        if (ks === k) {\n          kase = 3;\n        } else if (ks === p - 1) {\n          kase = 1;\n        } else {\n          kase = 2;\n          k = ks;\n        }\n      }\n\n      k++;\n\n      switch (kase) {\n        case 1: {\n          let f = e[p - 2];\n          e[p - 2] = 0;\n          for (let j = p - 2; j >= k; j--) {\n            let t = hypotenuse(s[j], f);\n            let cs = s[j] / t;\n            let sn = f / t;\n            s[j] = t;\n            if (j !== k) {\n              f = -sn * e[j - 1];\n              e[j - 1] = cs * e[j - 1];\n            }\n            if (wantv) {\n              for (let i = 0; i < n; i++) {\n                t = cs * V.get(i, j) + sn * V.get(i, p - 1);\n                V.set(i, p - 1, -sn * V.get(i, j) + cs * V.get(i, p - 1));\n                V.set(i, j, t);\n              }\n            }\n          }\n          break;\n        }\n        case 2: {\n          let f = e[k - 1];\n          e[k - 1] = 0;\n          for (let j = k; j < p; j++) {\n            let t = hypotenuse(s[j], f);\n            let cs = s[j] / t;\n            let sn = f / t;\n            s[j] = t;\n            f = -sn * e[j];\n            e[j] = cs * e[j];\n            if (wantu) {\n              for (let i = 0; i < m; i++) {\n                t = cs * U.get(i, j) + sn * U.get(i, k - 1);\n                U.set(i, k - 1, -sn * U.get(i, j) + cs * U.get(i, k - 1));\n                U.set(i, j, t);\n              }\n            }\n          }\n          break;\n        }\n        case 3: {\n          const scale = Math.max(\n            Math.abs(s[p - 1]),\n            Math.abs(s[p - 2]),\n            Math.abs(e[p - 2]),\n            Math.abs(s[k]),\n            Math.abs(e[k]),\n          );\n          const sp = s[p - 1] / scale;\n          const spm1 = s[p - 2] / scale;\n          const epm1 = e[p - 2] / scale;\n          const sk = s[k] / scale;\n          const ek = e[k] / scale;\n          const b = ((spm1 + sp) * (spm1 - sp) + epm1 * epm1) / 2;\n          const c = sp * epm1 * (sp * epm1);\n          let shift = 0;\n          if (b !== 0 || c !== 0) {\n            if (b < 0) {\n              shift = 0 - Math.sqrt(b * b + c);\n            } else {\n              shift = Math.sqrt(b * b + c);\n            }\n            shift = c / (b + shift);\n          }\n          let f = (sk + sp) * (sk - sp) + shift;\n          let g = sk * ek;\n          for (let j = k; j < p - 1; j++) {\n            let t = hypotenuse(f, g);\n            if (t === 0) t = Number.MIN_VALUE;\n            let cs = f / t;\n            let sn = g / t;\n            if (j !== k) {\n              e[j - 1] = t;\n            }\n            f = cs * s[j] + sn * e[j];\n            e[j] = cs * e[j] - sn * s[j];\n            g = sn * s[j + 1];\n            s[j + 1] = cs * s[j + 1];\n            if (wantv) {\n              for (let i = 0; i < n; i++) {\n                t = cs * V.get(i, j) + sn * V.get(i, j + 1);\n                V.set(i, j + 1, -sn * V.get(i, j) + cs * V.get(i, j + 1));\n                V.set(i, j, t);\n              }\n            }\n            t = hypotenuse(f, g);\n            if (t === 0) t = Number.MIN_VALUE;\n            cs = f / t;\n            sn = g / t;\n            s[j] = t;\n            f = cs * e[j] + sn * s[j + 1];\n            s[j + 1] = -sn * e[j] + cs * s[j + 1];\n            g = sn * e[j + 1];\n            e[j + 1] = cs * e[j + 1];\n            if (wantu && j < m - 1) {\n              for (let i = 0; i < m; i++) {\n                t = cs * U.get(i, j) + sn * U.get(i, j + 1);\n                U.set(i, j + 1, -sn * U.get(i, j) + cs * U.get(i, j + 1));\n                U.set(i, j, t);\n              }\n            }\n          }\n          e[p - 2] = f;\n          break;\n        }\n        case 4: {\n          if (s[k] <= 0) {\n            s[k] = s[k] < 0 ? -s[k] : 0;\n            if (wantv) {\n              for (let i = 0; i <= pp; i++) {\n                V.set(i, k, -V.get(i, k));\n              }\n            }\n          }\n          while (k < pp) {\n            if (s[k] >= s[k + 1]) {\n              break;\n            }\n            let t = s[k];\n            s[k] = s[k + 1];\n            s[k + 1] = t;\n            if (wantv && k < n - 1) {\n              for (let i = 0; i < n; i++) {\n                t = V.get(i, k + 1);\n                V.set(i, k + 1, V.get(i, k));\n                V.set(i, k, t);\n              }\n            }\n            if (wantu && k < m - 1) {\n              for (let i = 0; i < m; i++) {\n                t = U.get(i, k + 1);\n                U.set(i, k + 1, U.get(i, k));\n                U.set(i, k, t);\n              }\n            }\n            k++;\n          }\n          p--;\n          break;\n        }\n        // no default\n      }\n    }\n\n    if (swapped) {\n      let tmp = V;\n      V = U;\n      U = tmp;\n    }\n\n    this.m = m;\n    this.n = n;\n    this.s = s;\n    this.U = U;\n    this.V = V;\n  }\n\n  solve(value) {\n    let Y = value;\n    let e = this.threshold;\n    let scols = this.s.length;\n    let Ls = Matrix.zeros(scols, scols);\n\n    for (let i = 0; i < scols; i++) {\n      if (Math.abs(this.s[i]) <= e) {\n        Ls.set(i, i, 0);\n      } else {\n        Ls.set(i, i, 1 / this.s[i]);\n      }\n    }\n\n    let U = this.U;\n    let V = this.rightSingularVectors;\n\n    let VL = V.mmul(Ls);\n    let vrows = V.rows;\n    let urows = U.rows;\n    let VLU = Matrix.zeros(vrows, urows);\n\n    for (let i = 0; i < vrows; i++) {\n      for (let j = 0; j < urows; j++) {\n        let sum = 0;\n        for (let k = 0; k < scols; k++) {\n          sum += VL.get(i, k) * U.get(j, k);\n        }\n        VLU.set(i, j, sum);\n      }\n    }\n\n    return VLU.mmul(Y);\n  }\n\n  solveForDiagonal(value) {\n    return this.solve(Matrix.diag(value));\n  }\n\n  inverse() {\n    let V = this.V;\n    let e = this.threshold;\n    let vrows = V.rows;\n    let vcols = V.columns;\n    let X = new Matrix(vrows, this.s.length);\n\n    for (let i = 0; i < vrows; i++) {\n      for (let j = 0; j < vcols; j++) {\n        if (Math.abs(this.s[j]) > e) {\n          X.set(i, j, V.get(i, j) / this.s[j]);\n        }\n      }\n    }\n\n    let U = this.U;\n\n    let urows = U.rows;\n    let ucols = U.columns;\n    let Y = new Matrix(vrows, urows);\n\n    for (let i = 0; i < vrows; i++) {\n      for (let j = 0; j < urows; j++) {\n        let sum = 0;\n        for (let k = 0; k < ucols; k++) {\n          sum += X.get(i, k) * U.get(j, k);\n        }\n        Y.set(i, j, sum);\n      }\n    }\n\n    return Y;\n  }\n\n  get condition() {\n    return this.s[0] / this.s[Math.min(this.m, this.n) - 1];\n  }\n\n  get norm2() {\n    return this.s[0];\n  }\n\n  get rank() {\n    let tol = Math.max(this.m, this.n) * this.s[0] * Number.EPSILON;\n    let r = 0;\n    let s = this.s;\n    for (let i = 0, ii = s.length; i < ii; i++) {\n      if (s[i] > tol) {\n        r++;\n      }\n    }\n    return r;\n  }\n\n  get diagonal() {\n    return Array.from(this.s);\n  }\n\n  get threshold() {\n    return (Number.EPSILON / 2) * Math.max(this.m, this.n) * this.s[0];\n  }\n\n  get leftSingularVectors() {\n    return this.U;\n  }\n\n  get rightSingularVectors() {\n    return this.V;\n  }\n\n  get diagonalMatrix() {\n    return Matrix.diag(this.s);\n  }\n}\n\nfunction inverse(matrix, useSVD = false) {\n  matrix = WrapperMatrix2D.checkMatrix(matrix);\n  if (useSVD) {\n    return new SingularValueDecomposition(matrix).inverse();\n  } else {\n    return solve(matrix, Matrix.eye(matrix.rows));\n  }\n}\n\nfunction solve(leftHandSide, rightHandSide, useSVD = false) {\n  leftHandSide = WrapperMatrix2D.checkMatrix(leftHandSide);\n  rightHandSide = WrapperMatrix2D.checkMatrix(rightHandSide);\n  if (useSVD) {\n    return new SingularValueDecomposition(leftHandSide).solve(rightHandSide);\n  } else {\n    return leftHandSide.isSquare()\n      ? new LuDecomposition(leftHandSide).solve(rightHandSide)\n      : new QrDecomposition(leftHandSide).solve(rightHandSide);\n  }\n}\n\nfunction determinant(matrix) {\n  matrix = Matrix.checkMatrix(matrix);\n  if (matrix.isSquare()) {\n    if (matrix.columns === 0) {\n      return 1;\n    }\n\n    let a, b, c, d;\n    if (matrix.columns === 2) {\n      // 2 x 2 matrix\n      a = matrix.get(0, 0);\n      b = matrix.get(0, 1);\n      c = matrix.get(1, 0);\n      d = matrix.get(1, 1);\n\n      return a * d - b * c;\n    } else if (matrix.columns === 3) {\n      // 3 x 3 matrix\n      let subMatrix0, subMatrix1, subMatrix2;\n      subMatrix0 = new MatrixSelectionView(matrix, [1, 2], [1, 2]);\n      subMatrix1 = new MatrixSelectionView(matrix, [1, 2], [0, 2]);\n      subMatrix2 = new MatrixSelectionView(matrix, [1, 2], [0, 1]);\n      a = matrix.get(0, 0);\n      b = matrix.get(0, 1);\n      c = matrix.get(0, 2);\n\n      return (\n        a * determinant(subMatrix0) -\n        b * determinant(subMatrix1) +\n        c * determinant(subMatrix2)\n      );\n    } else {\n      // general purpose determinant using the LU decomposition\n      return new LuDecomposition(matrix).determinant;\n    }\n  } else {\n    throw Error('determinant can only be calculated for a square matrix');\n  }\n}\n\nfunction xrange(n, exception) {\n  let range = [];\n  for (let i = 0; i < n; i++) {\n    if (i !== exception) {\n      range.push(i);\n    }\n  }\n  return range;\n}\n\nfunction dependenciesOneRow(\n  error,\n  matrix,\n  index,\n  thresholdValue = 10e-10,\n  thresholdError = 10e-10,\n) {\n  if (error > thresholdError) {\n    return new Array(matrix.rows + 1).fill(0);\n  } else {\n    let returnArray = matrix.addRow(index, [0]);\n    for (let i = 0; i < returnArray.rows; i++) {\n      if (Math.abs(returnArray.get(i, 0)) < thresholdValue) {\n        returnArray.set(i, 0, 0);\n      }\n    }\n    return returnArray.to1DArray();\n  }\n}\n\nfunction linearDependencies(matrix, options = {}) {\n  const { thresholdValue = 10e-10, thresholdError = 10e-10 } = options;\n  matrix = Matrix.checkMatrix(matrix);\n\n  let n = matrix.rows;\n  let results = new Matrix(n, n);\n\n  for (let i = 0; i < n; i++) {\n    let b = Matrix.columnVector(matrix.getRow(i));\n    let Abis = matrix.subMatrixRow(xrange(n, i)).transpose();\n    let svd = new SingularValueDecomposition(Abis);\n    let x = svd.solve(b);\n    let error = Matrix.sub(b, Abis.mmul(x)).abs().max();\n    results.setRow(\n      i,\n      dependenciesOneRow(error, x, i, thresholdValue, thresholdError),\n    );\n  }\n  return results;\n}\n\nfunction pseudoInverse(matrix, threshold = Number.EPSILON) {\n  matrix = Matrix.checkMatrix(matrix);\n  if (matrix.isEmpty()) {\n    // with a zero dimension, the pseudo-inverse is the transpose, since all 0xn and nx0 matrices are singular\n    // (0xn)*(nx0)*(0xn) = 0xn\n    // (nx0)*(0xn)*(nx0) = nx0\n    return matrix.transpose();\n  }\n  let svdSolution = new SingularValueDecomposition(matrix, { autoTranspose: true });\n\n  let U = svdSolution.leftSingularVectors;\n  let V = svdSolution.rightSingularVectors;\n  let s = svdSolution.diagonal;\n\n  for (let i = 0; i < s.length; i++) {\n    if (Math.abs(s[i]) > threshold) {\n      s[i] = 1.0 / s[i];\n    } else {\n      s[i] = 0.0;\n    }\n  }\n\n  return V.mmul(Matrix.diag(s).mmul(U.transpose()));\n}\n\nfunction covariance(xMatrix, yMatrix = xMatrix, options = {}) {\n  xMatrix = new Matrix(xMatrix);\n  let yIsSame = false;\n  if (\n    typeof yMatrix === 'object' &&\n    !Matrix.isMatrix(yMatrix) &&\n    !isAnyArray.isAnyArray(yMatrix)\n  ) {\n    options = yMatrix;\n    yMatrix = xMatrix;\n    yIsSame = true;\n  } else {\n    yMatrix = new Matrix(yMatrix);\n  }\n  if (xMatrix.rows !== yMatrix.rows) {\n    throw new TypeError('Both matrices must have the same number of rows');\n  }\n  const { center = true } = options;\n  if (center) {\n    xMatrix = xMatrix.center('column');\n    if (!yIsSame) {\n      yMatrix = yMatrix.center('column');\n    }\n  }\n  const cov = xMatrix.transpose().mmul(yMatrix);\n  for (let i = 0; i < cov.rows; i++) {\n    for (let j = 0; j < cov.columns; j++) {\n      cov.set(i, j, cov.get(i, j) * (1 / (xMatrix.rows - 1)));\n    }\n  }\n  return cov;\n}\n\nfunction correlation(xMatrix, yMatrix = xMatrix, options = {}) {\n  xMatrix = new Matrix(xMatrix);\n  let yIsSame = false;\n  if (\n    typeof yMatrix === 'object' &&\n    !Matrix.isMatrix(yMatrix) &&\n    !isAnyArray.isAnyArray(yMatrix)\n  ) {\n    options = yMatrix;\n    yMatrix = xMatrix;\n    yIsSame = true;\n  } else {\n    yMatrix = new Matrix(yMatrix);\n  }\n  if (xMatrix.rows !== yMatrix.rows) {\n    throw new TypeError('Both matrices must have the same number of rows');\n  }\n\n  const { center = true, scale = true } = options;\n  if (center) {\n    xMatrix.center('column');\n    if (!yIsSame) {\n      yMatrix.center('column');\n    }\n  }\n  if (scale) {\n    xMatrix.scale('column');\n    if (!yIsSame) {\n      yMatrix.scale('column');\n    }\n  }\n\n  const sdx = xMatrix.standardDeviation('column', { unbiased: true });\n  const sdy = yIsSame\n    ? sdx\n    : yMatrix.standardDeviation('column', { unbiased: true });\n\n  const corr = xMatrix.transpose().mmul(yMatrix);\n  for (let i = 0; i < corr.rows; i++) {\n    for (let j = 0; j < corr.columns; j++) {\n      corr.set(\n        i,\n        j,\n        corr.get(i, j) * (1 / (sdx[i] * sdy[j])) * (1 / (xMatrix.rows - 1)),\n      );\n    }\n  }\n  return corr;\n}\n\nclass EigenvalueDecomposition {\n  constructor(matrix, options = {}) {\n    const { assumeSymmetric = false } = options;\n\n    matrix = WrapperMatrix2D.checkMatrix(matrix);\n    if (!matrix.isSquare()) {\n      throw new Error('Matrix is not a square matrix');\n    }\n\n    if (matrix.isEmpty()) {\n      throw new Error('Matrix must be non-empty');\n    }\n\n    let n = matrix.columns;\n    let V = new Matrix(n, n);\n    let d = new Float64Array(n);\n    let e = new Float64Array(n);\n    let value = matrix;\n    let i, j;\n\n    let isSymmetric = false;\n    if (assumeSymmetric) {\n      isSymmetric = true;\n    } else {\n      isSymmetric = matrix.isSymmetric();\n    }\n\n    if (isSymmetric) {\n      for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n          V.set(i, j, value.get(i, j));\n        }\n      }\n      tred2(n, e, d, V);\n      tql2(n, e, d, V);\n    } else {\n      let H = new Matrix(n, n);\n      let ort = new Float64Array(n);\n      for (j = 0; j < n; j++) {\n        for (i = 0; i < n; i++) {\n          H.set(i, j, value.get(i, j));\n        }\n      }\n      orthes(n, H, ort, V);\n      hqr2(n, e, d, V, H);\n    }\n\n    this.n = n;\n    this.e = e;\n    this.d = d;\n    this.V = V;\n  }\n\n  get realEigenvalues() {\n    return Array.from(this.d);\n  }\n\n  get imaginaryEigenvalues() {\n    return Array.from(this.e);\n  }\n\n  get eigenvectorMatrix() {\n    return this.V;\n  }\n\n  get diagonalMatrix() {\n    let n = this.n;\n    let e = this.e;\n    let d = this.d;\n    let X = new Matrix(n, n);\n    let i, j;\n    for (i = 0; i < n; i++) {\n      for (j = 0; j < n; j++) {\n        X.set(i, j, 0);\n      }\n      X.set(i, i, d[i]);\n      if (e[i] > 0) {\n        X.set(i, i + 1, e[i]);\n      } else if (e[i] < 0) {\n        X.set(i, i - 1, e[i]);\n      }\n    }\n    return X;\n  }\n}\n\nfunction tred2(n, e, d, V) {\n  let f, g, h, i, j, k, hh, scale;\n\n  for (j = 0; j < n; j++) {\n    d[j] = V.get(n - 1, j);\n  }\n\n  for (i = n - 1; i > 0; i--) {\n    scale = 0;\n    h = 0;\n    for (k = 0; k < i; k++) {\n      scale = scale + Math.abs(d[k]);\n    }\n\n    if (scale === 0) {\n      e[i] = d[i - 1];\n      for (j = 0; j < i; j++) {\n        d[j] = V.get(i - 1, j);\n        V.set(i, j, 0);\n        V.set(j, i, 0);\n      }\n    } else {\n      for (k = 0; k < i; k++) {\n        d[k] /= scale;\n        h += d[k] * d[k];\n      }\n\n      f = d[i - 1];\n      g = Math.sqrt(h);\n      if (f > 0) {\n        g = -g;\n      }\n\n      e[i] = scale * g;\n      h = h - f * g;\n      d[i - 1] = f - g;\n      for (j = 0; j < i; j++) {\n        e[j] = 0;\n      }\n\n      for (j = 0; j < i; j++) {\n        f = d[j];\n        V.set(j, i, f);\n        g = e[j] + V.get(j, j) * f;\n        for (k = j + 1; k <= i - 1; k++) {\n          g += V.get(k, j) * d[k];\n          e[k] += V.get(k, j) * f;\n        }\n        e[j] = g;\n      }\n\n      f = 0;\n      for (j = 0; j < i; j++) {\n        e[j] /= h;\n        f += e[j] * d[j];\n      }\n\n      hh = f / (h + h);\n      for (j = 0; j < i; j++) {\n        e[j] -= hh * d[j];\n      }\n\n      for (j = 0; j < i; j++) {\n        f = d[j];\n        g = e[j];\n        for (k = j; k <= i - 1; k++) {\n          V.set(k, j, V.get(k, j) - (f * e[k] + g * d[k]));\n        }\n        d[j] = V.get(i - 1, j);\n        V.set(i, j, 0);\n      }\n    }\n    d[i] = h;\n  }\n\n  for (i = 0; i < n - 1; i++) {\n    V.set(n - 1, i, V.get(i, i));\n    V.set(i, i, 1);\n    h = d[i + 1];\n    if (h !== 0) {\n      for (k = 0; k <= i; k++) {\n        d[k] = V.get(k, i + 1) / h;\n      }\n\n      for (j = 0; j <= i; j++) {\n        g = 0;\n        for (k = 0; k <= i; k++) {\n          g += V.get(k, i + 1) * V.get(k, j);\n        }\n        for (k = 0; k <= i; k++) {\n          V.set(k, j, V.get(k, j) - g * d[k]);\n        }\n      }\n    }\n\n    for (k = 0; k <= i; k++) {\n      V.set(k, i + 1, 0);\n    }\n  }\n\n  for (j = 0; j < n; j++) {\n    d[j] = V.get(n - 1, j);\n    V.set(n - 1, j, 0);\n  }\n\n  V.set(n - 1, n - 1, 1);\n  e[0] = 0;\n}\n\nfunction tql2(n, e, d, V) {\n  let g, h, i, j, k, l, m, p, r, dl1, c, c2, c3, el1, s, s2;\n\n  for (i = 1; i < n; i++) {\n    e[i - 1] = e[i];\n  }\n\n  e[n - 1] = 0;\n\n  let f = 0;\n  let tst1 = 0;\n  let eps = Number.EPSILON;\n\n  for (l = 0; l < n; l++) {\n    tst1 = Math.max(tst1, Math.abs(d[l]) + Math.abs(e[l]));\n    m = l;\n    while (m < n) {\n      if (Math.abs(e[m]) <= eps * tst1) {\n        break;\n      }\n      m++;\n    }\n\n    if (m > l) {\n      do {\n\n        g = d[l];\n        p = (d[l + 1] - g) / (2 * e[l]);\n        r = hypotenuse(p, 1);\n        if (p < 0) {\n          r = -r;\n        }\n\n        d[l] = e[l] / (p + r);\n        d[l + 1] = e[l] * (p + r);\n        dl1 = d[l + 1];\n        h = g - d[l];\n        for (i = l + 2; i < n; i++) {\n          d[i] -= h;\n        }\n\n        f = f + h;\n\n        p = d[m];\n        c = 1;\n        c2 = c;\n        c3 = c;\n        el1 = e[l + 1];\n        s = 0;\n        s2 = 0;\n        for (i = m - 1; i >= l; i--) {\n          c3 = c2;\n          c2 = c;\n          s2 = s;\n          g = c * e[i];\n          h = c * p;\n          r = hypotenuse(p, e[i]);\n          e[i + 1] = s * r;\n          s = e[i] / r;\n          c = p / r;\n          p = c * d[i] - s * g;\n          d[i + 1] = h + s * (c * g + s * d[i]);\n\n          for (k = 0; k < n; k++) {\n            h = V.get(k, i + 1);\n            V.set(k, i + 1, s * V.get(k, i) + c * h);\n            V.set(k, i, c * V.get(k, i) - s * h);\n          }\n        }\n\n        p = (-s * s2 * c3 * el1 * e[l]) / dl1;\n        e[l] = s * p;\n        d[l] = c * p;\n      } while (Math.abs(e[l]) > eps * tst1);\n    }\n    d[l] = d[l] + f;\n    e[l] = 0;\n  }\n\n  for (i = 0; i < n - 1; i++) {\n    k = i;\n    p = d[i];\n    for (j = i + 1; j < n; j++) {\n      if (d[j] < p) {\n        k = j;\n        p = d[j];\n      }\n    }\n\n    if (k !== i) {\n      d[k] = d[i];\n      d[i] = p;\n      for (j = 0; j < n; j++) {\n        p = V.get(j, i);\n        V.set(j, i, V.get(j, k));\n        V.set(j, k, p);\n      }\n    }\n  }\n}\n\nfunction orthes(n, H, ort, V) {\n  let low = 0;\n  let high = n - 1;\n  let f, g, h, i, j, m;\n  let scale;\n\n  for (m = low + 1; m <= high - 1; m++) {\n    scale = 0;\n    for (i = m; i <= high; i++) {\n      scale = scale + Math.abs(H.get(i, m - 1));\n    }\n\n    if (scale !== 0) {\n      h = 0;\n      for (i = high; i >= m; i--) {\n        ort[i] = H.get(i, m - 1) / scale;\n        h += ort[i] * ort[i];\n      }\n\n      g = Math.sqrt(h);\n      if (ort[m] > 0) {\n        g = -g;\n      }\n\n      h = h - ort[m] * g;\n      ort[m] = ort[m] - g;\n\n      for (j = m; j < n; j++) {\n        f = 0;\n        for (i = high; i >= m; i--) {\n          f += ort[i] * H.get(i, j);\n        }\n\n        f = f / h;\n        for (i = m; i <= high; i++) {\n          H.set(i, j, H.get(i, j) - f * ort[i]);\n        }\n      }\n\n      for (i = 0; i <= high; i++) {\n        f = 0;\n        for (j = high; j >= m; j--) {\n          f += ort[j] * H.get(i, j);\n        }\n\n        f = f / h;\n        for (j = m; j <= high; j++) {\n          H.set(i, j, H.get(i, j) - f * ort[j]);\n        }\n      }\n\n      ort[m] = scale * ort[m];\n      H.set(m, m - 1, scale * g);\n    }\n  }\n\n  for (i = 0; i < n; i++) {\n    for (j = 0; j < n; j++) {\n      V.set(i, j, i === j ? 1 : 0);\n    }\n  }\n\n  for (m = high - 1; m >= low + 1; m--) {\n    if (H.get(m, m - 1) !== 0) {\n      for (i = m + 1; i <= high; i++) {\n        ort[i] = H.get(i, m - 1);\n      }\n\n      for (j = m; j <= high; j++) {\n        g = 0;\n        for (i = m; i <= high; i++) {\n          g += ort[i] * V.get(i, j);\n        }\n\n        g = g / ort[m] / H.get(m, m - 1);\n        for (i = m; i <= high; i++) {\n          V.set(i, j, V.get(i, j) + g * ort[i]);\n        }\n      }\n    }\n  }\n}\n\nfunction hqr2(nn, e, d, V, H) {\n  let n = nn - 1;\n  let low = 0;\n  let high = nn - 1;\n  let eps = Number.EPSILON;\n  let exshift = 0;\n  let norm = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let z = 0;\n  let iter = 0;\n  let i, j, k, l, m, t, w, x, y;\n  let ra, sa, vr, vi;\n  let notlast, cdivres;\n\n  for (i = 0; i < nn; i++) {\n    if (i < low || i > high) {\n      d[i] = H.get(i, i);\n      e[i] = 0;\n    }\n\n    for (j = Math.max(i - 1, 0); j < nn; j++) {\n      norm = norm + Math.abs(H.get(i, j));\n    }\n  }\n\n  while (n >= low) {\n    l = n;\n    while (l > low) {\n      s = Math.abs(H.get(l - 1, l - 1)) + Math.abs(H.get(l, l));\n      if (s === 0) {\n        s = norm;\n      }\n      if (Math.abs(H.get(l, l - 1)) < eps * s) {\n        break;\n      }\n      l--;\n    }\n\n    if (l === n) {\n      H.set(n, n, H.get(n, n) + exshift);\n      d[n] = H.get(n, n);\n      e[n] = 0;\n      n--;\n      iter = 0;\n    } else if (l === n - 1) {\n      w = H.get(n, n - 1) * H.get(n - 1, n);\n      p = (H.get(n - 1, n - 1) - H.get(n, n)) / 2;\n      q = p * p + w;\n      z = Math.sqrt(Math.abs(q));\n      H.set(n, n, H.get(n, n) + exshift);\n      H.set(n - 1, n - 1, H.get(n - 1, n - 1) + exshift);\n      x = H.get(n, n);\n\n      if (q >= 0) {\n        z = p >= 0 ? p + z : p - z;\n        d[n - 1] = x + z;\n        d[n] = d[n - 1];\n        if (z !== 0) {\n          d[n] = x - w / z;\n        }\n        e[n - 1] = 0;\n        e[n] = 0;\n        x = H.get(n, n - 1);\n        s = Math.abs(x) + Math.abs(z);\n        p = x / s;\n        q = z / s;\n        r = Math.sqrt(p * p + q * q);\n        p = p / r;\n        q = q / r;\n\n        for (j = n - 1; j < nn; j++) {\n          z = H.get(n - 1, j);\n          H.set(n - 1, j, q * z + p * H.get(n, j));\n          H.set(n, j, q * H.get(n, j) - p * z);\n        }\n\n        for (i = 0; i <= n; i++) {\n          z = H.get(i, n - 1);\n          H.set(i, n - 1, q * z + p * H.get(i, n));\n          H.set(i, n, q * H.get(i, n) - p * z);\n        }\n\n        for (i = low; i <= high; i++) {\n          z = V.get(i, n - 1);\n          V.set(i, n - 1, q * z + p * V.get(i, n));\n          V.set(i, n, q * V.get(i, n) - p * z);\n        }\n      } else {\n        d[n - 1] = x + p;\n        d[n] = x + p;\n        e[n - 1] = z;\n        e[n] = -z;\n      }\n\n      n = n - 2;\n      iter = 0;\n    } else {\n      x = H.get(n, n);\n      y = 0;\n      w = 0;\n      if (l < n) {\n        y = H.get(n - 1, n - 1);\n        w = H.get(n, n - 1) * H.get(n - 1, n);\n      }\n\n      if (iter === 10) {\n        exshift += x;\n        for (i = low; i <= n; i++) {\n          H.set(i, i, H.get(i, i) - x);\n        }\n        s = Math.abs(H.get(n, n - 1)) + Math.abs(H.get(n - 1, n - 2));\n        // eslint-disable-next-line no-multi-assign\n        x = y = 0.75 * s;\n        w = -0.4375 * s * s;\n      }\n\n      if (iter === 30) {\n        s = (y - x) / 2;\n        s = s * s + w;\n        if (s > 0) {\n          s = Math.sqrt(s);\n          if (y < x) {\n            s = -s;\n          }\n          s = x - w / ((y - x) / 2 + s);\n          for (i = low; i <= n; i++) {\n            H.set(i, i, H.get(i, i) - s);\n          }\n          exshift += s;\n          // eslint-disable-next-line no-multi-assign\n          x = y = w = 0.964;\n        }\n      }\n\n      iter = iter + 1;\n\n      m = n - 2;\n      while (m >= l) {\n        z = H.get(m, m);\n        r = x - z;\n        s = y - z;\n        p = (r * s - w) / H.get(m + 1, m) + H.get(m, m + 1);\n        q = H.get(m + 1, m + 1) - z - r - s;\n        r = H.get(m + 2, m + 1);\n        s = Math.abs(p) + Math.abs(q) + Math.abs(r);\n        p = p / s;\n        q = q / s;\n        r = r / s;\n        if (m === l) {\n          break;\n        }\n        if (\n          Math.abs(H.get(m, m - 1)) * (Math.abs(q) + Math.abs(r)) <\n          eps *\n            (Math.abs(p) *\n              (Math.abs(H.get(m - 1, m - 1)) +\n                Math.abs(z) +\n                Math.abs(H.get(m + 1, m + 1))))\n        ) {\n          break;\n        }\n        m--;\n      }\n\n      for (i = m + 2; i <= n; i++) {\n        H.set(i, i - 2, 0);\n        if (i > m + 2) {\n          H.set(i, i - 3, 0);\n        }\n      }\n\n      for (k = m; k <= n - 1; k++) {\n        notlast = k !== n - 1;\n        if (k !== m) {\n          p = H.get(k, k - 1);\n          q = H.get(k + 1, k - 1);\n          r = notlast ? H.get(k + 2, k - 1) : 0;\n          x = Math.abs(p) + Math.abs(q) + Math.abs(r);\n          if (x !== 0) {\n            p = p / x;\n            q = q / x;\n            r = r / x;\n          }\n        }\n\n        if (x === 0) {\n          break;\n        }\n\n        s = Math.sqrt(p * p + q * q + r * r);\n        if (p < 0) {\n          s = -s;\n        }\n\n        if (s !== 0) {\n          if (k !== m) {\n            H.set(k, k - 1, -s * x);\n          } else if (l !== m) {\n            H.set(k, k - 1, -H.get(k, k - 1));\n          }\n\n          p = p + s;\n          x = p / s;\n          y = q / s;\n          z = r / s;\n          q = q / p;\n          r = r / p;\n\n          for (j = k; j < nn; j++) {\n            p = H.get(k, j) + q * H.get(k + 1, j);\n            if (notlast) {\n              p = p + r * H.get(k + 2, j);\n              H.set(k + 2, j, H.get(k + 2, j) - p * z);\n            }\n\n            H.set(k, j, H.get(k, j) - p * x);\n            H.set(k + 1, j, H.get(k + 1, j) - p * y);\n          }\n\n          for (i = 0; i <= Math.min(n, k + 3); i++) {\n            p = x * H.get(i, k) + y * H.get(i, k + 1);\n            if (notlast) {\n              p = p + z * H.get(i, k + 2);\n              H.set(i, k + 2, H.get(i, k + 2) - p * r);\n            }\n\n            H.set(i, k, H.get(i, k) - p);\n            H.set(i, k + 1, H.get(i, k + 1) - p * q);\n          }\n\n          for (i = low; i <= high; i++) {\n            p = x * V.get(i, k) + y * V.get(i, k + 1);\n            if (notlast) {\n              p = p + z * V.get(i, k + 2);\n              V.set(i, k + 2, V.get(i, k + 2) - p * r);\n            }\n\n            V.set(i, k, V.get(i, k) - p);\n            V.set(i, k + 1, V.get(i, k + 1) - p * q);\n          }\n        }\n      }\n    }\n  }\n\n  if (norm === 0) {\n    return;\n  }\n\n  for (n = nn - 1; n >= 0; n--) {\n    p = d[n];\n    q = e[n];\n\n    if (q === 0) {\n      l = n;\n      H.set(n, n, 1);\n      for (i = n - 1; i >= 0; i--) {\n        w = H.get(i, i) - p;\n        r = 0;\n        for (j = l; j <= n; j++) {\n          r = r + H.get(i, j) * H.get(j, n);\n        }\n\n        if (e[i] < 0) {\n          z = w;\n          s = r;\n        } else {\n          l = i;\n          if (e[i] === 0) {\n            H.set(i, n, w !== 0 ? -r / w : -r / (eps * norm));\n          } else {\n            x = H.get(i, i + 1);\n            y = H.get(i + 1, i);\n            q = (d[i] - p) * (d[i] - p) + e[i] * e[i];\n            t = (x * s - z * r) / q;\n            H.set(i, n, t);\n            H.set(\n              i + 1,\n              n,\n              Math.abs(x) > Math.abs(z) ? (-r - w * t) / x : (-s - y * t) / z,\n            );\n          }\n\n          t = Math.abs(H.get(i, n));\n          if (eps * t * t > 1) {\n            for (j = i; j <= n; j++) {\n              H.set(j, n, H.get(j, n) / t);\n            }\n          }\n        }\n      }\n    } else if (q < 0) {\n      l = n - 1;\n\n      if (Math.abs(H.get(n, n - 1)) > Math.abs(H.get(n - 1, n))) {\n        H.set(n - 1, n - 1, q / H.get(n, n - 1));\n        H.set(n - 1, n, -(H.get(n, n) - p) / H.get(n, n - 1));\n      } else {\n        cdivres = cdiv(0, -H.get(n - 1, n), H.get(n - 1, n - 1) - p, q);\n        H.set(n - 1, n - 1, cdivres[0]);\n        H.set(n - 1, n, cdivres[1]);\n      }\n\n      H.set(n, n - 1, 0);\n      H.set(n, n, 1);\n      for (i = n - 2; i >= 0; i--) {\n        ra = 0;\n        sa = 0;\n        for (j = l; j <= n; j++) {\n          ra = ra + H.get(i, j) * H.get(j, n - 1);\n          sa = sa + H.get(i, j) * H.get(j, n);\n        }\n\n        w = H.get(i, i) - p;\n\n        if (e[i] < 0) {\n          z = w;\n          r = ra;\n          s = sa;\n        } else {\n          l = i;\n          if (e[i] === 0) {\n            cdivres = cdiv(-ra, -sa, w, q);\n            H.set(i, n - 1, cdivres[0]);\n            H.set(i, n, cdivres[1]);\n          } else {\n            x = H.get(i, i + 1);\n            y = H.get(i + 1, i);\n            vr = (d[i] - p) * (d[i] - p) + e[i] * e[i] - q * q;\n            vi = (d[i] - p) * 2 * q;\n            if (vr === 0 && vi === 0) {\n              vr =\n                eps *\n                norm *\n                (Math.abs(w) +\n                  Math.abs(q) +\n                  Math.abs(x) +\n                  Math.abs(y) +\n                  Math.abs(z));\n            }\n            cdivres = cdiv(\n              x * r - z * ra + q * sa,\n              x * s - z * sa - q * ra,\n              vr,\n              vi,\n            );\n            H.set(i, n - 1, cdivres[0]);\n            H.set(i, n, cdivres[1]);\n            if (Math.abs(x) > Math.abs(z) + Math.abs(q)) {\n              H.set(\n                i + 1,\n                n - 1,\n                (-ra - w * H.get(i, n - 1) + q * H.get(i, n)) / x,\n              );\n              H.set(\n                i + 1,\n                n,\n                (-sa - w * H.get(i, n) - q * H.get(i, n - 1)) / x,\n              );\n            } else {\n              cdivres = cdiv(\n                -r - y * H.get(i, n - 1),\n                -s - y * H.get(i, n),\n                z,\n                q,\n              );\n              H.set(i + 1, n - 1, cdivres[0]);\n              H.set(i + 1, n, cdivres[1]);\n            }\n          }\n\n          t = Math.max(Math.abs(H.get(i, n - 1)), Math.abs(H.get(i, n)));\n          if (eps * t * t > 1) {\n            for (j = i; j <= n; j++) {\n              H.set(j, n - 1, H.get(j, n - 1) / t);\n              H.set(j, n, H.get(j, n) / t);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  for (i = 0; i < nn; i++) {\n    if (i < low || i > high) {\n      for (j = i; j < nn; j++) {\n        V.set(i, j, H.get(i, j));\n      }\n    }\n  }\n\n  for (j = nn - 1; j >= low; j--) {\n    for (i = low; i <= high; i++) {\n      z = 0;\n      for (k = low; k <= Math.min(j, high); k++) {\n        z = z + V.get(i, k) * H.get(k, j);\n      }\n      V.set(i, j, z);\n    }\n  }\n}\n\nfunction cdiv(xr, xi, yr, yi) {\n  let r, d;\n  if (Math.abs(yr) > Math.abs(yi)) {\n    r = yi / yr;\n    d = yr + r * yi;\n    return [(xr + r * xi) / d, (xi - r * xr) / d];\n  } else {\n    r = yr / yi;\n    d = yi + r * yr;\n    return [(r * xr + xi) / d, (r * xi - xr) / d];\n  }\n}\n\nclass CholeskyDecomposition {\n  constructor(value) {\n    value = WrapperMatrix2D.checkMatrix(value);\n    if (!value.isSymmetric()) {\n      throw new Error('Matrix is not symmetric');\n    }\n\n    let a = value;\n    let dimension = a.rows;\n    let l = new Matrix(dimension, dimension);\n    let positiveDefinite = true;\n    let i, j, k;\n\n    for (j = 0; j < dimension; j++) {\n      let d = 0;\n      for (k = 0; k < j; k++) {\n        let s = 0;\n        for (i = 0; i < k; i++) {\n          s += l.get(k, i) * l.get(j, i);\n        }\n        s = (a.get(j, k) - s) / l.get(k, k);\n        l.set(j, k, s);\n        d = d + s * s;\n      }\n\n      d = a.get(j, j) - d;\n\n      positiveDefinite &&= d > 0;\n      l.set(j, j, Math.sqrt(Math.max(d, 0)));\n      for (k = j + 1; k < dimension; k++) {\n        l.set(j, k, 0);\n      }\n    }\n\n    this.L = l;\n    this.positiveDefinite = positiveDefinite;\n  }\n\n  isPositiveDefinite() {\n    return this.positiveDefinite;\n  }\n\n  solve(value) {\n    value = WrapperMatrix2D.checkMatrix(value);\n\n    let l = this.L;\n    let dimension = l.rows;\n\n    if (value.rows !== dimension) {\n      throw new Error('Matrix dimensions do not match');\n    }\n    if (this.isPositiveDefinite() === false) {\n      throw new Error('Matrix is not positive definite');\n    }\n\n    let count = value.columns;\n    let B = value.clone();\n    let i, j, k;\n\n    for (k = 0; k < dimension; k++) {\n      for (j = 0; j < count; j++) {\n        for (i = 0; i < k; i++) {\n          B.set(k, j, B.get(k, j) - B.get(i, j) * l.get(k, i));\n        }\n        B.set(k, j, B.get(k, j) / l.get(k, k));\n      }\n    }\n\n    for (k = dimension - 1; k >= 0; k--) {\n      for (j = 0; j < count; j++) {\n        for (i = k + 1; i < dimension; i++) {\n          B.set(k, j, B.get(k, j) - B.get(i, j) * l.get(i, k));\n        }\n        B.set(k, j, B.get(k, j) / l.get(k, k));\n      }\n    }\n\n    return B;\n  }\n\n  get lowerTriangularMatrix() {\n    return this.L;\n  }\n}\n\nclass nipals {\n  constructor(X, options = {}) {\n    X = WrapperMatrix2D.checkMatrix(X);\n    let { Y } = options;\n    const {\n      scaleScores = false,\n      maxIterations = 1000,\n      terminationCriteria = 1e-10,\n    } = options;\n\n    let u;\n    if (Y) {\n      if (isAnyArray.isAnyArray(Y) && typeof Y[0] === 'number') {\n        Y = Matrix.columnVector(Y);\n      } else {\n        Y = WrapperMatrix2D.checkMatrix(Y);\n      }\n      if (Y.rows !== X.rows) {\n        throw new Error('Y should have the same number of rows as X');\n      }\n      u = Y.getColumnVector(0);\n    } else {\n      u = X.getColumnVector(0);\n    }\n\n    let diff = 1;\n    let t, q, w, tOld;\n\n    for (\n      let counter = 0;\n      counter < maxIterations && diff > terminationCriteria;\n      counter++\n    ) {\n      w = X.transpose().mmul(u).div(u.transpose().mmul(u).get(0, 0));\n      w = w.div(w.norm());\n\n      t = X.mmul(w).div(w.transpose().mmul(w).get(0, 0));\n\n      if (counter > 0) {\n        diff = t.clone().sub(tOld).pow(2).sum();\n      }\n      tOld = t.clone();\n\n      if (Y) {\n        q = Y.transpose().mmul(t).div(t.transpose().mmul(t).get(0, 0));\n        q = q.div(q.norm());\n\n        u = Y.mmul(q).div(q.transpose().mmul(q).get(0, 0));\n      } else {\n        u = t;\n      }\n    }\n\n    if (Y) {\n      let p = X.transpose().mmul(t).div(t.transpose().mmul(t).get(0, 0));\n      p = p.div(p.norm());\n      let xResidual = X.clone().sub(t.clone().mmul(p.transpose()));\n      let residual = u.transpose().mmul(t).div(t.transpose().mmul(t).get(0, 0));\n      let yResidual = Y.clone().sub(\n        t.clone().mulS(residual.get(0, 0)).mmul(q.transpose()),\n      );\n\n      this.t = t;\n      this.p = p.transpose();\n      this.w = w.transpose();\n      this.q = q;\n      this.u = u;\n      this.s = t.transpose().mmul(t);\n      this.xResidual = xResidual;\n      this.yResidual = yResidual;\n      this.betas = residual;\n    } else {\n      this.w = w.transpose();\n      this.s = t.transpose().mmul(t).sqrt();\n      if (scaleScores) {\n        this.t = t.clone().div(this.s.get(0, 0));\n      } else {\n        this.t = t;\n      }\n      this.xResidual = X.sub(t.mmul(w.transpose()));\n    }\n  }\n}\n\nexports.AbstractMatrix = AbstractMatrix;\nexports.CHO = CholeskyDecomposition;\nexports.CholeskyDecomposition = CholeskyDecomposition;\nexports.DistanceMatrix = DistanceMatrix;\nexports.EVD = EigenvalueDecomposition;\nexports.EigenvalueDecomposition = EigenvalueDecomposition;\nexports.LU = LuDecomposition;\nexports.LuDecomposition = LuDecomposition;\nexports.Matrix = Matrix;\nexports.MatrixColumnSelectionView = MatrixColumnSelectionView;\nexports.MatrixColumnView = MatrixColumnView;\nexports.MatrixFlipColumnView = MatrixFlipColumnView;\nexports.MatrixFlipRowView = MatrixFlipRowView;\nexports.MatrixRowSelectionView = MatrixRowSelectionView;\nexports.MatrixRowView = MatrixRowView;\nexports.MatrixSelectionView = MatrixSelectionView;\nexports.MatrixSubView = MatrixSubView;\nexports.MatrixTransposeView = MatrixTransposeView;\nexports.NIPALS = nipals;\nexports.Nipals = nipals;\nexports.QR = QrDecomposition;\nexports.QrDecomposition = QrDecomposition;\nexports.SVD = SingularValueDecomposition;\nexports.SingularValueDecomposition = SingularValueDecomposition;\nexports.SymmetricMatrix = SymmetricMatrix;\nexports.WrapperMatrix1D = WrapperMatrix1D;\nexports.WrapperMatrix2D = WrapperMatrix2D;\nexports.correlation = correlation;\nexports.covariance = covariance;\nexports.default = Matrix;\nexports.determinant = determinant;\nexports.inverse = inverse;\nexports.linearDependencies = linearDependencies;\nexports.pseudoInverse = pseudoInverse;\nexports.solve = solve;\nexports.wrap = wrap;\n", "export function xxxx(a: Vec1 | Vec2 | Vec3 | Vec4): Vec4 {\n  return [a[0], a[0], a[0], a[0]]\n}\nexport function yxxx(a: Vec2 | Vec3 | Vec4): Vec4 {\n  return [a[1], a[0], a[0], a[0]]\n}\nexport function zxxx(a: Vec3 | Vec4): Vec4 {\n  return [a[2], a[0], a[0], a[0]]\n}\nexport function wxxx(a: Vec4): Vec4 {\n  return [a[3], a[0], a[0], a[0]]\n}\nexport function xyxx(a: Vec2 | Vec3 | Vec4): Vec4 {\n  return [a[0], a[1], a[0], a[0]]\n}\nexport function yyxx(a: Vec2 | Vec3 | Vec4): Vec4 {\n  return [a[1], a[1], a[0], a[0]]\n}\nexport function zyxx(a: Vec3 | Vec4): Vec4 {\n  return [a[2], a[1], a[0], a[0]]\n}\nexport function wyxx(a: Vec4): Vec4 {\n  return [a[3], a[1], a[0], a[0]]\n}\nexport function xzxx(a: Vec3 | Vec4): Vec4 {\n  return [a[0], a[2], a[0], a[0]]\n}\nexport function yzxx(a: Vec3 | Vec4): Vec4 {\n  return [a[1], a[2], a[0], a[0]]\n}\nexport function zzxx(a: Vec3 | Vec4): Vec4 {\n  return [a[2], a[2], a[0], a[0]]\n}\nexport function wzxx(a: Vec4): Vec4 {\n  return [a[3], a[2], a[0], a[0]]\n}\nexport function xwxx(a: Vec4): Vec4 {\n  return [a[0], a[3], a[0], a[0]]\n}\nexport function ywxx(a: Vec4): Vec4 {\n  return [a[1], a[3], a[0], a[0]]\n}\nexport function zwxx(a: Vec4): Vec4 {\n  return [a[2], a[3], a[0], a[0]]\n}\nexport function wwxx(a: Vec4): Vec4 {\n  return [a[3], a[3], a[0], a[0]]\n}\nexport function xxyx(a: Vec2 | Vec3 | Vec4): Vec4 {\n  return [a[0], a[0], a[1], a[0]]\n}\nexport function yxyx(a: Vec2 | Vec3 | Vec4): Vec4 {\n  return [a[1], a[0], a[1], a[0]]\n}\nexport function zxyx(a: Vec3 | Vec4): Vec4 {\n  return [a[2], a[0], a[1], a[0]]\n}\nexport function wxyx(a: Vec4): Vec4 {\n  return [a[3], a[0], a[1], a[0]]\n}\nexport function xyyx(a: Vec2 | Vec3 | Vec4): Vec4 {\n  return [a[0], a[1], a[1], a[0]]\n}\nexport function yyyx(a: Vec2 | Vec3 | Vec4): Vec4 {\n  return [a[1], a[1], a[1], a[0]]\n}\nexport function zyyx(a: Vec3 | Vec4): Vec4 {\n  return [a[2], a[1], a[1], a[0]]\n}\nexport function wyyx(a: Vec4): Vec4 {\n  return [a[3], a[1], a[1], a[0]]\n}\nexport function xzyx(a: Vec3 | Vec4): Vec4 {\n  return [a[0], a[2], a[1], a[0]]\n}\nexport function yzyx(a: Vec3 | Vec4): Vec4 {\n  return [a[1], a[2], a[1], a[0]]\n}\nexport function zzyx(a: Vec3 | Vec4): Vec4 {\n  return [a[2], a[2], a[1], a[0]]\n}\nexport function wzyx(a: Vec4): Vec4 {\n  return [a[3], a[2], a[1], a[0]]\n}\nexport function xwyx(a: Vec4): Vec4 {\n  return [a[0], a[3], a[1], a[0]]\n}\nexport function ywyx(a: Vec4): Vec4 {\n  return [a[1], a[3], a[1], a[0]]\n}\nexport function zwyx(a: Vec4): Vec4 {\n  return [a[2], a[3], a[1], a[0]]\n}\nexport function wwyx(a: Vec4): Vec4 {\n  return [a[3], a[3], a[1], a[0]]\n}\nexport function xxzx(a: Vec3 | Vec4): Vec4 {\n  return [a[0], a[0], a[2], a[0]]\n}\nexport function yxzx(a: Vec3 | Vec4): Vec4 {\n  return [a[1], a[0], a[2], a[0]]\n}\nexport function zxzx(a: Vec3 | Vec4): Vec4 {\n  return [a[2], a[0], a[2], a[0]]\n}\nexport function wxzx(a: Vec4): Vec4 {\n  return [a[3], a[0], a[2], a[0]]\n}\nexport function xyzx(a: Vec3 | Vec4): Vec4 {\n  return [a[0], a[1], a[2], a[0]]\n}\nexport function yyzx(a: Vec3 | Vec4): Vec4 {\n  return [a[1], a[1], a[2], a[0]]\n}\nexport function zyzx(a: Vec3 | Vec4): Vec4 {\n  return [a[2], a[1], a[2], a[0]]\n}\nexport function wyzx(a: Vec4): Vec4 {\n  return [a[3], a[1], a[2], a[0]]\n}\nexport function xzzx(a: Vec3 | Vec4): Vec4 {\n  return [a[0], a[2], a[2], a[0]]\n}\nexport function yzzx(a: Vec3 | Vec4): Vec4 {\n  return [a[1], a[2], a[2], a[0]]\n}\nexport function zzzx(a: Vec3 | Vec4): Vec4 {\n  return [a[2], a[2], a[2], a[0]]\n}\nexport function wzzx(a: Vec4): Vec4 {\n  return [a[3], a[2], a[2], a[0]]\n}\nexport function xwzx(a: Vec4): Vec4 {\n  return [a[0], a[3], a[2], a[0]]\n}\nexport function ywzx(a: Vec4): Vec4 {\n  return [a[1], a[3], a[2], a[0]]\n}\nexport function zwzx(a: Vec4): Vec4 {\n  return [a[2], a[3], a[2], a[0]]\n}\nexport function wwzx(a: Vec4): Vec4 {\n  return [a[3], a[3], a[2], a[0]]\n}\nexport function xxwx(a: Vec4): Vec4 {\n  return [a[0], a[0], a[3], a[0]]\n}\nexport function yxwx(a: Vec4): Vec4 {\n  return [a[1], a[0], a[3], a[0]]\n}\nexport function zxwx(a: Vec4): Vec4 {\n  return [a[2], a[0], a[3], a[0]]\n}\nexport function wxwx(a: Vec4): Vec4 {\n  return [a[3], a[0], a[3], a[0]]\n}\nexport function xywx(a: Vec4): Vec4 {\n  return [a[0], a[1], a[3], a[0]]\n}\nexport function yywx(a: Vec4): Vec4 {\n  return [a[1], a[1], a[3], a[0]]\n}\nexport function zywx(a: Vec4): Vec4 {\n  return [a[2], a[1], a[3], a[0]]\n}\nexport function wywx(a: Vec4): Vec4 {\n  return [a[3], a[1], a[3], a[0]]\n}\nexport function xzwx(a: Vec4): Vec4 {\n  return [a[0], a[2], a[3], a[0]]\n}\nexport function yzwx(a: Vec4): Vec4 {\n  return [a[1], a[2], a[3], a[0]]\n}\nexport function zzwx(a: Vec4): Vec4 {\n  return [a[2], a[2], a[3], a[0]]\n}\nexport function wzwx(a: Vec4): Vec4 {\n  return [a[3], a[2], a[3], a[0]]\n}\nexport function xwwx(a: Vec4): Vec4 {\n  return [a[0], a[3], a[3], a[0]]\n}\nexport function ywwx(a: Vec4): Vec4 {\n  return [a[1], a[3], a[3], a[0]]\n}\nexport function zwwx(a: Vec4): Vec4 {\n  return [a[2], a[3], a[3], a[0]]\n}\nexport function wwwx(a: Vec4): Vec4 {\n  return [a[3], a[3], a[3], a[0]]\n}\nexport function xxxy(a: Vec2 | Vec3 | Vec4): Vec4 {\n  return [a[0], a[0], a[0], a[1]]\n}\nexport function yxxy(a: Vec2 | Vec3 | Vec4): Vec4 {\n  return [a[1], a[0], a[0], a[1]]\n}\nexport function zxxy(a: Vec3 | Vec4): Vec4 {\n  return [a[2], a[0], a[0], a[1]]\n}\nexport function wxxy(a: Vec4): Vec4 {\n  return [a[3], a[0], a[0], a[1]]\n}\nexport function xyxy(a: Vec2 | Vec3 | Vec4): Vec4 {\n  return [a[0], a[1], a[0], a[1]]\n}\nexport function yyxy(a: Vec2 | Vec3 | Vec4): Vec4 {\n  return [a[1], a[1], a[0], a[1]]\n}\nexport function zyxy(a: Vec3 | Vec4): Vec4 {\n  return [a[2], a[1], a[0], a[1]]\n}\nexport function wyxy(a: Vec4): Vec4 {\n  return [a[3], a[1], a[0], a[1]]\n}\nexport function xzxy(a: Vec3 | Vec4): Vec4 {\n  return [a[0], a[2], a[0], a[1]]\n}\nexport function yzxy(a: Vec3 | Vec4): Vec4 {\n  return [a[1], a[2], a[0], a[1]]\n}\nexport function zzxy(a: Vec3 | Vec4): Vec4 {\n  return [a[2], a[2], a[0], a[1]]\n}\nexport function wzxy(a: Vec4): Vec4 {\n  return [a[3], a[2], a[0], a[1]]\n}\nexport function xwxy(a: Vec4): Vec4 {\n  return [a[0], a[3], a[0], a[1]]\n}\nexport function ywxy(a: Vec4): Vec4 {\n  return [a[1], a[3], a[0], a[1]]\n}\nexport function zwxy(a: Vec4): Vec4 {\n  return [a[2], a[3], a[0], a[1]]\n}\nexport function wwxy(a: Vec4): Vec4 {\n  return [a[3], a[3], a[0], a[1]]\n}\nexport function xxyy(a: Vec2 | Vec3 | Vec4): Vec4 {\n  return [a[0], a[0], a[1], a[1]]\n}\nexport function yxyy(a: Vec2 | Vec3 | Vec4): Vec4 {\n  return [a[1], a[0], a[1], a[1]]\n}\nexport function zxyy(a: Vec3 | Vec4): Vec4 {\n  return [a[2], a[0], a[1], a[1]]\n}\nexport function wxyy(a: Vec4): Vec4 {\n  return [a[3], a[0], a[1], a[1]]\n}\nexport function xyyy(a: Vec2 | Vec3 | Vec4): Vec4 {\n  return [a[0], a[1], a[1], a[1]]\n}\nexport function yyyy(a: Vec2 | Vec3 | Vec4): Vec4 {\n  return [a[1], a[1], a[1], a[1]]\n}\nexport function zyyy(a: Vec3 | Vec4): Vec4 {\n  return [a[2], a[1], a[1], a[1]]\n}\nexport function wyyy(a: Vec4): Vec4 {\n  return [a[3], a[1], a[1], a[1]]\n}\nexport function xzyy(a: Vec3 | Vec4): Vec4 {\n  return [a[0], a[2], a[1], a[1]]\n}\nexport function yzyy(a: Vec3 | Vec4): Vec4 {\n  return [a[1], a[2], a[1], a[1]]\n}\nexport function zzyy(a: Vec3 | Vec4): Vec4 {\n  return [a[2], a[2], a[1], a[1]]\n}\nexport function wzyy(a: Vec4): Vec4 {\n  return [a[3], a[2], a[1], a[1]]\n}\nexport function xwyy(a: Vec4): Vec4 {\n  return [a[0], a[3], a[1], a[1]]\n}\nexport function ywyy(a: Vec4): Vec4 {\n  return [a[1], a[3], a[1], a[1]]\n}\nexport function zwyy(a: Vec4): Vec4 {\n  return [a[2], a[3], a[1], a[1]]\n}\nexport function wwyy(a: Vec4): Vec4 {\n  return [a[3], a[3], a[1], a[1]]\n}\nexport function xxzy(a: Vec3 | Vec4): Vec4 {\n  return [a[0], a[0], a[2], a[1]]\n}\nexport function yxzy(a: Vec3 | Vec4): Vec4 {\n  return [a[1], a[0], a[2], a[1]]\n}\nexport function zxzy(a: Vec3 | Vec4): Vec4 {\n  return [a[2], a[0], a[2], a[1]]\n}\nexport function wxzy(a: Vec4): Vec4 {\n  return [a[3], a[0], a[2], a[1]]\n}\nexport function xyzy(a: Vec3 | Vec4): Vec4 {\n  return [a[0], a[1], a[2], a[1]]\n}\nexport function yyzy(a: Vec3 | Vec4): Vec4 {\n  return [a[1], a[1], a[2], a[1]]\n}\nexport function zyzy(a: Vec3 | Vec4): Vec4 {\n  return [a[2], a[1], a[2], a[1]]\n}\nexport function wyzy(a: Vec4): Vec4 {\n  return [a[3], a[1], a[2], a[1]]\n}\nexport function xzzy(a: Vec3 | Vec4): Vec4 {\n  return [a[0], a[2], a[2], a[1]]\n}\nexport function yzzy(a: Vec3 | Vec4): Vec4 {\n  return [a[1], a[2], a[2], a[1]]\n}\nexport function zzzy(a: Vec3 | Vec4): Vec4 {\n  return [a[2], a[2], a[2], a[1]]\n}\nexport function wzzy(a: Vec4): Vec4 {\n  return [a[3], a[2], a[2], a[1]]\n}\nexport function xwzy(a: Vec4): Vec4 {\n  return [a[0], a[3], a[2], a[1]]\n}\nexport function ywzy(a: Vec4): Vec4 {\n  return [a[1], a[3], a[2], a[1]]\n}\nexport function zwzy(a: Vec4): Vec4 {\n  return [a[2], a[3], a[2], a[1]]\n}\nexport function wwzy(a: Vec4): Vec4 {\n  return [a[3], a[3], a[2], a[1]]\n}\nexport function xxwy(a: Vec4): Vec4 {\n  return [a[0], a[0], a[3], a[1]]\n}\nexport function yxwy(a: Vec4): Vec4 {\n  return [a[1], a[0], a[3], a[1]]\n}\nexport function zxwy(a: Vec4): Vec4 {\n  return [a[2], a[0], a[3], a[1]]\n}\nexport function wxwy(a: Vec4): Vec4 {\n  return [a[3], a[0], a[3], a[1]]\n}\nexport function xywy(a: Vec4): Vec4 {\n  return [a[0], a[1], a[3], a[1]]\n}\nexport function yywy(a: Vec4): Vec4 {\n  return [a[1], a[1], a[3], a[1]]\n}\nexport function zywy(a: Vec4): Vec4 {\n  return [a[2], a[1], a[3], a[1]]\n}\nexport function wywy(a: Vec4): Vec4 {\n  return [a[3], a[1], a[3], a[1]]\n}\nexport function xzwy(a: Vec4): Vec4 {\n  return [a[0], a[2], a[3], a[1]]\n}\nexport function yzwy(a: Vec4): Vec4 {\n  return [a[1], a[2], a[3], a[1]]\n}\nexport function zzwy(a: Vec4): Vec4 {\n  return [a[2], a[2], a[3], a[1]]\n}\nexport function wzwy(a: Vec4): Vec4 {\n  return [a[3], a[2], a[3], a[1]]\n}\nexport function xwwy(a: Vec4): Vec4 {\n  return [a[0], a[3], a[3], a[1]]\n}\nexport function ywwy(a: Vec4): Vec4 {\n  return [a[1], a[3], a[3], a[1]]\n}\nexport function zwwy(a: Vec4): Vec4 {\n  return [a[2], a[3], a[3], a[1]]\n}\nexport function wwwy(a: Vec4): Vec4 {\n  return [a[3], a[3], a[3], a[1]]\n}\nexport function xxxz(a: Vec3 | Vec4): Vec4 {\n  return [a[0], a[0], a[0], a[2]]\n}\nexport function yxxz(a: Vec3 | Vec4): Vec4 {\n  return [a[1], a[0], a[0], a[2]]\n}\nexport function zxxz(a: Vec3 | Vec4): Vec4 {\n  return [a[2], a[0], a[0], a[2]]\n}\nexport function wxxz(a: Vec4): Vec4 {\n  return [a[3], a[0], a[0], a[2]]\n}\nexport function xyxz(a: Vec3 | Vec4): Vec4 {\n  return [a[0], a[1], a[0], a[2]]\n}\nexport function yyxz(a: Vec3 | Vec4): Vec4 {\n  return [a[1], a[1], a[0], a[2]]\n}\nexport function zyxz(a: Vec3 | Vec4): Vec4 {\n  return [a[2], a[1], a[0], a[2]]\n}\nexport function wyxz(a: Vec4): Vec4 {\n  return [a[3], a[1], a[0], a[2]]\n}\nexport function xzxz(a: Vec3 | Vec4): Vec4 {\n  return [a[0], a[2], a[0], a[2]]\n}\nexport function yzxz(a: Vec3 | Vec4): Vec4 {\n  return [a[1], a[2], a[0], a[2]]\n}\nexport function zzxz(a: Vec3 | Vec4): Vec4 {\n  return [a[2], a[2], a[0], a[2]]\n}\nexport function wzxz(a: Vec4): Vec4 {\n  return [a[3], a[2], a[0], a[2]]\n}\nexport function xwxz(a: Vec4): Vec4 {\n  return [a[0], a[3], a[0], a[2]]\n}\nexport function ywxz(a: Vec4): Vec4 {\n  return [a[1], a[3], a[0], a[2]]\n}\nexport function zwxz(a: Vec4): Vec4 {\n  return [a[2], a[3], a[0], a[2]]\n}\nexport function wwxz(a: Vec4): Vec4 {\n  return [a[3], a[3], a[0], a[2]]\n}\nexport function xxyz(a: Vec3 | Vec4): Vec4 {\n  return [a[0], a[0], a[1], a[2]]\n}\nexport function yxyz(a: Vec3 | Vec4): Vec4 {\n  return [a[1], a[0], a[1], a[2]]\n}\nexport function zxyz(a: Vec3 | Vec4): Vec4 {\n  return [a[2], a[0], a[1], a[2]]\n}\nexport function wxyz(a: Vec4): Vec4 {\n  return [a[3], a[0], a[1], a[2]]\n}\nexport function xyyz(a: Vec3 | Vec4): Vec4 {\n  return [a[0], a[1], a[1], a[2]]\n}\nexport function yyyz(a: Vec3 | Vec4): Vec4 {\n  return [a[1], a[1], a[1], a[2]]\n}\nexport function zyyz(a: Vec3 | Vec4): Vec4 {\n  return [a[2], a[1], a[1], a[2]]\n}\nexport function wyyz(a: Vec4): Vec4 {\n  return [a[3], a[1], a[1], a[2]]\n}\nexport function xzyz(a: Vec3 | Vec4): Vec4 {\n  return [a[0], a[2], a[1], a[2]]\n}\nexport function yzyz(a: Vec3 | Vec4): Vec4 {\n  return [a[1], a[2], a[1], a[2]]\n}\nexport function zzyz(a: Vec3 | Vec4): Vec4 {\n  return [a[2], a[2], a[1], a[2]]\n}\nexport function wzyz(a: Vec4): Vec4 {\n  return [a[3], a[2], a[1], a[2]]\n}\nexport function xwyz(a: Vec4): Vec4 {\n  return [a[0], a[3], a[1], a[2]]\n}\nexport function ywyz(a: Vec4): Vec4 {\n  return [a[1], a[3], a[1], a[2]]\n}\nexport function zwyz(a: Vec4): Vec4 {\n  return [a[2], a[3], a[1], a[2]]\n}\nexport function wwyz(a: Vec4): Vec4 {\n  return [a[3], a[3], a[1], a[2]]\n}\nexport function xxzz(a: Vec3 | Vec4): Vec4 {\n  return [a[0], a[0], a[2], a[2]]\n}\nexport function yxzz(a: Vec3 | Vec4): Vec4 {\n  return [a[1], a[0], a[2], a[2]]\n}\nexport function zxzz(a: Vec3 | Vec4): Vec4 {\n  return [a[2], a[0], a[2], a[2]]\n}\nexport function wxzz(a: Vec4): Vec4 {\n  return [a[3], a[0], a[2], a[2]]\n}\nexport function xyzz(a: Vec3 | Vec4): Vec4 {\n  return [a[0], a[1], a[2], a[2]]\n}\nexport function yyzz(a: Vec3 | Vec4): Vec4 {\n  return [a[1], a[1], a[2], a[2]]\n}\nexport function zyzz(a: Vec3 | Vec4): Vec4 {\n  return [a[2], a[1], a[2], a[2]]\n}\nexport function wyzz(a: Vec4): Vec4 {\n  return [a[3], a[1], a[2], a[2]]\n}\nexport function xzzz(a: Vec3 | Vec4): Vec4 {\n  return [a[0], a[2], a[2], a[2]]\n}\nexport function yzzz(a: Vec3 | Vec4): Vec4 {\n  return [a[1], a[2], a[2], a[2]]\n}\nexport function zzzz(a: Vec3 | Vec4): Vec4 {\n  return [a[2], a[2], a[2], a[2]]\n}\nexport function wzzz(a: Vec4): Vec4 {\n  return [a[3], a[2], a[2], a[2]]\n}\nexport function xwzz(a: Vec4): Vec4 {\n  return [a[0], a[3], a[2], a[2]]\n}\nexport function ywzz(a: Vec4): Vec4 {\n  return [a[1], a[3], a[2], a[2]]\n}\nexport function zwzz(a: Vec4): Vec4 {\n  return [a[2], a[3], a[2], a[2]]\n}\nexport function wwzz(a: Vec4): Vec4 {\n  return [a[3], a[3], a[2], a[2]]\n}\nexport function xxwz(a: Vec4): Vec4 {\n  return [a[0], a[0], a[3], a[2]]\n}\nexport function yxwz(a: Vec4): Vec4 {\n  return [a[1], a[0], a[3], a[2]]\n}\nexport function zxwz(a: Vec4): Vec4 {\n  return [a[2], a[0], a[3], a[2]]\n}\nexport function wxwz(a: Vec4): Vec4 {\n  return [a[3], a[0], a[3], a[2]]\n}\nexport function xywz(a: Vec4): Vec4 {\n  return [a[0], a[1], a[3], a[2]]\n}\nexport function yywz(a: Vec4): Vec4 {\n  return [a[1], a[1], a[3], a[2]]\n}\nexport function zywz(a: Vec4): Vec4 {\n  return [a[2], a[1], a[3], a[2]]\n}\nexport function wywz(a: Vec4): Vec4 {\n  return [a[3], a[1], a[3], a[2]]\n}\nexport function xzwz(a: Vec4): Vec4 {\n  return [a[0], a[2], a[3], a[2]]\n}\nexport function yzwz(a: Vec4): Vec4 {\n  return [a[1], a[2], a[3], a[2]]\n}\nexport function zzwz(a: Vec4): Vec4 {\n  return [a[2], a[2], a[3], a[2]]\n}\nexport function wzwz(a: Vec4): Vec4 {\n  return [a[3], a[2], a[3], a[2]]\n}\nexport function xwwz(a: Vec4): Vec4 {\n  return [a[0], a[3], a[3], a[2]]\n}\nexport function ywwz(a: Vec4): Vec4 {\n  return [a[1], a[3], a[3], a[2]]\n}\nexport function zwwz(a: Vec4): Vec4 {\n  return [a[2], a[3], a[3], a[2]]\n}\nexport function wwwz(a: Vec4): Vec4 {\n  return [a[3], a[3], a[3], a[2]]\n}\nexport function xxxw(a: Vec4): Vec4 {\n  return [a[0], a[0], a[0], a[3]]\n}\nexport function yxxw(a: Vec4): Vec4 {\n  return [a[1], a[0], a[0], a[3]]\n}\nexport function zxxw(a: Vec4): Vec4 {\n  return [a[2], a[0], a[0], a[3]]\n}\nexport function wxxw(a: Vec4): Vec4 {\n  return [a[3], a[0], a[0], a[3]]\n}\nexport function xyxw(a: Vec4): Vec4 {\n  return [a[0], a[1], a[0], a[3]]\n}\nexport function yyxw(a: Vec4): Vec4 {\n  return [a[1], a[1], a[0], a[3]]\n}\nexport function zyxw(a: Vec4): Vec4 {\n  return [a[2], a[1], a[0], a[3]]\n}\nexport function wyxw(a: Vec4): Vec4 {\n  return [a[3], a[1], a[0], a[3]]\n}\nexport function xzxw(a: Vec4): Vec4 {\n  return [a[0], a[2], a[0], a[3]]\n}\nexport function yzxw(a: Vec4): Vec4 {\n  return [a[1], a[2], a[0], a[3]]\n}\nexport function zzxw(a: Vec4): Vec4 {\n  return [a[2], a[2], a[0], a[3]]\n}\nexport function wzxw(a: Vec4): Vec4 {\n  return [a[3], a[2], a[0], a[3]]\n}\nexport function xwxw(a: Vec4): Vec4 {\n  return [a[0], a[3], a[0], a[3]]\n}\nexport function ywxw(a: Vec4): Vec4 {\n  return [a[1], a[3], a[0], a[3]]\n}\nexport function zwxw(a: Vec4): Vec4 {\n  return [a[2], a[3], a[0], a[3]]\n}\nexport function wwxw(a: Vec4): Vec4 {\n  return [a[3], a[3], a[0], a[3]]\n}\nexport function xxyw(a: Vec4): Vec4 {\n  return [a[0], a[0], a[1], a[3]]\n}\nexport function yxyw(a: Vec4): Vec4 {\n  return [a[1], a[0], a[1], a[3]]\n}\nexport function zxyw(a: Vec4): Vec4 {\n  return [a[2], a[0], a[1], a[3]]\n}\nexport function wxyw(a: Vec4): Vec4 {\n  return [a[3], a[0], a[1], a[3]]\n}\nexport function xyyw(a: Vec4): Vec4 {\n  return [a[0], a[1], a[1], a[3]]\n}\nexport function yyyw(a: Vec4): Vec4 {\n  return [a[1], a[1], a[1], a[3]]\n}\nexport function zyyw(a: Vec4): Vec4 {\n  return [a[2], a[1], a[1], a[3]]\n}\nexport function wyyw(a: Vec4): Vec4 {\n  return [a[3], a[1], a[1], a[3]]\n}\nexport function xzyw(a: Vec4): Vec4 {\n  return [a[0], a[2], a[1], a[3]]\n}\nexport function yzyw(a: Vec4): Vec4 {\n  return [a[1], a[2], a[1], a[3]]\n}\nexport function zzyw(a: Vec4): Vec4 {\n  return [a[2], a[2], a[1], a[3]]\n}\nexport function wzyw(a: Vec4): Vec4 {\n  return [a[3], a[2], a[1], a[3]]\n}\nexport function xwyw(a: Vec4): Vec4 {\n  return [a[0], a[3], a[1], a[3]]\n}\nexport function ywyw(a: Vec4): Vec4 {\n  return [a[1], a[3], a[1], a[3]]\n}\nexport function zwyw(a: Vec4): Vec4 {\n  return [a[2], a[3], a[1], a[3]]\n}\nexport function wwyw(a: Vec4): Vec4 {\n  return [a[3], a[3], a[1], a[3]]\n}\nexport function xxzw(a: Vec4): Vec4 {\n  return [a[0], a[0], a[2], a[3]]\n}\nexport function yxzw(a: Vec4): Vec4 {\n  return [a[1], a[0], a[2], a[3]]\n}\nexport function zxzw(a: Vec4): Vec4 {\n  return [a[2], a[0], a[2], a[3]]\n}\nexport function wxzw(a: Vec4): Vec4 {\n  return [a[3], a[0], a[2], a[3]]\n}\nexport function xyzw(a: Vec4): Vec4 {\n  return [a[0], a[1], a[2], a[3]]\n}\nexport function yyzw(a: Vec4): Vec4 {\n  return [a[1], a[1], a[2], a[3]]\n}\nexport function zyzw(a: Vec4): Vec4 {\n  return [a[2], a[1], a[2], a[3]]\n}\nexport function wyzw(a: Vec4): Vec4 {\n  return [a[3], a[1], a[2], a[3]]\n}\nexport function xzzw(a: Vec4): Vec4 {\n  return [a[0], a[2], a[2], a[3]]\n}\nexport function yzzw(a: Vec4): Vec4 {\n  return [a[1], a[2], a[2], a[3]]\n}\nexport function zzzw(a: Vec4): Vec4 {\n  return [a[2], a[2], a[2], a[3]]\n}\nexport function wzzw(a: Vec4): Vec4 {\n  return [a[3], a[2], a[2], a[3]]\n}\nexport function xwzw(a: Vec4): Vec4 {\n  return [a[0], a[3], a[2], a[3]]\n}\nexport function ywzw(a: Vec4): Vec4 {\n  return [a[1], a[3], a[2], a[3]]\n}\nexport function zwzw(a: Vec4): Vec4 {\n  return [a[2], a[3], a[2], a[3]]\n}\nexport function wwzw(a: Vec4): Vec4 {\n  return [a[3], a[3], a[2], a[3]]\n}\nexport function xxww(a: Vec4): Vec4 {\n  return [a[0], a[0], a[3], a[3]]\n}\nexport function yxww(a: Vec4): Vec4 {\n  return [a[1], a[0], a[3], a[3]]\n}\nexport function zxww(a: Vec4): Vec4 {\n  return [a[2], a[0], a[3], a[3]]\n}\nexport function wxww(a: Vec4): Vec4 {\n  return [a[3], a[0], a[3], a[3]]\n}\nexport function xyww(a: Vec4): Vec4 {\n  return [a[0], a[1], a[3], a[3]]\n}\nexport function yyww(a: Vec4): Vec4 {\n  return [a[1], a[1], a[3], a[3]]\n}\nexport function zyww(a: Vec4): Vec4 {\n  return [a[2], a[1], a[3], a[3]]\n}\nexport function wyww(a: Vec4): Vec4 {\n  return [a[3], a[1], a[3], a[3]]\n}\nexport function xzww(a: Vec4): Vec4 {\n  return [a[0], a[2], a[3], a[3]]\n}\nexport function yzww(a: Vec4): Vec4 {\n  return [a[1], a[2], a[3], a[3]]\n}\nexport function zzww(a: Vec4): Vec4 {\n  return [a[2], a[2], a[3], a[3]]\n}\nexport function wzww(a: Vec4): Vec4 {\n  return [a[3], a[2], a[3], a[3]]\n}\nexport function xwww(a: Vec4): Vec4 {\n  return [a[0], a[3], a[3], a[3]]\n}\nexport function ywww(a: Vec4): Vec4 {\n  return [a[1], a[3], a[3], a[3]]\n}\nexport function zwww(a: Vec4): Vec4 {\n  return [a[2], a[3], a[3], a[3]]\n}\nexport function wwww(a: Vec4): Vec4 {\n  return [a[3], a[3], a[3], a[3]]\n}\nexport function xxx(a: Vec1 | Vec2 | Vec3 | Vec4): Vec3 {\n  return [a[0], a[0], a[0]]\n}\nexport function yxx(a: Vec2 | Vec3 | Vec4): Vec3 {\n  return [a[1], a[0], a[0]]\n}\nexport function zxx(a: Vec3 | Vec4): Vec3 {\n  return [a[2], a[0], a[0]]\n}\nexport function wxx(a: Vec4): Vec3 {\n  return [a[3], a[0], a[0]]\n}\nexport function xyx(a: Vec2 | Vec3 | Vec4): Vec3 {\n  return [a[0], a[1], a[0]]\n}\nexport function yyx(a: Vec2 | Vec3 | Vec4): Vec3 {\n  return [a[1], a[1], a[0]]\n}\nexport function zyx(a: Vec3 | Vec4): Vec3 {\n  return [a[2], a[1], a[0]]\n}\nexport function wyx(a: Vec4): Vec3 {\n  return [a[3], a[1], a[0]]\n}\nexport function xzx(a: Vec3 | Vec4): Vec3 {\n  return [a[0], a[2], a[0]]\n}\nexport function yzx(a: Vec3 | Vec4): Vec3 {\n  return [a[1], a[2], a[0]]\n}\nexport function zzx(a: Vec3 | Vec4): Vec3 {\n  return [a[2], a[2], a[0]]\n}\nexport function wzx(a: Vec4): Vec3 {\n  return [a[3], a[2], a[0]]\n}\nexport function xwx(a: Vec4): Vec3 {\n  return [a[0], a[3], a[0]]\n}\nexport function ywx(a: Vec4): Vec3 {\n  return [a[1], a[3], a[0]]\n}\nexport function zwx(a: Vec4): Vec3 {\n  return [a[2], a[3], a[0]]\n}\nexport function wwx(a: Vec4): Vec3 {\n  return [a[3], a[3], a[0]]\n}\nexport function xxy(a: Vec2 | Vec3 | Vec4): Vec3 {\n  return [a[0], a[0], a[1]]\n}\nexport function yxy(a: Vec2 | Vec3 | Vec4): Vec3 {\n  return [a[1], a[0], a[1]]\n}\nexport function zxy(a: Vec3 | Vec4): Vec3 {\n  return [a[2], a[0], a[1]]\n}\nexport function wxy(a: Vec4): Vec3 {\n  return [a[3], a[0], a[1]]\n}\nexport function xyy(a: Vec2 | Vec3 | Vec4): Vec3 {\n  return [a[0], a[1], a[1]]\n}\nexport function yyy(a: Vec2 | Vec3 | Vec4): Vec3 {\n  return [a[1], a[1], a[1]]\n}\nexport function zyy(a: Vec3 | Vec4): Vec3 {\n  return [a[2], a[1], a[1]]\n}\nexport function wyy(a: Vec4): Vec3 {\n  return [a[3], a[1], a[1]]\n}\nexport function xzy(a: Vec3 | Vec4): Vec3 {\n  return [a[0], a[2], a[1]]\n}\nexport function yzy(a: Vec3 | Vec4): Vec3 {\n  return [a[1], a[2], a[1]]\n}\nexport function zzy(a: Vec3 | Vec4): Vec3 {\n  return [a[2], a[2], a[1]]\n}\nexport function wzy(a: Vec4): Vec3 {\n  return [a[3], a[2], a[1]]\n}\nexport function xwy(a: Vec4): Vec3 {\n  return [a[0], a[3], a[1]]\n}\nexport function ywy(a: Vec4): Vec3 {\n  return [a[1], a[3], a[1]]\n}\nexport function zwy(a: Vec4): Vec3 {\n  return [a[2], a[3], a[1]]\n}\nexport function wwy(a: Vec4): Vec3 {\n  return [a[3], a[3], a[1]]\n}\nexport function xxz(a: Vec3 | Vec4): Vec3 {\n  return [a[0], a[0], a[2]]\n}\nexport function yxz(a: Vec3 | Vec4): Vec3 {\n  return [a[1], a[0], a[2]]\n}\nexport function zxz(a: Vec3 | Vec4): Vec3 {\n  return [a[2], a[0], a[2]]\n}\nexport function wxz(a: Vec4): Vec3 {\n  return [a[3], a[0], a[2]]\n}\nexport function xyz(a: Vec3 | Vec4): Vec3 {\n  return [a[0], a[1], a[2]]\n}\nexport function yyz(a: Vec3 | Vec4): Vec3 {\n  return [a[1], a[1], a[2]]\n}\nexport function zyz(a: Vec3 | Vec4): Vec3 {\n  return [a[2], a[1], a[2]]\n}\nexport function wyz(a: Vec4): Vec3 {\n  return [a[3], a[1], a[2]]\n}\nexport function xzz(a: Vec3 | Vec4): Vec3 {\n  return [a[0], a[2], a[2]]\n}\nexport function yzz(a: Vec3 | Vec4): Vec3 {\n  return [a[1], a[2], a[2]]\n}\nexport function zzz(a: Vec3 | Vec4): Vec3 {\n  return [a[2], a[2], a[2]]\n}\nexport function wzz(a: Vec4): Vec3 {\n  return [a[3], a[2], a[2]]\n}\nexport function xwz(a: Vec4): Vec3 {\n  return [a[0], a[3], a[2]]\n}\nexport function ywz(a: Vec4): Vec3 {\n  return [a[1], a[3], a[2]]\n}\nexport function zwz(a: Vec4): Vec3 {\n  return [a[2], a[3], a[2]]\n}\nexport function wwz(a: Vec4): Vec3 {\n  return [a[3], a[3], a[2]]\n}\nexport function xxw(a: Vec4): Vec3 {\n  return [a[0], a[0], a[3]]\n}\nexport function yxw(a: Vec4): Vec3 {\n  return [a[1], a[0], a[3]]\n}\nexport function zxw(a: Vec4): Vec3 {\n  return [a[2], a[0], a[3]]\n}\nexport function wxw(a: Vec4): Vec3 {\n  return [a[3], a[0], a[3]]\n}\nexport function xyw(a: Vec4): Vec3 {\n  return [a[0], a[1], a[3]]\n}\nexport function yyw(a: Vec4): Vec3 {\n  return [a[1], a[1], a[3]]\n}\nexport function zyw(a: Vec4): Vec3 {\n  return [a[2], a[1], a[3]]\n}\nexport function wyw(a: Vec4): Vec3 {\n  return [a[3], a[1], a[3]]\n}\nexport function xzw(a: Vec4): Vec3 {\n  return [a[0], a[2], a[3]]\n}\nexport function yzw(a: Vec4): Vec3 {\n  return [a[1], a[2], a[3]]\n}\nexport function zzw(a: Vec4): Vec3 {\n  return [a[2], a[2], a[3]]\n}\nexport function wzw(a: Vec4): Vec3 {\n  return [a[3], a[2], a[3]]\n}\nexport function xww(a: Vec4): Vec3 {\n  return [a[0], a[3], a[3]]\n}\nexport function yww(a: Vec4): Vec3 {\n  return [a[1], a[3], a[3]]\n}\nexport function zww(a: Vec4): Vec3 {\n  return [a[2], a[3], a[3]]\n}\nexport function www(a: Vec4): Vec3 {\n  return [a[3], a[3], a[3]]\n}\nexport function xx(a: Vec1 | Vec2 | Vec3 | Vec4): Vec2 {\n  return [a[0], a[0]]\n}\nexport function yx(a: Vec2 | Vec3 | Vec4): Vec2 {\n  return [a[1], a[0]]\n}\nexport function zx(a: Vec3 | Vec4): Vec2 {\n  return [a[2], a[0]]\n}\nexport function wx(a: Vec4): Vec2 {\n  return [a[3], a[0]]\n}\nexport function xy(a: Vec2 | Vec3 | Vec4): Vec2 {\n  return [a[0], a[1]]\n}\nexport function yy(a: Vec2 | Vec3 | Vec4): Vec2 {\n  return [a[1], a[1]]\n}\nexport function zy(a: Vec3 | Vec4): Vec2 {\n  return [a[2], a[1]]\n}\nexport function wy(a: Vec4): Vec2 {\n  return [a[3], a[1]]\n}\nexport function xz(a: Vec3 | Vec4): Vec2 {\n  return [a[0], a[2]]\n}\nexport function yz(a: Vec3 | Vec4): Vec2 {\n  return [a[1], a[2]]\n}\nexport function zz(a: Vec3 | Vec4): Vec2 {\n  return [a[2], a[2]]\n}\nexport function wz(a: Vec4): Vec2 {\n  return [a[3], a[2]]\n}\nexport function xw(a: Vec4): Vec2 {\n  return [a[0], a[3]]\n}\nexport function yw(a: Vec4): Vec2 {\n  return [a[1], a[3]]\n}\nexport function zw(a: Vec4): Vec2 {\n  return [a[2], a[3]]\n}\nexport function ww(a: Vec4): Vec2 {\n  return [a[3], a[3]]\n}\n\nexport function x(a: Vec1 | Vec2 | Vec3 | Vec4): number {\n  return a[0]\n}\n\nexport function y(a: Vec2 | Vec3 | Vec4): number {\n  return a[1]\n}\n\nexport function z(a: Vec3 | Vec4): number {\n  return a[2]\n}\n\nexport function w(a: Vec4): number {\n  return a[3]\n}\n\nexport type Vec1 = [number]\nexport type Vec2 = [number, number]\nexport type Vec3 = [number, number, number]\nexport type Vec4 = [number, number, number, number]\n\nexport type Mat2 = [number, number, number, number]\nexport type Mat3 = [\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n]\nexport type Mat4 = [\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n]\nexport type Mat2x3 = [number, number, number, number, number, number]\nexport type Mat3x2 = [number, number, number, number, number, number]\nexport type Mat4x2 = [\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n]\nexport type Mat2x4 = [\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n]\nexport type Mat4x3 = [\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n]\nexport type Mat3x4 = [\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n]\n\nexport function mulScalarByVec2(a: number, b: Vec2): Vec2 {\n  return [a[0] * b[0], a[0] * b[1]]\n}\nexport function mulScalarByVec3(a: number, b: Vec3): Vec3 {\n  return [a[0] * b[0], a[0] * b[1], a[0] * b[2]]\n}\nexport function mulScalarByVec4(a: number, b: Vec4): Vec4 {\n  return [a[0] * b[0], a[0] * b[1], a[0] * b[2], a[0] * b[3]]\n}\n\nexport function mulVec2ByMat2(a: Vec2, b: Mat2): Vec2 {\n  return [a[0] * b[0] + a[1] * b[2], a[0] * b[1] + a[1] * b[3]]\n}\nexport function mulVec2ByMat3x2(a: Vec2, b: Mat3x2): Vec3 {\n  return [\n    a[0] * b[0] + a[1] * b[3],\n    a[0] * b[1] + a[1] * b[4],\n    a[0] * b[2] + a[1] * b[5],\n  ]\n}\nexport function mulVec2ByMat4x2(a: Vec2, b: Mat4x2): Vec4 {\n  return [\n    a[0] * b[0] + a[1] * b[4],\n    a[0] * b[1] + a[1] * b[5],\n    a[0] * b[2] + a[1] * b[6],\n    a[0] * b[3] + a[1] * b[7],\n  ]\n}\n\nexport function mulVec3ByMat2x3(a: Vec3, b: Mat2x3): Vec2 {\n  return [\n    a[0] * b[0] + a[1] * b[2] + a[2] * b[4],\n    a[0] * b[1] + a[1] * b[3] + a[2] * b[5],\n  ]\n}\nexport function mulVec3ByMat3(a: Vec3, b: Mat3): Vec3 {\n  return [\n    a[0] * b[0] + a[1] * b[3] + a[2] * b[6],\n    a[0] * b[1] + a[1] * b[4] + a[2] * b[7],\n    a[0] * b[2] + a[1] * b[5] + a[2] * b[8],\n  ]\n}\nexport function mulVec3ByMat4x3(a: Vec3, b: Mat4x3): Vec4 {\n  return [\n    a[0] * b[0] + a[1] * b[4] + a[2] * b[8],\n    a[0] * b[1] + a[1] * b[5] + a[2] * b[9],\n    a[0] * b[2] + a[1] * b[6] + a[2] * b[10],\n    a[0] * b[3] + a[1] * b[7] + a[2] * b[11],\n  ]\n}\n\nexport function mulVec4ByMat2x4(a: Vec4, b: Mat2x4): Vec2 {\n  return [\n    a[0] * b[0] + a[1] * b[2] + a[2] * b[4] + a[3] * b[6],\n    a[0] * b[1] + a[1] * b[3] + a[2] * b[5] + a[3] * b[7],\n  ]\n}\nexport function mulVec4ByMat3x4(a: Vec4, b: Mat3x4): Vec3 {\n  return [\n    a[0] * b[0] + a[1] * b[3] + a[2] * b[6] + a[3] * b[9],\n    a[0] * b[1] + a[1] * b[4] + a[2] * b[7] + a[3] * b[10],\n    a[0] * b[2] + a[1] * b[5] + a[2] * b[8] + a[3] * b[11],\n  ]\n}\nexport function mulVec4ByMat4(a: Vec4, b: Mat4): Vec4 {\n  return [\n    a[0] * b[0] + a[1] * b[4] + a[2] * b[8] + a[3] * b[12],\n    a[0] * b[1] + a[1] * b[5] + a[2] * b[9] + a[3] * b[13],\n    a[0] * b[2] + a[1] * b[6] + a[2] * b[10] + a[3] * b[14],\n    a[0] * b[3] + a[1] * b[7] + a[2] * b[11] + a[3] * b[15],\n  ]\n}\nexport function mulVec2ByScalar(a: Vec2, b: number): Vec2 {\n  return [a[0] * b[0], a[1] * b[0]]\n}\nexport function mulVec2ByVec2(a: Vec2, b: Vec2): Mat2 {\n  return [a[0] * b[0], a[1] * b[0], a[0] * b[1], a[1] * b[1]]\n}\nexport function mulVec2ByVec3(a: Vec2, b: Vec3): Mat2x3 {\n  return [\n    a[0] * b[0],\n    a[1] * b[0],\n    a[0] * b[1],\n    a[1] * b[1],\n    a[0] * b[2],\n    a[1] * b[2],\n  ]\n}\nexport function mulVec2ByVec4(a: Vec2, b: Vec4): Mat2x4 {\n  return [\n    a[0] * b[0],\n    a[1] * b[0],\n    a[0] * b[1],\n    a[1] * b[1],\n    a[0] * b[2],\n    a[1] * b[2],\n    a[0] * b[3],\n    a[1] * b[3],\n  ]\n}\nexport function mulMat2ByVec2(a: Mat2, b: Vec2): Vec2 {\n  return [a[0] * b[0] + a[1] * b[1], a[2] * b[0] + a[3] * b[1]]\n}\nexport function mulMat2(a: Mat2, b: Mat2): Mat2 {\n  return [\n    a[0] * b[0] + a[1] * b[2],\n    a[2] * b[0] + a[3] * b[2],\n    a[0] * b[1] + a[1] * b[3],\n    a[2] * b[1] + a[3] * b[3],\n  ]\n}\nexport function mulMat2ByMat3x2(a: Mat2, b: Mat3x2): Mat2x3 {\n  return [\n    a[0] * b[0] + a[1] * b[3],\n    a[2] * b[0] + a[3] * b[3],\n    a[0] * b[1] + a[1] * b[4],\n    a[2] * b[1] + a[3] * b[4],\n    a[0] * b[2] + a[1] * b[5],\n    a[2] * b[2] + a[3] * b[5],\n  ]\n}\nexport function mulMat2ByMat4x2(a: Mat2, b: Mat4x2): Mat2x4 {\n  return [\n    a[0] * b[0] + a[1] * b[4],\n    a[2] * b[0] + a[3] * b[4],\n    a[0] * b[1] + a[1] * b[5],\n    a[2] * b[1] + a[3] * b[5],\n    a[0] * b[2] + a[1] * b[6],\n    a[2] * b[2] + a[3] * b[6],\n    a[0] * b[3] + a[1] * b[7],\n    a[2] * b[3] + a[3] * b[7],\n  ]\n}\nexport function mulMat3x2ByVec3(a: Mat3x2, b: Vec3): Vec2 {\n  return [\n    a[0] * b[0] + a[1] * b[1] + a[2] * b[2],\n    a[3] * b[0] + a[4] * b[1] + a[5] * b[2],\n  ]\n}\nexport function mulMat3x2ByMat2x3(a: Mat3x2, b: Mat2x3): Mat2 {\n  return [\n    a[0] * b[0] + a[1] * b[2] + a[2] * b[4],\n    a[3] * b[0] + a[4] * b[2] + a[5] * b[4],\n    a[0] * b[1] + a[1] * b[3] + a[2] * b[5],\n    a[3] * b[1] + a[4] * b[3] + a[5] * b[5],\n  ]\n}\nexport function mulMat3x2ByMat3(a: Mat3x2, b: Mat3): Mat2x3 {\n  return [\n    a[0] * b[0] + a[1] * b[3] + a[2] * b[6],\n    a[3] * b[0] + a[4] * b[3] + a[5] * b[6],\n    a[0] * b[1] + a[1] * b[4] + a[2] * b[7],\n    a[3] * b[1] + a[4] * b[4] + a[5] * b[7],\n    a[0] * b[2] + a[1] * b[5] + a[2] * b[8],\n    a[3] * b[2] + a[4] * b[5] + a[5] * b[8],\n  ]\n}\nexport function mulMat3x2ByMat4x3(a: Mat3x2, b: Mat4x3): Mat2x4 {\n  return [\n    a[0] * b[0] + a[1] * b[4] + a[2] * b[8],\n    a[3] * b[0] + a[4] * b[4] + a[5] * b[8],\n    a[0] * b[1] + a[1] * b[5] + a[2] * b[9],\n    a[3] * b[1] + a[4] * b[5] + a[5] * b[9],\n    a[0] * b[2] + a[1] * b[6] + a[2] * b[10],\n    a[3] * b[2] + a[4] * b[6] + a[5] * b[10],\n    a[0] * b[3] + a[1] * b[7] + a[2] * b[11],\n    a[3] * b[3] + a[4] * b[7] + a[5] * b[11],\n  ]\n}\nexport function mulMat4x2ByVec4(a: Mat4x2, b: Vec4): Vec2 {\n  return [\n    a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3],\n    a[4] * b[0] + a[5] * b[1] + a[6] * b[2] + a[7] * b[3],\n  ]\n}\nexport function mulMat4x2ByMat2x4(a: Mat4x2, b: Mat2x4): Mat2 {\n  return [\n    a[0] * b[0] + a[1] * b[2] + a[2] * b[4] + a[3] * b[6],\n    a[4] * b[0] + a[5] * b[2] + a[6] * b[4] + a[7] * b[6],\n    a[0] * b[1] + a[1] * b[3] + a[2] * b[5] + a[3] * b[7],\n    a[4] * b[1] + a[5] * b[3] + a[6] * b[5] + a[7] * b[7],\n  ]\n}\nexport function mulMat4x2ByMat3x4(a: Mat4x2, b: Mat3x4): Mat2x3 {\n  return [\n    a[0] * b[0] + a[1] * b[3] + a[2] * b[6] + a[3] * b[9],\n    a[4] * b[0] + a[5] * b[3] + a[6] * b[6] + a[7] * b[9],\n    a[0] * b[1] + a[1] * b[4] + a[2] * b[7] + a[3] * b[10],\n    a[4] * b[1] + a[5] * b[4] + a[6] * b[7] + a[7] * b[10],\n    a[0] * b[2] + a[1] * b[5] + a[2] * b[8] + a[3] * b[11],\n    a[4] * b[2] + a[5] * b[5] + a[6] * b[8] + a[7] * b[11],\n  ]\n}\nexport function mulMat4x2ByMat4(a: Mat4x2, b: Mat4): Mat2x4 {\n  return [\n    a[0] * b[0] + a[1] * b[4] + a[2] * b[8] + a[3] * b[12],\n    a[4] * b[0] + a[5] * b[4] + a[6] * b[8] + a[7] * b[12],\n    a[0] * b[1] + a[1] * b[5] + a[2] * b[9] + a[3] * b[13],\n    a[4] * b[1] + a[5] * b[5] + a[6] * b[9] + a[7] * b[13],\n    a[0] * b[2] + a[1] * b[6] + a[2] * b[10] + a[3] * b[14],\n    a[4] * b[2] + a[5] * b[6] + a[6] * b[10] + a[7] * b[14],\n    a[0] * b[3] + a[1] * b[7] + a[2] * b[11] + a[3] * b[15],\n    a[4] * b[3] + a[5] * b[7] + a[6] * b[11] + a[7] * b[15],\n  ]\n}\nexport function mulVec3ByScalar(a: Vec3, b: number): Vec3 {\n  return [a[0] * b[0], a[1] * b[0], a[2] * b[0]]\n}\nexport function mulVec3ByVec2(a: Vec3, b: Vec2): Mat3x2 {\n  return [\n    a[0] * b[0],\n    a[1] * b[0],\n    a[2] * b[0],\n    a[0] * b[1],\n    a[1] * b[1],\n    a[2] * b[1],\n  ]\n}\nexport function mulVec3ByVec3(a: Vec3, b: Vec3): Mat3 {\n  return [\n    a[0] * b[0],\n    a[1] * b[0],\n    a[2] * b[0],\n    a[0] * b[1],\n    a[1] * b[1],\n    a[2] * b[1],\n    a[0] * b[2],\n    a[1] * b[2],\n    a[2] * b[2],\n  ]\n}\nexport function mulVec3ByVec4(a: Vec3, b: Vec4): Mat3x4 {\n  return [\n    a[0] * b[0],\n    a[1] * b[0],\n    a[2] * b[0],\n    a[0] * b[1],\n    a[1] * b[1],\n    a[2] * b[1],\n    a[0] * b[2],\n    a[1] * b[2],\n    a[2] * b[2],\n    a[0] * b[3],\n    a[1] * b[3],\n    a[2] * b[3],\n  ]\n}\nexport function mulMat2x3ByVec2(a: Mat2x3, b: Vec2): Vec3 {\n  return [\n    a[0] * b[0] + a[1] * b[1],\n    a[2] * b[0] + a[3] * b[1],\n    a[4] * b[0] + a[5] * b[1],\n  ]\n}\nexport function mulMat2x3ByMat2(a: Mat2x3, b: Mat2): Mat3x2 {\n  return [\n    a[0] * b[0] + a[1] * b[2],\n    a[2] * b[0] + a[3] * b[2],\n    a[4] * b[0] + a[5] * b[2],\n    a[0] * b[1] + a[1] * b[3],\n    a[2] * b[1] + a[3] * b[3],\n    a[4] * b[1] + a[5] * b[3],\n  ]\n}\nexport function mulMat2x3ByMat3x2(a: Mat2x3, b: Mat3x2): Mat3 {\n  return [\n    a[0] * b[0] + a[1] * b[3],\n    a[2] * b[0] + a[3] * b[3],\n    a[4] * b[0] + a[5] * b[3],\n    a[0] * b[1] + a[1] * b[4],\n    a[2] * b[1] + a[3] * b[4],\n    a[4] * b[1] + a[5] * b[4],\n    a[0] * b[2] + a[1] * b[5],\n    a[2] * b[2] + a[3] * b[5],\n    a[4] * b[2] + a[5] * b[5],\n  ]\n}\nexport function mulMat2x3ByMat4x2(a: Mat2x3, b: Mat4x2): Mat3x4 {\n  return [\n    a[0] * b[0] + a[1] * b[4],\n    a[2] * b[0] + a[3] * b[4],\n    a[4] * b[0] + a[5] * b[4],\n    a[0] * b[1] + a[1] * b[5],\n    a[2] * b[1] + a[3] * b[5],\n    a[4] * b[1] + a[5] * b[5],\n    a[0] * b[2] + a[1] * b[6],\n    a[2] * b[2] + a[3] * b[6],\n    a[4] * b[2] + a[5] * b[6],\n    a[0] * b[3] + a[1] * b[7],\n    a[2] * b[3] + a[3] * b[7],\n    a[4] * b[3] + a[5] * b[7],\n  ]\n}\nexport function mulMat3ByVec3(a: Mat3, b: Vec3): Vec3 {\n  return [\n    a[0] * b[0] + a[1] * b[1] + a[2] * b[2],\n    a[3] * b[0] + a[4] * b[1] + a[5] * b[2],\n    a[6] * b[0] + a[7] * b[1] + a[8] * b[2],\n  ]\n}\nexport function mulMat3ByMat2x3(a: Mat3, b: Mat2x3): Mat3x2 {\n  return [\n    a[0] * b[0] + a[1] * b[2] + a[2] * b[4],\n    a[3] * b[0] + a[4] * b[2] + a[5] * b[4],\n    a[6] * b[0] + a[7] * b[2] + a[8] * b[4],\n    a[0] * b[1] + a[1] * b[3] + a[2] * b[5],\n    a[3] * b[1] + a[4] * b[3] + a[5] * b[5],\n    a[6] * b[1] + a[7] * b[3] + a[8] * b[5],\n  ]\n}\nexport function mulMat3(a: Mat3, b: Mat3): Mat3 {\n  return [\n    a[0] * b[0] + a[1] * b[3] + a[2] * b[6],\n    a[3] * b[0] + a[4] * b[3] + a[5] * b[6],\n    a[6] * b[0] + a[7] * b[3] + a[8] * b[6],\n    a[0] * b[1] + a[1] * b[4] + a[2] * b[7],\n    a[3] * b[1] + a[4] * b[4] + a[5] * b[7],\n    a[6] * b[1] + a[7] * b[4] + a[8] * b[7],\n    a[0] * b[2] + a[1] * b[5] + a[2] * b[8],\n    a[3] * b[2] + a[4] * b[5] + a[5] * b[8],\n    a[6] * b[2] + a[7] * b[5] + a[8] * b[8],\n  ]\n}\nexport function mulMat3ByMat4x3(a: Mat3, b: Mat4x3): Mat3x4 {\n  return [\n    a[0] * b[0] + a[1] * b[4] + a[2] * b[8],\n    a[3] * b[0] + a[4] * b[4] + a[5] * b[8],\n    a[6] * b[0] + a[7] * b[4] + a[8] * b[8],\n    a[0] * b[1] + a[1] * b[5] + a[2] * b[9],\n    a[3] * b[1] + a[4] * b[5] + a[5] * b[9],\n    a[6] * b[1] + a[7] * b[5] + a[8] * b[9],\n    a[0] * b[2] + a[1] * b[6] + a[2] * b[10],\n    a[3] * b[2] + a[4] * b[6] + a[5] * b[10],\n    a[6] * b[2] + a[7] * b[6] + a[8] * b[10],\n    a[0] * b[3] + a[1] * b[7] + a[2] * b[11],\n    a[3] * b[3] + a[4] * b[7] + a[5] * b[11],\n    a[6] * b[3] + a[7] * b[7] + a[8] * b[11],\n  ]\n}\nexport function mulMat4x3ByVec4(a: Mat4x3, b: Vec4): Vec3 {\n  return [\n    a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3],\n    a[4] * b[0] + a[5] * b[1] + a[6] * b[2] + a[7] * b[3],\n    a[8] * b[0] + a[9] * b[1] + a[10] * b[2] + a[11] * b[3],\n  ]\n}\nexport function mulMat4x3ByMat2x4(a: Mat4x3, b: Mat2x4): Mat3x2 {\n  return [\n    a[0] * b[0] + a[1] * b[2] + a[2] * b[4] + a[3] * b[6],\n    a[4] * b[0] + a[5] * b[2] + a[6] * b[4] + a[7] * b[6],\n    a[8] * b[0] + a[9] * b[2] + a[10] * b[4] + a[11] * b[6],\n    a[0] * b[1] + a[1] * b[3] + a[2] * b[5] + a[3] * b[7],\n    a[4] * b[1] + a[5] * b[3] + a[6] * b[5] + a[7] * b[7],\n    a[8] * b[1] + a[9] * b[3] + a[10] * b[5] + a[11] * b[7],\n  ]\n}\nexport function mulMat4x3ByMat3x4(a: Mat4x3, b: Mat3x4): Mat3 {\n  return [\n    a[0] * b[0] + a[1] * b[3] + a[2] * b[6] + a[3] * b[9],\n    a[4] * b[0] + a[5] * b[3] + a[6] * b[6] + a[7] * b[9],\n    a[8] * b[0] + a[9] * b[3] + a[10] * b[6] + a[11] * b[9],\n    a[0] * b[1] + a[1] * b[4] + a[2] * b[7] + a[3] * b[10],\n    a[4] * b[1] + a[5] * b[4] + a[6] * b[7] + a[7] * b[10],\n    a[8] * b[1] + a[9] * b[4] + a[10] * b[7] + a[11] * b[10],\n    a[0] * b[2] + a[1] * b[5] + a[2] * b[8] + a[3] * b[11],\n    a[4] * b[2] + a[5] * b[5] + a[6] * b[8] + a[7] * b[11],\n    a[8] * b[2] + a[9] * b[5] + a[10] * b[8] + a[11] * b[11],\n  ]\n}\nexport function mulMat4x3ByMat4(a: Mat4x3, b: Mat4): Mat3x4 {\n  return [\n    a[0] * b[0] + a[1] * b[4] + a[2] * b[8] + a[3] * b[12],\n    a[4] * b[0] + a[5] * b[4] + a[6] * b[8] + a[7] * b[12],\n    a[8] * b[0] + a[9] * b[4] + a[10] * b[8] + a[11] * b[12],\n    a[0] * b[1] + a[1] * b[5] + a[2] * b[9] + a[3] * b[13],\n    a[4] * b[1] + a[5] * b[5] + a[6] * b[9] + a[7] * b[13],\n    a[8] * b[1] + a[9] * b[5] + a[10] * b[9] + a[11] * b[13],\n    a[0] * b[2] + a[1] * b[6] + a[2] * b[10] + a[3] * b[14],\n    a[4] * b[2] + a[5] * b[6] + a[6] * b[10] + a[7] * b[14],\n    a[8] * b[2] + a[9] * b[6] + a[10] * b[10] + a[11] * b[14],\n    a[0] * b[3] + a[1] * b[7] + a[2] * b[11] + a[3] * b[15],\n    a[4] * b[3] + a[5] * b[7] + a[6] * b[11] + a[7] * b[15],\n    a[8] * b[3] + a[9] * b[7] + a[10] * b[11] + a[11] * b[15],\n  ]\n}\nexport function mulVec4ByScalar(a: Vec4, b: number): Vec4 {\n  return [a[0] * b[0], a[1] * b[0], a[2] * b[0], a[3] * b[0]]\n}\nexport function mulVec4ByVec2(a: Vec4, b: Vec2): Mat4x2 {\n  return [\n    a[0] * b[0],\n    a[1] * b[0],\n    a[2] * b[0],\n    a[3] * b[0],\n    a[0] * b[1],\n    a[1] * b[1],\n    a[2] * b[1],\n    a[3] * b[1],\n  ]\n}\nexport function mulVec4ByVec3(a: Vec4, b: Vec3): Mat4x3 {\n  return [\n    a[0] * b[0],\n    a[1] * b[0],\n    a[2] * b[0],\n    a[3] * b[0],\n    a[0] * b[1],\n    a[1] * b[1],\n    a[2] * b[1],\n    a[3] * b[1],\n    a[0] * b[2],\n    a[1] * b[2],\n    a[2] * b[2],\n    a[3] * b[2],\n  ]\n}\nexport function mulVec4ByVec4(a: Vec4, b: Vec4): Mat4 {\n  return [\n    a[0] * b[0],\n    a[1] * b[0],\n    a[2] * b[0],\n    a[3] * b[0],\n    a[0] * b[1],\n    a[1] * b[1],\n    a[2] * b[1],\n    a[3] * b[1],\n    a[0] * b[2],\n    a[1] * b[2],\n    a[2] * b[2],\n    a[3] * b[2],\n    a[0] * b[3],\n    a[1] * b[3],\n    a[2] * b[3],\n    a[3] * b[3],\n  ]\n}\nexport function mulMat2x4ByVec2(a: Mat2x4, b: Vec2): Vec4 {\n  return [\n    a[0] * b[0] + a[1] * b[1],\n    a[2] * b[0] + a[3] * b[1],\n    a[4] * b[0] + a[5] * b[1],\n    a[6] * b[0] + a[7] * b[1],\n  ]\n}\nexport function mulMat2x4ByMat2(a: Mat2x4, b: Mat2): Mat4x2 {\n  return [\n    a[0] * b[0] + a[1] * b[2],\n    a[2] * b[0] + a[3] * b[2],\n    a[4] * b[0] + a[5] * b[2],\n    a[6] * b[0] + a[7] * b[2],\n    a[0] * b[1] + a[1] * b[3],\n    a[2] * b[1] + a[3] * b[3],\n    a[4] * b[1] + a[5] * b[3],\n    a[6] * b[1] + a[7] * b[3],\n  ]\n}\nexport function mulMat2x4ByMat3x2(a: Mat2x4, b: Mat3x2): Mat4x3 {\n  return [\n    a[0] * b[0] + a[1] * b[3],\n    a[2] * b[0] + a[3] * b[3],\n    a[4] * b[0] + a[5] * b[3],\n    a[6] * b[0] + a[7] * b[3],\n    a[0] * b[1] + a[1] * b[4],\n    a[2] * b[1] + a[3] * b[4],\n    a[4] * b[1] + a[5] * b[4],\n    a[6] * b[1] + a[7] * b[4],\n    a[0] * b[2] + a[1] * b[5],\n    a[2] * b[2] + a[3] * b[5],\n    a[4] * b[2] + a[5] * b[5],\n    a[6] * b[2] + a[7] * b[5],\n  ]\n}\nexport function mulMat2x4ByMat4x2(a: Mat2x4, b: Mat4x2): Mat4 {\n  return [\n    a[0] * b[0] + a[1] * b[4],\n    a[2] * b[0] + a[3] * b[4],\n    a[4] * b[0] + a[5] * b[4],\n    a[6] * b[0] + a[7] * b[4],\n    a[0] * b[1] + a[1] * b[5],\n    a[2] * b[1] + a[3] * b[5],\n    a[4] * b[1] + a[5] * b[5],\n    a[6] * b[1] + a[7] * b[5],\n    a[0] * b[2] + a[1] * b[6],\n    a[2] * b[2] + a[3] * b[6],\n    a[4] * b[2] + a[5] * b[6],\n    a[6] * b[2] + a[7] * b[6],\n    a[0] * b[3] + a[1] * b[7],\n    a[2] * b[3] + a[3] * b[7],\n    a[4] * b[3] + a[5] * b[7],\n    a[6] * b[3] + a[7] * b[7],\n  ]\n}\nexport function mulMat3x4ByVec3(a: Mat3x4, b: Vec3): Vec4 {\n  return [\n    a[0] * b[0] + a[1] * b[1] + a[2] * b[2],\n    a[3] * b[0] + a[4] * b[1] + a[5] * b[2],\n    a[6] * b[0] + a[7] * b[1] + a[8] * b[2],\n    a[9] * b[0] + a[10] * b[1] + a[11] * b[2],\n  ]\n}\nexport function mulMat3x4ByMat2x3(a: Mat3x4, b: Mat2x3): Mat4x2 {\n  return [\n    a[0] * b[0] + a[1] * b[2] + a[2] * b[4],\n    a[3] * b[0] + a[4] * b[2] + a[5] * b[4],\n    a[6] * b[0] + a[7] * b[2] + a[8] * b[4],\n    a[9] * b[0] + a[10] * b[2] + a[11] * b[4],\n    a[0] * b[1] + a[1] * b[3] + a[2] * b[5],\n    a[3] * b[1] + a[4] * b[3] + a[5] * b[5],\n    a[6] * b[1] + a[7] * b[3] + a[8] * b[5],\n    a[9] * b[1] + a[10] * b[3] + a[11] * b[5],\n  ]\n}\nexport function mulMat3x4ByMat3(a: Mat3x4, b: Mat3): Mat4x3 {\n  return [\n    a[0] * b[0] + a[1] * b[3] + a[2] * b[6],\n    a[3] * b[0] + a[4] * b[3] + a[5] * b[6],\n    a[6] * b[0] + a[7] * b[3] + a[8] * b[6],\n    a[9] * b[0] + a[10] * b[3] + a[11] * b[6],\n    a[0] * b[1] + a[1] * b[4] + a[2] * b[7],\n    a[3] * b[1] + a[4] * b[4] + a[5] * b[7],\n    a[6] * b[1] + a[7] * b[4] + a[8] * b[7],\n    a[9] * b[1] + a[10] * b[4] + a[11] * b[7],\n    a[0] * b[2] + a[1] * b[5] + a[2] * b[8],\n    a[3] * b[2] + a[4] * b[5] + a[5] * b[8],\n    a[6] * b[2] + a[7] * b[5] + a[8] * b[8],\n    a[9] * b[2] + a[10] * b[5] + a[11] * b[8],\n  ]\n}\nexport function mulMat3x4ByMat4x3(a: Mat3x4, b: Mat4x3): Mat4 {\n  return [\n    a[0] * b[0] + a[1] * b[4] + a[2] * b[8],\n    a[3] * b[0] + a[4] * b[4] + a[5] * b[8],\n    a[6] * b[0] + a[7] * b[4] + a[8] * b[8],\n    a[9] * b[0] + a[10] * b[4] + a[11] * b[8],\n    a[0] * b[1] + a[1] * b[5] + a[2] * b[9],\n    a[3] * b[1] + a[4] * b[5] + a[5] * b[9],\n    a[6] * b[1] + a[7] * b[5] + a[8] * b[9],\n    a[9] * b[1] + a[10] * b[5] + a[11] * b[9],\n    a[0] * b[2] + a[1] * b[6] + a[2] * b[10],\n    a[3] * b[2] + a[4] * b[6] + a[5] * b[10],\n    a[6] * b[2] + a[7] * b[6] + a[8] * b[10],\n    a[9] * b[2] + a[10] * b[6] + a[11] * b[10],\n    a[0] * b[3] + a[1] * b[7] + a[2] * b[11],\n    a[3] * b[3] + a[4] * b[7] + a[5] * b[11],\n    a[6] * b[3] + a[7] * b[7] + a[8] * b[11],\n    a[9] * b[3] + a[10] * b[7] + a[11] * b[11],\n  ]\n}\nexport function mulMat4ByVec4(a: Mat4, b: Vec4): Vec4 {\n  return [\n    a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3],\n    a[4] * b[0] + a[5] * b[1] + a[6] * b[2] + a[7] * b[3],\n    a[8] * b[0] + a[9] * b[1] + a[10] * b[2] + a[11] * b[3],\n    a[12] * b[0] + a[13] * b[1] + a[14] * b[2] + a[15] * b[3],\n  ]\n}\nexport function mulMat4ByMat2x4(a: Mat4, b: Mat2x4): Mat4x2 {\n  return [\n    a[0] * b[0] + a[1] * b[2] + a[2] * b[4] + a[3] * b[6],\n    a[4] * b[0] + a[5] * b[2] + a[6] * b[4] + a[7] * b[6],\n    a[8] * b[0] + a[9] * b[2] + a[10] * b[4] + a[11] * b[6],\n    a[12] * b[0] + a[13] * b[2] + a[14] * b[4] + a[15] * b[6],\n    a[0] * b[1] + a[1] * b[3] + a[2] * b[5] + a[3] * b[7],\n    a[4] * b[1] + a[5] * b[3] + a[6] * b[5] + a[7] * b[7],\n    a[8] * b[1] + a[9] * b[3] + a[10] * b[5] + a[11] * b[7],\n    a[12] * b[1] + a[13] * b[3] + a[14] * b[5] + a[15] * b[7],\n  ]\n}\nexport function mulMat4ByMat3x4(a: Mat4, b: Mat3x4): Mat4x3 {\n  return [\n    a[0] * b[0] + a[1] * b[3] + a[2] * b[6] + a[3] * b[9],\n    a[4] * b[0] + a[5] * b[3] + a[6] * b[6] + a[7] * b[9],\n    a[8] * b[0] + a[9] * b[3] + a[10] * b[6] + a[11] * b[9],\n    a[12] * b[0] + a[13] * b[3] + a[14] * b[6] + a[15] * b[9],\n    a[0] * b[1] + a[1] * b[4] + a[2] * b[7] + a[3] * b[10],\n    a[4] * b[1] + a[5] * b[4] + a[6] * b[7] + a[7] * b[10],\n    a[8] * b[1] + a[9] * b[4] + a[10] * b[7] + a[11] * b[10],\n    a[12] * b[1] + a[13] * b[4] + a[14] * b[7] + a[15] * b[10],\n    a[0] * b[2] + a[1] * b[5] + a[2] * b[8] + a[3] * b[11],\n    a[4] * b[2] + a[5] * b[5] + a[6] * b[8] + a[7] * b[11],\n    a[8] * b[2] + a[9] * b[5] + a[10] * b[8] + a[11] * b[11],\n    a[12] * b[2] + a[13] * b[5] + a[14] * b[8] + a[15] * b[11],\n  ]\n}\nexport function mulMat4(a: Mat4, b: Mat4): Mat4 {\n  return [\n    a[0] * b[0] + a[1] * b[4] + a[2] * b[8] + a[3] * b[12],\n    a[4] * b[0] + a[5] * b[4] + a[6] * b[8] + a[7] * b[12],\n    a[8] * b[0] + a[9] * b[4] + a[10] * b[8] + a[11] * b[12],\n    a[12] * b[0] + a[13] * b[4] + a[14] * b[8] + a[15] * b[12],\n    a[0] * b[1] + a[1] * b[5] + a[2] * b[9] + a[3] * b[13],\n    a[4] * b[1] + a[5] * b[5] + a[6] * b[9] + a[7] * b[13],\n    a[8] * b[1] + a[9] * b[5] + a[10] * b[9] + a[11] * b[13],\n    a[12] * b[1] + a[13] * b[5] + a[14] * b[9] + a[15] * b[13],\n    a[0] * b[2] + a[1] * b[6] + a[2] * b[10] + a[3] * b[14],\n    a[4] * b[2] + a[5] * b[6] + a[6] * b[10] + a[7] * b[14],\n    a[8] * b[2] + a[9] * b[6] + a[10] * b[10] + a[11] * b[14],\n    a[12] * b[2] + a[13] * b[6] + a[14] * b[10] + a[15] * b[14],\n    a[0] * b[3] + a[1] * b[7] + a[2] * b[11] + a[3] * b[15],\n    a[4] * b[3] + a[5] * b[7] + a[6] * b[11] + a[7] * b[15],\n    a[8] * b[3] + a[9] * b[7] + a[10] * b[11] + a[11] * b[15],\n    a[12] * b[3] + a[13] * b[7] + a[14] * b[11] + a[15] * b[15],\n  ]\n}\n\nexport function add2(a: Vec2, b: Vec2): Vec2 {\n  return [a[0] + b[0], a[1] + b[1]]\n}\nexport function add3(a: Vec3, b: Vec3): Vec3 {\n  return [a[0] + b[0], a[1] + b[1], a[2] + b[2]]\n}\nexport function add4(a: Vec4, b: Vec4): Vec4 {\n  return [a[0] + b[0], a[1] + b[1], a[2] + b[2], a[3] + b[3]]\n}\nexport function mul2(a: Vec2, b: Vec2): Vec2 {\n  return [a[0] * b[0], a[1] * b[1]]\n}\nexport function mul3(a: Vec3, b: Vec3): Vec3 {\n  return [a[0] * b[0], a[1] * b[1], a[2] * b[2]]\n}\nexport function mul4(a: Vec4, b: Vec4): Vec4 {\n  return [a[0] * b[0], a[1] * b[1], a[2] * b[2], a[3] * b[3]]\n}\nexport function div2(a: Vec2, b: Vec2): Vec2 {\n  return [a[0] / b[0], a[1] / b[1]]\n}\nexport function div3(a: Vec3, b: Vec3): Vec3 {\n  return [a[0] / b[0], a[1] / b[1], a[2] / b[2]]\n}\nexport function div4(a: Vec4, b: Vec4): Vec4 {\n  return [a[0] / b[0], a[1] / b[1], a[2] / b[2], a[3] / b[3]]\n}\nexport function sub2(a: Vec2, b: Vec2): Vec2 {\n  return [a[0] - b[0], a[1] - b[1]]\n}\nexport function sub3(a: Vec3, b: Vec3): Vec3 {\n  return [a[0] - b[0], a[1] - b[1], a[2] - b[2]]\n}\nexport function sub4(a: Vec4, b: Vec4): Vec4 {\n  return [a[0] - b[0], a[1] - b[1], a[2] - b[2], a[3] - b[3]]\n}\nexport function neg2(a: Vec2): Vec2 {\n  return [-a[0], -a[1]]\n}\nexport function neg3(a: Vec3): Vec3 {\n  return [-a[0], -a[1], -a[2]]\n}\nexport function neg4(a: Vec4): Vec4 {\n  return [-a[0], -a[1], -a[2], -a[3]]\n}\nexport function normalize2(a: Vec2): Vec2 {\n  return scale2(a, 1 / Math.sqrt(dot2(a, a)))\n}\nexport function normalize3(a: Vec3): Vec3 {\n  return scale3(a, 1 / Math.sqrt(dot3(a, a)))\n}\nexport function normalize4(a: Vec4): Vec4 {\n  return scale4(a, 1 / Math.sqrt(dot4(a, a)))\n}\nexport function sum2(a: Vec2): number {\n  return a[0] + a[1]\n}\nexport function sum3(a: Vec3): number {\n  return a[0] + a[1] + a[2]\n}\nexport function sum4(a: Vec4): number {\n  return a[0] + a[1] + a[2] + a[3]\n}\nexport function dot2(a: Vec2, b: Vec2): number {\n  return sum2(mul2(a, b))\n}\nexport function dot3(a: Vec3, b: Vec3): number {\n  return sum3(mul3(a, b))\n}\nexport function dot4(a: Vec4, b: Vec4): number {\n  return sum4(mul4(a, b))\n}\nexport function scale2(a: Vec2, b: number): Vec2 {\n  return [a[0] * b, a[1] * b]\n}\nexport function scale3(a: Vec3, b: number): Vec3 {\n  return [a[0] * b, a[1] * b, a[2] * b]\n}\nexport function scale4(a: Vec4, b: number): Vec4 {\n  return [a[0] * b, a[1] * b, a[2] * b, a[3] * b]\n}\n", "import { add3, dot3, Mat4, scale3, Vec2, Vec3, Vec4 } from \"../math/vector\";\n\ntype MeshAttrs = Record<string, [number] | Vec2 | Vec3 | Vec4>;\n\ntype Mesh<T extends MeshAttrs> = T[];\n\nexport function parametric2D<T extends string>(\n  x: number,\n  y: number,\n  attr: T,\n  getPoint: (i: number, y: number) => Vec3\n): Mesh<{ [K in T]: Vec3 }> {\n  const data: Mesh<{ [K in T]: Vec3 }> = [];\n  for (let j = 0; j < y; j++) {\n    for (let i = 0; i < x; i++) {\n      const a = getPoint(i, j);\n      const b = getPoint(i + 1, j);\n      const c = getPoint(i, j + 1);\n      const d = getPoint(i + 1, j + 1);\n      // @ts-expect-error\n      data.push({ [attr]: a });\n      // @ts-expect-error\n      data.push({ [attr]: c });\n      // @ts-expect-error\n      data.push({ [attr]: b });\n      // @ts-expect-error\n      data.push({ [attr]: c });\n      // @ts-expect-error\n      data.push({ [attr]: d });\n      // @ts-expect-error\n      data.push({ [attr]: b });\n    }\n  }\n  return data;\n}\n\nexport function uvSphere<T extends string>(\n  x: number,\n  y: number,\n  rad: number,\n  attr: T\n): Mesh<{ [K in T]: Vec3 }> {\n  return parametric2D<T>(x, y, attr, (i, j) => {\n    const a = (((i + x) % x) / x) * Math.PI * 2;\n    const b = (((j + y) % y) / y) * Math.PI - Math.PI / 2;\n\n    let px = Math.cos(a) * Math.cos(b) * rad;\n    let pz = Math.sin(a) * Math.cos(b) * rad;\n    let py = Math.sin(b) * rad;\n    return [px, py, pz];\n  });\n}\n\nexport function ring<T extends string>(\n  x: number,\n  rad: number,\n  height: number,\n  attr: T\n): Mesh<{ [K in T]: Vec3 }> {\n  return parametric2D<T>(x, 1, attr, (i, j) => {\n    const a = (((i + x) % x) / x) * Math.PI * 2;\n    const px = Math.cos(a) * rad;\n    const pz = Math.sin(a) * rad;\n    const py = j === 1 ? height / 2 : -height / 2;\n    return [px, py, pz];\n  });\n}\n\nexport function torus<T extends string>(\n  x: number,\n  y: number,\n  R: number,\n  r: number,\n  attr: T\n): Mesh<{ [K in T]: Vec3 }> {\n  return parametric2D<T>(x, y, attr, (i, j) => {\n    const a = (((i + x) % x) / x) * Math.PI * 2;\n    const b = (((j + y) % y) / y) * Math.PI * 2;\n    let px = Math.cos(a);\n    let pz = Math.sin(a);\n    let py = Math.sin(b) * r;\n    px *= R + Math.cos(b) * r;\n    pz *= R + Math.cos(b) * r;\n    return [px, py, pz];\n  });\n}\n\nexport function move<T extends MeshAttrs>(\n  mesh: Mesh<T>,\n  attr: keyof T,\n  offset: number[]\n): Mesh<T> {\n  return mesh.map((m) => ({\n    ...m,\n    [attr]: m[attr].map((e, i) => e + offset[i]),\n  }));\n}\n\nexport function perspective(\n  fieldOfViewInRadians: number,\n  aspectRatio: number,\n  near: number,\n  far: number\n): Mat4 {\n  const f = 1.0 / Math.tan(fieldOfViewInRadians / 2);\n  const rangeInv = 1 / (near - far);\n\n  return [\n    f / aspectRatio,\n    0,\n    0,\n    0,\n    0,\n    f,\n    0,\n    0,\n    0,\n    0,\n    (near + far) * rangeInv,\n    -1,\n    0,\n    0,\n    near * far * rangeInv * 2,\n    0,\n  ];\n}\n\nexport function ortho(\n  left: number,\n  right: number,\n  top: number,\n  bottom: number,\n  near: number,\n  far: number\n): Mat4 {\n  return [\n    2 / (right - left),\n    0,\n    0,\n    -(right + left) / (right - left),\n    0,\n    2 / (top - bottom),\n    0,\n    -(top + bottom) / (top - bottom),\n    0,\n    0,\n    -2 / (far - near),\n    -(far + near) / (far - near),\n    0,\n    0,\n    0,\n    1,\n  ];\n}\n\nexport function cross(a: Vec3, b: Vec3): Vec3 {\n  return [\n    a[1] * b[2] - a[2] * b[1],\n    a[2] * b[0] - a[0] * b[2],\n    a[0] * b[1] - a[1] * b[0],\n  ];\n}\n\nfunction normalize(v: Vec3): Vec3 {\n  const len = Math.hypot(...v);\n  return scale3(v, 1 / len);\n}\n\nexport function rodrigues(v: Vec3, k: Vec3, theta: number): Vec3 {\n  k = normalize(k);\n  return add3(\n    add3(scale3(v, Math.cos(theta)), scale3(cross(k, v), Math.sin(theta))),\n    scale3(k, dot3(k, v) * (1 - Math.cos(theta)))\n  );\n}\n\nexport function rotate(axis: Vec3, angle: number): Mat4 {\n  return [\n    ...rodrigues([1, 0, 0], axis, angle),\n    0,\n    ...rodrigues([0, 1, 0], axis, angle),\n    0,\n    ...rodrigues([0, 0, 1], axis, angle),\n    0,\n    0,\n    0,\n    0,\n    1,\n  ];\n}\n\nexport function scale(axes: Vec3): Mat4 {\n  return [axes[0], 0, 0, 0, 0, axes[1], 0, 0, 0, 0, axes[2], 0, 0, 0, 0, 1];\n}\n\nexport function translate(v: Vec3): Mat4 {\n  return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, ...v, 1];\n}\n", "import ComputeWGSLJson from \"compute.wgsl\";\r\nimport {\r\n  Mat2,\r\n  Mat2x3,\r\n  Mat2x4,\r\n  Mat3,\r\n  Mat3x2,\r\n  Mat3x4,\r\n  Mat4,\r\n  Mat4x2,\r\n  Mat4x3,\r\n  Vec2,\r\n  Vec3,\r\n  Vec4,\r\n} from \"../r628/src\";\r\n\r\ntype FromEntries<Entries extends [string | symbol | number, any][]> =\r\n  Entries extends [\r\n    infer Head extends [string | number | symbol, any],\r\n    ...infer Tail extends [string | number | symbol, any][]\r\n  ]\r\n    ? { [K in Head[0]]: Head[1] } & FromEntries<Tail>\r\n    : {};\r\n\r\ntype Test = FromEntries<[[\"a\", 1], [\"b\", 2]]>;\r\n\r\ntype ParseUniformPrimitive<T extends string> = T extends `mat2x2${string}`\r\n  ? Mat2\r\n  : T extends `mat3x3${string}`\r\n  ? Mat3\r\n  : T extends `mat4x4${string}`\r\n  ? Mat4\r\n  : T extends `mat3x4${string}`\r\n  ? Mat3x4\r\n  : T extends `mat4x3${string}`\r\n  ? Mat4x3\r\n  : T extends `mat2x4${string}`\r\n  ? Mat2x4\r\n  : T extends `mat4x2${string}`\r\n  ? Mat4x2\r\n  : T extends `mat2x3${string}`\r\n  ? Mat2x3\r\n  : T extends `mat3x2${string}`\r\n  ? Mat3x2\r\n  : T extends `mat2${string}`\r\n  ? Mat2\r\n  : T extends `mat3${string}`\r\n  ? Mat3\r\n  : T extends `mat4${string}`\r\n  ? Mat4\r\n  : T extends `vec4${string}`\r\n  ? Vec4\r\n  : T extends `vec3${string}`\r\n  ? Vec3\r\n  : T extends `vec2${string}`\r\n  ? Vec2\r\n  : number;\r\n\r\ntype StaticArray<I extends number, T> = I extends 0\r\n  ? []\r\n  : I extends 1\r\n  ? [T]\r\n  : I extends 2\r\n  ? [T, T]\r\n  : I extends 3\r\n  ? [T, T, T]\r\n  : I extends 4\r\n  ? [T, T, T, T]\r\n  : I extends 5\r\n  ? [T, T, T, T, T]\r\n  : I extends 6\r\n  ? [T, T, T, T, T, T]\r\n  : I extends 7\r\n  ? [T, T, T, T, T, T, T]\r\n  : T[];\r\n\r\n// type ParseUniformStructMembers<\r\n//   T extends { name: string; type: Record<any, any> }[]\r\n// > = T extends [\r\n//   infer Head extends { name: string; type: Record<any, any> },\r\n//   ...infer Tail extends { name: string; type: Record<any, any> }[]\r\n// ]\r\n//   ? [\r\n//       [Head[\"name\"], ParseUniform<Head[\"type\"]>],\r\n//       ...ParseUniformStructMembers<Tail>\r\n//     ]\r\n//   : [];\r\n\r\ntype FormatName = \"f32\" | \"i32\" | \"u32\" | \"f16\";\r\n\r\nfunction getWgslPrimitiveDatatype(\r\n  typename: string,\r\n  formatname: FormatName | undefined\r\n): FormatName {\r\n  // handle vec2<f32> and stuff like that\r\n  if (formatname) return formatname;\r\n\r\n  // scalar types\r\n  if (\r\n    typename === \"f32\" ||\r\n    typename === \"i32\" ||\r\n    typename === \"u32\" ||\r\n    typename === \"f16\"\r\n  )\r\n    return typename;\r\n\r\n  // vectors\r\n  if (typename.startsWith(\"vec\") || typename.startsWith(\"mat\")) {\r\n    if (typename.endsWith(\"i\")) {\r\n      return \"i32\";\r\n    } else if (typename.endsWith(\"u\")) {\r\n      return \"u32\";\r\n    } else if (typename.endsWith(\"h\")) {\r\n      return \"f16\";\r\n    }\r\n  }\r\n\r\n  // default to f32\r\n  return \"f32\";\r\n}\r\n\r\nfunction getWgslPrimitiveSize(typename: string) {\r\n  if (typename.startsWith(\"vec2\")) return 2;\r\n  if (typename.startsWith(\"vec3\")) return 3;\r\n  if (typename.startsWith(\"vec4\")) return 4;\r\n\r\n  if (typename.startsWith(\"mat2\")) return 4;\r\n  if (typename.startsWith(\"mat3\")) return 9;\r\n  if (typename.startsWith(\"mat4\")) return 16;\r\n\r\n  if (typename.startsWith(\"mat2x3\")) return 6;\r\n  if (typename.startsWith(\"mat3x2\")) return 6;\r\n\r\n  if (typename.startsWith(\"mat2x4\")) return 8;\r\n  if (typename.startsWith(\"mat4x2\")) return 8;\r\n\r\n  if (typename.startsWith(\"mat3x4\")) return 12;\r\n  if (typename.startsWith(\"mat4x3\")) return 12;\r\n\r\n  return 1;\r\n}\r\n\r\nfunction setWgslPrimitive(\r\n  typename: string,\r\n  formatname: string | undefined,\r\n  view: DataView,\r\n  offset: number,\r\n  data: number[]\r\n) {\r\n  const datatype = getWgslPrimitiveDatatype(typename, formatname as FormatName);\r\n  const size = getWgslPrimitiveSize(typename);\r\n\r\n  let stride = {\r\n    i32: 4,\r\n    f32: 4,\r\n    u32: 4,\r\n    f16: 2,\r\n  }[datatype] as number;\r\n\r\n  let method = {\r\n    i32: \"setInt32\",\r\n    f32: \"setFloat32\",\r\n    u32: \"setUint32\",\r\n    f16: \"setFloat16\",\r\n  }[datatype] as \"setInt32\" | \"setFloat32\" | \"setUint32\" | \"setFloat16\";\r\n\r\n  for (let i = 0; i < size; i++) {\r\n    view[method](offset + stride * i, data[i], true);\r\n  }\r\n}\r\n\r\ntype FromUniformStructEntries<\r\n  Entries extends { name: string; type: Record<any, any> }[]\r\n> = Entries extends [\r\n  infer Head extends { name: string; type: Record<any, any> },\r\n  ...infer Tail extends { name: string; type: Record<any, any> }[]\r\n]\r\n  ? {\r\n      [K in Head[\"name\"]]: ParseUniform<Head[\"type\"]>;\r\n    } & FromUniformStructEntries<Tail>\r\n  : {};\r\n\r\ntype ParseUniform<T extends Record<any, any>> = T[\"members\"] extends {\r\n  name: string;\r\n  type: Record<any, any>;\r\n}[]\r\n  ? FromUniformStructEntries<T[\"members\"]>\r\n  : T[\"name\"] extends string\r\n  ? T[\"name\"] extends \"array\"\r\n    ? StaticArray<T[\"count\"], ParseUniform<T[\"format\"]>>\r\n    : ParseUniformPrimitive<T[\"name\"]>\r\n  : never;\r\n\r\ntype ASDASD = ParseUniform<\r\n  (typeof ComputeWGSLJson)[\"bindGroups\"][0][1][\"type\"]\r\n>;\r\nfunction generateUniformBufferInner<Spec extends Record<any, any>>(\r\n  spec: Spec,\r\n  values: any,\r\n  view: DataView,\r\n  offset: number\r\n) {\r\n  if (spec.members) {\r\n    for (const m of spec.members)\r\n      generateUniformBufferInner(\r\n        m.type,\r\n        values[m.name],\r\n        view,\r\n        offset + m.offset\r\n      );\r\n    return;\r\n  }\r\n\r\n  const typename = spec.name as string;\r\n\r\n  if (typename === \"array\") {\r\n    for (let i = 0; i < spec.count; i++) {\r\n      generateUniformBufferInner(\r\n        spec.format,\r\n        values[i],\r\n        view,\r\n        offset + spec.stride * i\r\n      );\r\n    }\r\n  } else {\r\n    setWgslPrimitive(\r\n      spec.name,\r\n      spec.format?.name,\r\n      view,\r\n      offset,\r\n      Array.isArray(values) ? values : [values]\r\n    );\r\n  }\r\n}\r\n\r\nexport function generateUniformBuffer<Spec>(\r\n  spec: Spec & { size: number },\r\n  values: ParseUniform<Spec>\r\n): ArrayBuffer {\r\n  const buf = new ArrayBuffer(spec.size);\r\n  const view = new DataView(buf);\r\n  generateUniformBufferInner<Spec>(spec, values, view, 0);\r\n  return buf;\r\n}\r\n\r\nexport function makeUniformBuffer<\r\n  Spec extends Record<any, any>,\r\n  Group extends number,\r\n  Binding extends number\r\n>(\r\n  spec: Spec,\r\n  group: Group,\r\n  binding: Binding,\r\n  data: ParseUniform<Spec[\"bindGroups\"][Group][Binding][\"type\"]>\r\n) {\r\n  return generateUniformBuffer(spec.bindGroups[group][binding].type, data);\r\n}\r\n", "struct VSInput {\r\n  @builtin(vertex_index) vertexIndex: u32,\r\n}\r\n\r\nstruct VSOutput {\r\n  @builtin(position) position: vec4f,\r\n  @location(0) uv: vec2f,\r\n}\r\n\r\n@group(0) @binding(0) var samp : sampler;\r\n@group(0) @binding(1) var tex : texture_2d_array<f32>;\r\n\r\n@vertex\r\nfn VSMain(input: VSInput) -> VSOutput {\r\n  var vsOut: VSOutput;\r\n\r\n  vsOut.position = vec4(array(\r\n    vec2( 1.0,  1.0),\r\n    vec2( 1.0, -1.0),\r\n    vec2(-1.0, -1.0),\r\n    vec2( 1.0,  1.0),\r\n    vec2(-1.0, -1.0),\r\n    vec2(-1.0,  1.0),\r\n  )[input.vertexIndex], 0.5, 1.0);\r\n\r\n  vsOut.uv = array(\r\n    vec2(1.0, 0.0),\r\n    vec2(1.0, 1.0),\r\n    vec2(0.0, 1.0),\r\n    vec2(1.0, 0.0),\r\n    vec2(0.0, 1.0),\r\n    vec2(0.0, 0.0),\r\n  )[input.vertexIndex];\r\n\r\n  return vsOut;\r\n}\r\n\r\n@fragment\r\nfn FSMain(@location(0) uv: vec2f) -> @location(0) vec4f {\r\n  let pos = textureSample(tex, samp, uv, 1u);\r\n  return textureSample(tex, samp, uv, 0u);\r\n  // return vec4f(uv, 0.0, 1.0);\r\n}", "import BlitToScreen from \"./blit-to-screen.wgsl?raw\";\r\n\r\nconst canvas = document.createElement(\"canvas\");\r\ncanvas.width = 1024;\r\ncanvas.height = 1024;\r\ndocument.body.appendChild(canvas);\r\n\r\nexport function initBlitToScreen(device: GPUDevice, tex: GPUTexture) {\r\n  const ctx = canvas.getContext(\"webgpu\");\r\n\r\n  const presentationFormat = navigator.gpu.getPreferredCanvasFormat();\r\n\r\n  ctx.configure({\r\n    device,\r\n    format: presentationFormat,\r\n  });\r\n\r\n  const bindGroupLayout = device.createBindGroupLayout({\r\n    entries: [\r\n      {\r\n        binding: 0,\r\n        sampler: { type: \"non-filtering\" },\r\n        visibility: GPUShaderStage.FRAGMENT,\r\n      },\r\n      {\r\n        binding: 1,\r\n        texture: {\r\n          sampleType: \"unfilterable-float\",\r\n          viewDimension: \"2d-array\",\r\n        },\r\n        visibility: GPUShaderStage.FRAGMENT,\r\n      },\r\n    ],\r\n  });\r\n\r\n  const blitToScreenPipeline = device.createRenderPipeline({\r\n    layout: device.createPipelineLayout({\r\n      bindGroupLayouts: [bindGroupLayout],\r\n    }),\r\n    vertex: {\r\n      module: device.createShaderModule({\r\n        code: BlitToScreen,\r\n      }),\r\n    },\r\n    fragment: {\r\n      module: device.createShaderModule({\r\n        code: BlitToScreen,\r\n      }),\r\n      targets: [{ format: presentationFormat }],\r\n    },\r\n    primitive: {\r\n      topology: \"triangle-list\",\r\n    },\r\n  });\r\n\r\n  const sampler = device.createSampler({\r\n    minFilter: \"nearest\",\r\n    magFilter: \"nearest\",\r\n  });\r\n\r\n  const bindGroup = device.createBindGroup({\r\n    layout: bindGroupLayout,\r\n    entries: [\r\n      {\r\n        binding: 0,\r\n        resource: sampler,\r\n      },\r\n      { binding: 1, resource: tex },\r\n    ],\r\n  });\r\n\r\n  return () => {\r\n    const commandEncoder = device.createCommandEncoder();\r\n\r\n    const passEncoder = commandEncoder.beginRenderPass({\r\n      colorAttachments: [\r\n        {\r\n          view: ctx.getCurrentTexture().createView(),\r\n          clearValue: [0, 0, 0, 1],\r\n          loadOp: \"clear\",\r\n          storeOp: \"store\",\r\n        },\r\n      ],\r\n    });\r\n\r\n    passEncoder.setPipeline(blitToScreenPipeline);\r\n    passEncoder.setBindGroup(0, bindGroup);\r\n    passEncoder.draw(6);\r\n    passEncoder.end();\r\n    device.queue.submit([commandEncoder.finish()]);\r\n  };\r\n}\r\n", "struct B {\r\n  test: array<vec4u, 4>,\r\n}\r\n\r\nstruct Params {\r\n  size: vec2<u32>,\r\n  rand: vec2f,\r\n  transformInv: mat4x4f,\r\n  transform: mat4x4f,\r\n  lastTransformInverse: mat4x4f,\r\n  lastTransform: mat4x4f,\r\n  brightnessFactor: f32\r\n}\r\n\r\n@group(0) @binding(0) var tex: texture_storage_2d_array<rgba32float, write>;\r\n@group(0) @binding(1) var prevTex: texture_storage_2d_array<rgba32float, read>;\r\n\r\n@group(1) @binding(0) var<uniform> params : Params;\r\n@group(1) @binding(1) var smpl : sampler;\r\n\r\n\r\nfn rand(co: vec2f) -> f32 {\r\n  return fract(sin(dot(co, vec2f(12.9898, 78.233))) * 43758.5453); \r\n}\r\n\r\n@compute @workgroup_size(8, 8, 1) fn computeSomething(\r\n  @builtin(global_invocation_id) id: vec3<u32>\r\n) {\r\n\r\n  _ = smpl;\r\n\r\n  var value: vec3f = vec3f(0.0);\r\n\r\n  let idnorm = vec2f(id.xy) / vec2f(params.size.xy);\r\n\r\n  let fractpos = idnorm + vec2f(0.0, 0.0) / vec2f(params.size.xy);\r\n\r\n\r\n      var originalPos = (vec4f(0.0, 0.0, 0.0, 1.0) * params.transform).xyz;\r\n      var pos = originalPos;\r\n      var originalDir = (\r\n        vec4(normalize(vec3f(fractpos * 2.0 - 1.0, 1.0)), 0.0) \r\n        * params.transform\r\n      ).xyz;\r\n      var dir = originalDir;\r\n      \r\n      var normal: vec3f;\r\n      var didHit: bool;\r\n      var emission = vec3f(0.0);\r\n      let lightdir = normalize(vec3f(1.0, 1.0, -1.0));\r\n      var totaldist = 0.0;\r\n\r\n      for (var i = 0u; i < 4u; i++) {\r\n        let hit = marchRay(pos, dir, 128u);\r\n        totaldist += distance(pos, hit.pos);\r\n        pos = hit.pos + hit.normal * 0.001;\r\n        dir = reflect(dir, normalize(\r\n          hit.normal + vec3f(\r\n            rand(idnorm + params.rand),\r\n            rand(idnorm + params.rand + 1.0),\r\n            rand(idnorm + params.rand + 2.0)\r\n          ) * 0.1 - 0.05\r\n        ));\r\n        normal = hit.normal;\r\n        didHit = hit.hit;\r\n        emission += abs(dot(lightdir, normal)) * pow(0.5, f32(i) + 1.0);\r\n        value += vec3(0.5) * pow(0.5, f32(i)) * max(0.0, dot(normal, dir));\r\n      }\r\n\r\n\r\n  let fwdpos = originalPos + originalDir * totaldist;\r\n\r\n  let posInCurrentFramePerspective = vec4f(fwdpos, 1.0) * params.transformInv;\r\n  let posInLastFramePerspective = vec4f(fwdpos, 1.0) * params.lastTransformInverse;\r\n  let lastFrameCoords = posInLastFramePerspective.xy / posInLastFramePerspective.z;\r\n  let lastFrameUV = lastFrameCoords * 0.5 + 0.5;\r\n  let preverr = textureLoad(prevTex, id.xy, 2u).xy;\r\n\r\n  let reprojOffset = \r\n    modf(\r\n      (lastFrameUV - fractpos) * vec2f(params.size.xy)\r\n      + vec2(0.5, 0.5) * 0.0 \r\n      + preverr\r\n    ); \r\n  \r\n  let reprojSamplePos = vec2i(\r\n    vec2f(id.xy) + reprojOffset.whole\r\n  );\r\n\r\n  let prevcol = textureLoad(prevTex, reprojSamplePos, 0u);\r\n  let prevpos = textureLoad(prevTex, reprojSamplePos, 1u);\r\n\r\n  var reprojFactor = 1.0 / clamp(prevpos.w, 1.0, 30.0);\r\n\r\n  let reprojFailed = \r\n    abs(length(prevpos.xyz - fwdpos)) > 0.2\r\n    || reprojSamplePos.x >= i32(params.size.x)\r\n    || reprojSamplePos.y >= i32(params.size.y)\r\n    || reprojSamplePos.x < 0 \r\n    || reprojSamplePos.y < 0;\r\n\r\n  if (\r\n    reprojFailed\r\n  ) {\r\n    reprojFactor = 1.0;\r\n  }\r\n\r\n  let currColor = vec4f(value / 1.0, 1.0);\r\n  let mixColor = mix(prevcol, currColor, reprojFactor);\r\n  // let mixColor = prevcol + currColor;\r\n\r\n  textureStore(tex, id.xy, 0u, mixColor);\r\n  textureStore(tex, id.xy, 1u, vec4f(\r\n    fwdpos,\r\n    select(prevpos.w + 1.0, 0.0, reprojFailed)\r\n  ));\r\n  textureStore(tex, id.xy, 2u, vec4f(reprojOffset.fract, 0.0, 0.0));\r\n}\r\n\r\nstruct HitInfo {\r\n  hit: bool,\r\n  pos: vec3f,\r\n  normal: vec3f,\r\n}\r\n\r\nfn marchRay(\r\n  pos: vec3f,\r\n  dir: vec3f,\r\n  iters: u32\r\n) -> HitInfo {\r\n  var posTemp = pos;\r\n  for (var i = 0u; i < iters; i++) {\r\n    let dist = sdf(posTemp);\r\n    posTemp += dir * dist;\r\n  }\r\n\r\n  let distSample = sdf(posTemp);\r\n\r\n  let normal = normalize(vec3f(\r\n    sdf(posTemp + vec3f(0.01, 0.0, 0.0)) - distSample,\r\n    sdf(posTemp + vec3f(0.0, 0.01, 0.0)) - distSample,\r\n    sdf(posTemp + vec3f(0.0, 0.0, 0.01)) - distSample,\r\n  ));\r\n\r\n  return HitInfo(\r\n    distSample < 0.01,\r\n    posTemp,\r\n    normal,\r\n  );\r\n}\r\n\r\n// MARCH_FUNCTION ", "{\"bindGroups\":[[{\"name\":\"tex\",\"type\":{\"name\":\"texture_storage_2d_array\",\"attributes\":[{\"id\":131124,\"line\":15,\"name\":\"group\",\"value\":\"0\"},{\"id\":131125,\"line\":15,\"name\":\"binding\",\"value\":\"0\"}],\"size\":0,\"format\":{\"name\":\"rgba32float\",\"attributes\":null,\"size\":0},\"access\":\"write\"},\"group\":0,\"binding\":0,\"attributes\":[{\"id\":131124,\"line\":15,\"name\":\"group\",\"value\":\"0\"},{\"id\":131125,\"line\":15,\"name\":\"binding\",\"value\":\"0\"}],\"resourceType\":4,\"access\":\"read\"},{\"name\":\"prevTex\",\"type\":{\"name\":\"texture_storage_2d_array\",\"attributes\":[{\"id\":131128,\"line\":16,\"name\":\"group\",\"value\":\"0\"},{\"id\":131129,\"line\":16,\"name\":\"binding\",\"value\":\"1\"}],\"size\":0,\"format\":{\"name\":\"rgba32float\",\"attributes\":null,\"size\":0},\"access\":\"read\"},\"group\":0,\"binding\":1,\"attributes\":[{\"id\":131128,\"line\":16,\"name\":\"group\",\"value\":\"0\"},{\"id\":131129,\"line\":16,\"name\":\"binding\",\"value\":\"1\"}],\"resourceType\":4,\"access\":\"read\"}],[{\"name\":\"params\",\"type\":{\"name\":\"Params\",\"attributes\":null,\"size\":288,\"members\":[{\"name\":\"size\",\"type\":{\"name\":\"vec2\",\"attributes\":null,\"size\":8,\"format\":{\"name\":\"u32\",\"attributes\":null,\"size\":4},\"access\":null},\"attributes\":null,\"offset\":0,\"size\":8},{\"name\":\"rand\",\"type\":{\"name\":\"vec2f\",\"attributes\":null,\"size\":8},\"attributes\":null,\"offset\":8,\"size\":8},{\"name\":\"transformInv\",\"type\":{\"name\":\"mat4x4f\",\"attributes\":null,\"size\":64},\"attributes\":null,\"offset\":16,\"size\":64},{\"name\":\"transform\",\"type\":{\"name\":\"mat4x4f\",\"attributes\":null,\"size\":64},\"attributes\":null,\"offset\":80,\"size\":64},{\"name\":\"lastTransformInverse\",\"type\":{\"name\":\"mat4x4f\",\"attributes\":null,\"size\":64},\"attributes\":null,\"offset\":144,\"size\":64},{\"name\":\"lastTransform\",\"type\":{\"name\":\"mat4x4f\",\"attributes\":null,\"size\":64},\"attributes\":null,\"offset\":208,\"size\":64},{\"name\":\"brightnessFactor\",\"type\":{\"name\":\"f32\",\"attributes\":null,\"size\":4},\"attributes\":null,\"offset\":272,\"size\":4}],\"align\":16,\"startLine\":5,\"endLine\":13,\"inUse\":true},\"group\":1,\"binding\":0,\"attributes\":[{\"id\":131132,\"line\":18,\"name\":\"group\",\"value\":\"1\"},{\"id\":131133,\"line\":18,\"name\":\"binding\",\"value\":\"0\"}],\"resourceType\":0,\"access\":\"read\"},{\"name\":\"smpl\",\"type\":{\"name\":\"sampler\",\"attributes\":[{\"id\":131135,\"line\":19,\"name\":\"group\",\"value\":\"1\"},{\"id\":131136,\"line\":19,\"name\":\"binding\",\"value\":\"1\"}],\"size\":0,\"format\":null,\"access\":null},\"group\":1,\"binding\":1,\"attributes\":[{\"id\":131135,\"line\":19,\"name\":\"group\",\"value\":\"1\"},{\"id\":131136,\"line\":19,\"name\":\"binding\",\"value\":\"1\"}],\"resourceType\":3,\"access\":\"\"}]]}", "import * as matrix from './matrix.js';\n\nexport const AbstractMatrix = matrix.AbstractMatrix;\nexport const CHO = matrix.CHO;\nexport const CholeskyDecomposition = matrix.CholeskyDecomposition;\nexport const DistanceMatrix = matrix.DistanceMatrix;\nexport const EVD = matrix.EVD;\nexport const EigenvalueDecomposition = matrix.EigenvalueDecomposition;\nexport const LU = matrix.LU;\nexport const LuDecomposition = matrix.LuDecomposition;\nexport const Matrix = matrix.Matrix;\nexport const MatrixColumnSelectionView = matrix.MatrixColumnSelectionView;\nexport const MatrixColumnView = matrix.MatrixColumnView;\nexport const MatrixFlipColumnView = matrix.MatrixFlipColumnView;\nexport const MatrixFlipRowView = matrix.MatrixFlipRowView;\nexport const MatrixRowSelectionView = matrix.MatrixRowSelectionView;\nexport const MatrixRowView = matrix.MatrixRowView;\nexport const MatrixSelectionView = matrix.MatrixSelectionView;\nexport const MatrixSubView = matrix.MatrixSubView;\nexport const MatrixTransposeView = matrix.MatrixTransposeView;\nexport const NIPALS = matrix.NIPALS;\nexport const Nipals = matrix.Nipals;\nexport const QR = matrix.QR;\nexport const QrDecomposition = matrix.QrDecomposition;\nexport const SVD = matrix.SVD;\nexport const SingularValueDecomposition = matrix.SingularValueDecomposition;\nexport const SymmetricMatrix = matrix.SymmetricMatrix;\nexport const WrapperMatrix1D = matrix.WrapperMatrix1D;\nexport const WrapperMatrix2D = matrix.WrapperMatrix2D;\nexport const correlation = matrix.correlation;\nexport const covariance = matrix.covariance;\nexport default matrix.default.Matrix ? matrix.default.Matrix : matrix.Matrix;\nexport const determinant = matrix.determinant;\nexport const inverse = matrix.inverse;\nexport const linearDependencies = matrix.linearDependencies;\nexport const pseudoInverse = matrix.pseudoInverse;\nexport const solve = matrix.solve;\nexport const wrap = matrix.wrap;\n", "import Matrix, { inverse } from \"ml-matrix\";\r\nimport { Mat4 } from \"../r628/src/math/vector\";\r\n\r\nexport function inv4(m: Mat4): Mat4 {\r\n  const M = new Matrix([\r\n    m.slice(0, 4),\r\n    m.slice(4, 8),\r\n    m.slice(8, 12),\r\n    m.slice(12, 16),\r\n  ]);\r\n  const invM = inverse(M);\r\n  return invM.to1DArray() as Mat4;\r\n}\r\n", "import { rotate, translate } from \"../r628/src/webgl/mesh\";\r\nimport { range } from \"../r628/src/range\";\r\nimport {\r\n  generateUniformBuffer,\r\n  makeUniformBuffer,\r\n} from \"./bind-group-generator\";\r\nimport { initBlitToScreen } from \"./blit-to-screen\";\r\nimport ComputeShader from \"./compute.wgsl?raw\";\r\nimport ComputeWGSLJson from \"compute.wgsl\";\r\nimport { mulMat4 } from \"../r628/src/math/vector\";\r\nimport { inv4 } from \"./matrix-inverse\";\r\n\r\nfunction fail(msg: string) {\r\n  window.alert(msg);\r\n  throw new Error(msg);\r\n}\r\n\r\nconsole.log(ComputeShader, ComputeWGSLJson);\r\n\r\nconst A = ComputeWGSLJson[0];\r\n\r\nconst adapter = await navigator.gpu.requestAdapter();\r\nconst device = await adapter.requestDevice();\r\nif (!device) {\r\n  fail(\"No GPU device!\");\r\n}\r\n\r\nconst module = device.createShaderModule({\r\n  label: \"Compute Shader\",\r\n  code: ComputeShader.replace(\r\n    \"// MARCH_FUNCTION\",\r\n    `\r\nfn modulo(\r\n  a: vec3f,\r\n  b: vec3f\r\n) -> vec3f{\r\n  let afloor = floor(a / b) * b;\r\n  return (a - afloor);\r\n}\r\n\r\nfn grid(\r\n    pos: vec3f,\r\n    res: vec3f\r\n) -> vec3f {\r\n  return modulo(pos, res) - res * 0.5;\r\n}\r\n\r\nfn sdf(\r\n    pos: vec3f,\r\n) -> f32 {\r\n  let postemp = grid(pos, vec3(3.0));\r\n  return distance(postemp, vec3f(0.0)) - 1.2;  \r\n\r\n  // return -pos.y + 1.0;\r\n}\r\n\r\n  `\r\n  ),\r\n});\r\n\r\nconst pipeline = device.createComputePipeline({\r\n  label: \"test\",\r\n  layout: \"auto\",\r\n  compute: {\r\n    module,\r\n  },\r\n});\r\n\r\nconst uniformBuffer = device.createBuffer({\r\n  label: \"uniform buffer\",\r\n  size: 1024,\r\n  usage:\r\n    GPUBufferUsage.STORAGE |\r\n    GPUBufferUsage.COPY_DST |\r\n    GPUBufferUsage.COPY_SRC |\r\n    GPUBufferUsage.UNIFORM,\r\n});\r\n\r\nconst width = 1024;\r\nconst height = 1024;\r\n\r\n// const input = new Float32Array(range(64));\r\n\r\n// const workBuffer = device.createBuffer({\r\n//   label: \"workbuffer\",\r\n//   size: input.byteLength,\r\n//   usage:\r\n//     GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST | GPUBufferUsage.COPY_SRC,\r\n// });\r\n\r\n// device.queue.writeBuffer(workBuffer, 0, input);\r\n\r\n// const resultBuffer = device.createBuffer({\r\n//   label: \"result buffer\",\r\n//   size: input.byteLength,\r\n//   usage: GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST,\r\n// });\r\n\r\nconst makeEverythingTexture = () =>\r\n  device.createTexture({\r\n    size: [width, height, 3],\r\n    format: \"rgba32float\",\r\n    dimension: \"2d\",\r\n    usage:\r\n      GPUTextureUsage.TEXTURE_BINDING |\r\n      GPUTextureUsage.COPY_DST |\r\n      GPUTextureUsage.STORAGE_BINDING,\r\n  });\r\n\r\nconst textures = [makeEverythingTexture(), makeEverythingTexture()];\r\n\r\nconst uniformBindGroup = device.createBindGroup({\r\n  label: \"bind group for compute shader uniforms\",\r\n  layout: pipeline.getBindGroupLayout(1),\r\n  entries: [\r\n    { binding: 0, resource: uniformBuffer },\r\n    {\r\n      binding: 1,\r\n      resource: device.createSampler({\r\n        minFilter: \"linear\",\r\n        magFilter: \"linear\",\r\n      }),\r\n    },\r\n  ],\r\n});\r\n\r\nconst makeTextureFlipFlopBindGroup = (prev: number, curr: number) =>\r\n  device.createBindGroup({\r\n    label: \"bindgroup for flip-flopping textures\",\r\n    layout: pipeline.getBindGroupLayout(0),\r\n    entries: [\r\n      { binding: 0, resource: textures[curr] },\r\n      { binding: 1, resource: textures[prev] },\r\n    ],\r\n  });\r\n\r\nconst textureFlipFlopBindGroups = [\r\n  makeTextureFlipFlopBindGroup(0, 1),\r\n  makeTextureFlipFlopBindGroup(1, 0),\r\n];\r\n\r\nlet frameIndex = 0;\r\n\r\nlet lastTransform = rotate([0, 1, 0], 0);\r\n\r\nfunction loop(t?: number) {\r\n  frameIndex++;\r\n  t ??= 0;\r\n  let currTransform = mulMat4(\r\n    rotate([1, -1, 0], t * -0.0002),\r\n    translate([-0, -0, -3 + t / 5009])\r\n  );\r\n  const buf = makeUniformBuffer<typeof ComputeWGSLJson, 1, 0>(\r\n    ComputeWGSLJson,\r\n    1,\r\n    0,\r\n    {\r\n      size: [width, height],\r\n      rand: [Math.random(), Math.random()],\r\n      transformInv: inv4(currTransform),\r\n      transform: currTransform,\r\n      lastTransformInverse: inv4(lastTransform),\r\n      lastTransform: lastTransform,\r\n      brightnessFactor: frameIndex % 70 === 1 || true ? 1 : 0,\r\n    }\r\n  );\r\n\r\n  lastTransform = currTransform;\r\n\r\n  device.queue.writeBuffer(uniformBuffer, 0, buf);\r\n\r\n  const encoder = device.createCommandEncoder({\r\n    label: \"raymarch encoder\",\r\n  });\r\n\r\n  const pass = encoder.beginComputePass({\r\n    label: \"raymarch compute pass\",\r\n  });\r\n\r\n  pass.setPipeline(pipeline);\r\n  pass.setBindGroup(0, textureFlipFlopBindGroups[frameIndex % 2]);\r\n  pass.setBindGroup(1, uniformBindGroup);\r\n  pass.dispatchWorkgroups(width / 8, height / 8);\r\n  pass.end();\r\n\r\n  const commandBuffer = encoder.finish();\r\n  device.queue.submit([commandBuffer]);\r\n\r\n  const currTexIndex = 1 - (frameIndex % 2);\r\n\r\n  initBlitToScreen(device, textures[currTexIndex])();\r\n\r\n  requestAnimationFrame(loop);\r\n}\r\n\r\nloop();\r\n"],
  "mappings": "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AC,IAAI,EAAE,EAAE,IAAI,EAAE,CAAC,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE;AAAA,IACvD,EAAE,EAAE,IAAI,EAAE,CAAC,IAAI,EAAE,EAAE,IAAI,EAAE,CAAC,IAAI,EAAE,EAAE,IAAI,EAAE,CAAC,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE;AAAA,IACzD,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,EAAE,IAAI,EAAE,CAAC,IAAI,EAAE,EAAE;AAAA,IACtD,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,EAAE,IAAI,EAAE,CAAC,IAAI,EAAE,EAAE;AAAA,IACtD,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE;AAAA,IACxD,EAAE,EAAE,IAAI,EAAE,CAAC,IAAI,EAAE,EAAE,IAAI,EAAE,CAAC,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE;AAAA,IAC1D,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,EAAE,IAAI,EAAE,CAAC,IAAI,EAAE,EAAE;AAAA,IACtD,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,EAAE,IAAI,EAAE,CAAC,IAAI,EAAE,EAAE;AAAA,IACtD,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE;AAAA,IACxD,EAAE,EAAE,IAAI,EAAE,CAAC,IAAI,EAAE,EAAE,IAAI,EAAE,CAAC,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE;AAA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",
  "names": ["require_lib", "module", "require_lib", "module", "require_lib", "module", "matrix", "AbstractMatrix", "Matrix", "r", "c", "SymmetricMatrix", "DistanceMatrix", "MatrixColumnView", "MatrixColumnSelectionView", "MatrixFlipColumnView", "MatrixFlipRowView", "MatrixRowView", "MatrixRowSelectionView", "MatrixSelectionView", "MatrixSubView", "MatrixTransposeView", "WrapperMatrix1D", "WrapperMatrix2D", "wrap", "LuDecomposition", "determinant", "QrDecomposition", "SingularValueDecomposition", "inverse", "solve", "linearDependencies", "pseudoInverse", "covariance", "correlation", "EigenvalueDecomposition", "CholeskyDecomposition", "device", "compute_default", "inverse", "inverse", "compute_default"]
}
