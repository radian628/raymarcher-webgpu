{
  "version": 3,
  "sources": ["../src/bind-group-generator.ts", "raw-ns:/mnt/c/Users/baker/Documents/GitHub/raymarcher-webgpu/src/blit-to-screen.wgsl?raw", "../src/blit-to-screen.ts", "raw-ns:/mnt/c/Users/baker/Documents/GitHub/raymarcher-webgpu/src/compute.wgsl?raw", "wgsl:/mnt/c/Users/baker/Documents/GitHub/raymarcher-webgpu/src/compute.wgsl", "../src/index.ts"],
  "sourcesContent": ["import ComputeWGSLJson from \"compute.wgsl\";\r\nimport {\r\n  Mat2,\r\n  Mat2x3,\r\n  Mat2x4,\r\n  Mat3,\r\n  Mat3x2,\r\n  Mat3x4,\r\n  Mat4,\r\n  Mat4x2,\r\n  Mat4x3,\r\n  Vec2,\r\n  Vec3,\r\n  Vec4,\r\n} from \"../r628/src\";\r\n\r\ntype FromEntries<Entries extends [string | symbol | number, any][]> =\r\n  Entries extends [\r\n    infer Head extends [string | number | symbol, any],\r\n    ...infer Tail extends [string | number | symbol, any][]\r\n  ]\r\n    ? { [K in Head[0]]: Head[1] } & FromEntries<Tail>\r\n    : {};\r\n\r\ntype Test = FromEntries<[[\"a\", 1], [\"b\", 2]]>;\r\n\r\ntype ParseUniformPrimitive<T extends string> = T extends `mat2x2${string}`\r\n  ? Mat2\r\n  : T extends `mat3x3${string}`\r\n  ? Mat3\r\n  : T extends `mat4x4${string}`\r\n  ? Mat4\r\n  : T extends `mat3x4${string}`\r\n  ? Mat3x4\r\n  : T extends `mat4x3${string}`\r\n  ? Mat4x3\r\n  : T extends `mat2x4${string}`\r\n  ? Mat2x4\r\n  : T extends `mat4x2${string}`\r\n  ? Mat4x2\r\n  : T extends `mat2x3${string}`\r\n  ? Mat2x3\r\n  : T extends `mat3x2${string}`\r\n  ? Mat3x2\r\n  : T extends `mat2${string}`\r\n  ? Mat2\r\n  : T extends `mat3${string}`\r\n  ? Mat3\r\n  : T extends `mat4${string}`\r\n  ? Mat4\r\n  : T extends `vec4${string}`\r\n  ? Vec4\r\n  : T extends `vec3${string}`\r\n  ? Vec3\r\n  : T extends `vec2${string}`\r\n  ? Vec2\r\n  : number;\r\n\r\ntype StaticArray<I extends number, T> = I extends 0\r\n  ? []\r\n  : I extends 1\r\n  ? [T]\r\n  : I extends 2\r\n  ? [T, T]\r\n  : I extends 3\r\n  ? [T, T, T]\r\n  : I extends 4\r\n  ? [T, T, T, T]\r\n  : I extends 5\r\n  ? [T, T, T, T, T]\r\n  : I extends 6\r\n  ? [T, T, T, T, T, T]\r\n  : I extends 7\r\n  ? [T, T, T, T, T, T, T]\r\n  : T[];\r\n\r\n// type ParseUniformStructMembers<\r\n//   T extends { name: string; type: Record<any, any> }[]\r\n// > = T extends [\r\n//   infer Head extends { name: string; type: Record<any, any> },\r\n//   ...infer Tail extends { name: string; type: Record<any, any> }[]\r\n// ]\r\n//   ? [\r\n//       [Head[\"name\"], ParseUniform<Head[\"type\"]>],\r\n//       ...ParseUniformStructMembers<Tail>\r\n//     ]\r\n//   : [];\r\n\r\ntype FormatName = \"f32\" | \"i32\" | \"u32\" | \"f16\";\r\n\r\nfunction getWgslPrimitiveDatatype(\r\n  typename: string,\r\n  formatname: FormatName | undefined\r\n): FormatName {\r\n  // handle vec2<f32> and stuff like that\r\n  if (formatname) return formatname;\r\n\r\n  // scalar types\r\n  if (\r\n    typename === \"f32\" ||\r\n    typename === \"i32\" ||\r\n    typename === \"u32\" ||\r\n    typename === \"f16\"\r\n  )\r\n    return typename;\r\n\r\n  // vectors\r\n  if (typename.startsWith(\"vec\") || typename.startsWith(\"mat\")) {\r\n    if (typename.endsWith(\"i\")) {\r\n      return \"i32\";\r\n    } else if (typename.endsWith(\"u\")) {\r\n      return \"u32\";\r\n    } else if (typename.endsWith(\"h\")) {\r\n      return \"f16\";\r\n    }\r\n  }\r\n\r\n  // default to f32\r\n  return \"f32\";\r\n}\r\n\r\nfunction getWgslPrimitiveSize(typename: string) {\r\n  if (typename.startsWith(\"vec2\")) return 2;\r\n  if (typename.startsWith(\"vec3\")) return 3;\r\n  if (typename.startsWith(\"vec4\")) return 4;\r\n\r\n  if (typename.startsWith(\"mat2\")) return 4;\r\n  if (typename.startsWith(\"mat3\")) return 9;\r\n  if (typename.startsWith(\"mat4\")) return 16;\r\n\r\n  if (typename.startsWith(\"mat2x3\")) return 6;\r\n  if (typename.startsWith(\"mat3x2\")) return 6;\r\n\r\n  if (typename.startsWith(\"mat2x4\")) return 8;\r\n  if (typename.startsWith(\"mat4x2\")) return 8;\r\n\r\n  if (typename.startsWith(\"mat3x4\")) return 12;\r\n  if (typename.startsWith(\"mat4x3\")) return 12;\r\n\r\n  return 1;\r\n}\r\n\r\nfunction setWgslPrimitive(\r\n  typename: string,\r\n  formatname: string | undefined,\r\n  view: DataView,\r\n  offset: number,\r\n  data: number[]\r\n) {\r\n  const datatype = getWgslPrimitiveDatatype(typename, formatname as FormatName);\r\n  const size = getWgslPrimitiveSize(typename);\r\n\r\n  let stride = {\r\n    i32: 4,\r\n    f32: 4,\r\n    u32: 4,\r\n    f16: 2,\r\n  }[datatype] as number;\r\n\r\n  let method = {\r\n    i32: \"setInt32\",\r\n    f32: \"setFloat32\",\r\n    u32: \"setUint32\",\r\n    f16: \"setFloat16\",\r\n  }[datatype] as \"setInt32\" | \"setFloat32\" | \"setUint32\" | \"setFloat16\";\r\n\r\n  for (let i = 0; i < size; i++) {\r\n    view[method](offset + stride * i, data[i], true);\r\n  }\r\n}\r\n\r\ntype FromUniformStructEntries<\r\n  Entries extends { name: string; type: Record<any, any> }[]\r\n> = Entries extends [\r\n  infer Head extends { name: string; type: Record<any, any> },\r\n  ...infer Tail extends { name: string; type: Record<any, any> }[]\r\n]\r\n  ? {\r\n      [K in Head[\"name\"]]: ParseUniform<Head[\"type\"]>;\r\n    } & FromUniformStructEntries<Tail>\r\n  : {};\r\n\r\ntype ParseUniform<T extends Record<any, any>> = T[\"members\"] extends {\r\n  name: string;\r\n  type: Record<any, any>;\r\n}[]\r\n  ? FromUniformStructEntries<T[\"members\"]>\r\n  : T[\"name\"] extends string\r\n  ? T[\"name\"] extends \"array\"\r\n    ? StaticArray<T[\"count\"], ParseUniform<T[\"format\"]>>\r\n    : ParseUniformPrimitive<T[\"name\"]>\r\n  : never;\r\n\r\ntype ASDASD = ParseUniform<\r\n  (typeof ComputeWGSLJson)[\"bindGroups\"][0][1][\"type\"]\r\n>;\r\nfunction generateUniformBufferInner<Spec extends Record<any, any>>(\r\n  spec: Spec,\r\n  values: any,\r\n  view: DataView,\r\n  offset: number\r\n) {\r\n  if (spec.members) {\r\n    for (const m of spec.members)\r\n      generateUniformBufferInner(\r\n        m.type,\r\n        values[m.name],\r\n        view,\r\n        offset + m.offset\r\n      );\r\n    return;\r\n  }\r\n\r\n  const typename = spec.name as string;\r\n\r\n  if (typename === \"array\") {\r\n    for (let i = 0; i < spec.count; i++) {\r\n      generateUniformBufferInner(\r\n        spec.format,\r\n        values[i],\r\n        view,\r\n        offset + spec.stride * i\r\n      );\r\n    }\r\n  } else {\r\n    setWgslPrimitive(\r\n      spec.name,\r\n      spec.format?.name,\r\n      view,\r\n      offset,\r\n      Array.isArray(values) ? values : [values]\r\n    );\r\n  }\r\n}\r\n\r\nexport function generateUniformBuffer<Spec>(\r\n  spec: Spec & { size: number },\r\n  values: ParseUniform<Spec>\r\n): ArrayBuffer {\r\n  const buf = new ArrayBuffer(spec.size);\r\n  const view = new DataView(buf);\r\n  generateUniformBufferInner<Spec>(spec, values, view, 0);\r\n  return buf;\r\n}\r\n\r\nexport function makeUniformBuffer<\r\n  Spec extends Record<any, any>,\r\n  Group extends number,\r\n  Binding extends number\r\n>(\r\n  spec: Spec,\r\n  group: Group,\r\n  binding: Binding,\r\n  data: ParseUniform<Spec[\"bindGroups\"][Group][Binding][\"type\"]>\r\n) {\r\n  return generateUniformBuffer(spec.bindGroups[group][binding].type, data);\r\n}\r\n", "struct VSInput {\r\n  @builtin(vertex_index) vertexIndex: u32,\r\n}\r\n\r\nstruct VSOutput {\r\n  @builtin(position) position: vec4f,\r\n  @location(0) uv: vec2f,\r\n}\r\n\r\n@group(0) @binding(0) var mySampler : sampler;\r\n@group(0) @binding(1) var myTexture : texture_2d<f32>;\r\n\r\n@vertex\r\nfn VSMain(input: VSInput) -> VSOutput {\r\n  var vsOut: VSOutput;\r\n\r\n  vsOut.position = vec4(array(\r\n    vec2( 1.0,  1.0),\r\n    vec2( 1.0, -1.0),\r\n    vec2(-1.0, -1.0),\r\n    vec2( 1.0,  1.0),\r\n    vec2(-1.0, -1.0),\r\n    vec2(-1.0,  1.0),\r\n  )[input.vertexIndex], 0.5, 1.0);\r\n\r\n  vsOut.uv = array(\r\n    vec2(1.0, 0.0),\r\n    vec2(1.0, 1.0),\r\n    vec2(0.0, 1.0),\r\n    vec2(1.0, 0.0),\r\n    vec2(0.0, 1.0),\r\n    vec2(0.0, 0.0),\r\n  )[input.vertexIndex];\r\n\r\n  return vsOut;\r\n}\r\n\r\n@fragment\r\nfn FSMain(@location(0) uv: vec2f) -> @location(0) vec4f {\r\n  return textureSample(myTexture, mySampler, uv);\r\n  // return vec4f(uv, 0.0, 1.0);\r\n}", "import BlitToScreen from \"./blit-to-screen.wgsl?raw\";\r\n\r\nconst canvas = document.createElement(\"canvas\");\r\ncanvas.width = 1024;\r\ncanvas.height = 1024;\r\ndocument.body.appendChild(canvas);\r\n\r\nexport function initBlitToScreen(device: GPUDevice, tex: GPUTexture) {\r\n  const ctx = canvas.getContext(\"webgpu\");\r\n\r\n  const presentationFormat = navigator.gpu.getPreferredCanvasFormat();\r\n\r\n  ctx.configure({\r\n    device,\r\n    format: presentationFormat,\r\n  });\r\n\r\n  const blitToScreenPipeline = device.createRenderPipeline({\r\n    layout: \"auto\",\r\n    vertex: {\r\n      module: device.createShaderModule({\r\n        code: BlitToScreen,\r\n      }),\r\n    },\r\n    fragment: {\r\n      module: device.createShaderModule({\r\n        code: BlitToScreen,\r\n      }),\r\n      targets: [{ format: presentationFormat }],\r\n    },\r\n    primitive: {\r\n      topology: \"triangle-list\",\r\n    },\r\n  });\r\n\r\n  const sampler = device.createSampler({\r\n    minFilter: \"linear\",\r\n    magFilter: \"linear\",\r\n  });\r\n\r\n  return () => {\r\n    const commandEncoder = device.createCommandEncoder();\r\n\r\n    const passEncoder = commandEncoder.beginRenderPass({\r\n      colorAttachments: [\r\n        {\r\n          view: ctx.getCurrentTexture().createView(),\r\n          clearValue: [0, 0, 0, 1],\r\n          loadOp: \"clear\",\r\n          storeOp: \"store\",\r\n        },\r\n      ],\r\n    });\r\n\r\n    passEncoder.setPipeline(blitToScreenPipeline);\r\n    passEncoder.setBindGroup(\r\n      0,\r\n      device.createBindGroup({\r\n        layout: blitToScreenPipeline.getBindGroupLayout(0),\r\n        entries: [\r\n          {\r\n            binding: 0,\r\n            resource: sampler,\r\n          },\r\n          { binding: 1, resource: tex },\r\n        ],\r\n      })\r\n    );\r\n    passEncoder.draw(6);\r\n    passEncoder.end();\r\n    device.queue.submit([commandEncoder.finish()]);\r\n  };\r\n}\r\n", "struct B {\r\n  test: array<vec4u, 4>,\r\n}\r\n\r\nstruct Params {\r\n  size: vec2<u32>,\r\n  @align(16) b: B,\r\n  deeznuts: vec4<f32>,\r\n  mvp: mat4x4<f32>\r\n}\r\n\r\n@group(0) @binding(0) var tex: texture_storage_2d<rgba8unorm, write>;\r\n@group(0) @binding(1) var<uniform> params : Params;\r\n\r\n@compute @workgroup_size(8, 8, 1) fn computeSomething(\r\n  @builtin(global_invocation_id) id: vec3<u32>\r\n) {\r\n  var value: vec3f = vec3f(0.0);\r\n\r\n  let idnorm = vec2f(id.xy) / vec2f(params.size.xy);\r\n\r\n  for (var y = 0.0; y < 1.0; y += 0.1) {\r\n    for (var x = 0.0; x < 1.0; x += 0.1) {\r\n      let fractpos = idnorm + vec2f(x, y) / vec2f(params.size.xy);\r\n\r\n      var pos = vec3f(-0.5, -0.5, -5.35);\r\n      var dir = normalize(vec3f(fractpos * 2.0 - 1.0, 1.0));\r\n      var normal: vec3f;\r\n      var didHit: bool;\r\n      var emission = vec3f(0.0);\r\n      let lightdir = normalize(vec3f(1.0, 1.0, -1.0));\r\n\r\n      for (var i = 0u; i < 6u; i++) {\r\n        let hit = marchRay(pos, dir, 512u);\r\n        pos = hit.pos + hit.normal * 0.001;\r\n        dir = reflect(dir, hit.normal);\r\n        normal = hit.normal;\r\n        didHit = hit.hit;\r\n        emission += abs(dot(lightdir, normal)) * pow(0.5, f32(i) + 1.0);\r\n      }\r\n\r\n      value += select(\r\n        emission,\r\n        vec3f(0.0, 0.0, 0.0),\r\n        !didHit,\r\n      );\r\n    }\r\n  }\r\n\r\n  textureStore(tex, id.xy, vec4f(\r\n    value / 100.0,\r\n    1.0\r\n  ));\r\n}\r\n\r\nstruct HitInfo {\r\n  hit: bool,\r\n  pos: vec3f,\r\n  normal: vec3f,\r\n}\r\n\r\nfn marchRay(\r\n  pos: vec3f,\r\n  dir: vec3f,\r\n  iters: u32\r\n) -> HitInfo {\r\n  var posTemp = pos;\r\n  for (var i = 0u; i < iters; i++) {\r\n    let dist = sdf(posTemp);\r\n    posTemp += dir * dist;\r\n  }\r\n\r\n  let distSample = sdf(posTemp);\r\n\r\n  let normal = normalize(vec3f(\r\n    sdf(posTemp + vec3f(0.01, 0.0, 0.0)) - distSample,\r\n    sdf(posTemp + vec3f(0.0, 0.01, 0.0)) - distSample,\r\n    sdf(posTemp + vec3f(0.0, 0.0, 0.01)) - distSample,\r\n  ));\r\n\r\n  return HitInfo(\r\n    distSample < 0.01,\r\n    posTemp,\r\n    normal,\r\n  );\r\n}\r\n\r\n// MARCH_FUNCTION ", "{\"bindGroups\":[[{\"name\":\"tex\",\"type\":{\"name\":\"texture_storage_2d\",\"attributes\":[{\"id\":23485,\"line\":12,\"name\":\"group\",\"value\":\"0\"},{\"id\":23486,\"line\":12,\"name\":\"binding\",\"value\":\"0\"}],\"size\":0,\"format\":{\"name\":\"rgba8unorm\",\"attributes\":null,\"size\":0},\"access\":\"write\"},\"group\":0,\"binding\":0,\"attributes\":[{\"id\":23485,\"line\":12,\"name\":\"group\",\"value\":\"0\"},{\"id\":23486,\"line\":12,\"name\":\"binding\",\"value\":\"0\"}],\"resourceType\":4,\"access\":\"read\"},{\"name\":\"params\",\"type\":{\"name\":\"Params\",\"attributes\":null,\"size\":160,\"members\":[{\"name\":\"size\",\"type\":{\"name\":\"vec2\",\"attributes\":null,\"size\":8,\"format\":{\"name\":\"u32\",\"attributes\":null,\"size\":4},\"access\":null},\"attributes\":null,\"offset\":0,\"size\":8},{\"name\":\"b\",\"type\":{\"name\":\"B\",\"attributes\":null,\"size\":64,\"members\":[{\"name\":\"test\",\"type\":{\"name\":\"array\",\"attributes\":null,\"size\":64,\"count\":4,\"stride\":16,\"format\":{\"name\":\"vec4u\",\"attributes\":null,\"size\":16}},\"attributes\":null,\"offset\":0,\"size\":64}],\"align\":16,\"startLine\":1,\"endLine\":3,\"inUse\":true},\"attributes\":[{\"id\":23476,\"line\":7,\"name\":\"align\",\"value\":\"16\"}],\"offset\":16,\"size\":64},{\"name\":\"deeznuts\",\"type\":{\"name\":\"vec4\",\"attributes\":null,\"size\":16,\"format\":{\"name\":\"f32\",\"attributes\":null,\"size\":4},\"access\":null},\"attributes\":null,\"offset\":80,\"size\":16},{\"name\":\"mvp\",\"type\":{\"name\":\"mat4x4\",\"attributes\":null,\"size\":64,\"format\":{\"name\":\"f32\",\"attributes\":null,\"size\":4},\"access\":null},\"attributes\":null,\"offset\":96,\"size\":64}],\"align\":16,\"startLine\":5,\"endLine\":10,\"inUse\":true},\"group\":0,\"binding\":1,\"attributes\":[{\"id\":23489,\"line\":13,\"name\":\"group\",\"value\":\"0\"},{\"id\":23490,\"line\":13,\"name\":\"binding\",\"value\":\"1\"}],\"resourceType\":0,\"access\":\"read\"}]]}", "import { range } from \"../r628/src/range\";\r\nimport {\r\n  generateUniformBuffer,\r\n  makeUniformBuffer,\r\n} from \"./bind-group-generator\";\r\nimport { initBlitToScreen } from \"./blit-to-screen\";\r\nimport ComputeShader from \"./compute.wgsl?raw\";\r\nimport ComputeWGSLJson from \"compute.wgsl\";\r\n\r\nfunction fail(msg: string) {\r\n  window.alert(msg);\r\n  throw new Error(msg);\r\n}\r\n\r\nconsole.log(ComputeShader, ComputeWGSLJson);\r\n\r\nconst A = ComputeWGSLJson[0];\r\n\r\nconst adapter = await navigator.gpu.requestAdapter();\r\nconst device = await adapter.requestDevice();\r\nif (!device) {\r\n  fail(\"No GPU device!\");\r\n}\r\n\r\nconst module = device.createShaderModule({\r\n  label: \"Compute Shader\",\r\n  code: ComputeShader.replace(\r\n    \"// MARCH_FUNCTION\",\r\n    `\r\nfn modulo(\r\n  a: vec3f,\r\n  b: vec3f\r\n) -> vec3f{\r\n  let afloor = floor(a / b) * b;\r\n  return (a - afloor);\r\n}\r\n\r\nfn grid(\r\n    pos: vec3f,\r\n    res: vec3f\r\n) -> vec3f {\r\n  return modulo(pos, res) - res * 0.5;\r\n}\r\n\r\nfn sdf(\r\n    pos: vec3f,\r\n) -> f32 {\r\n  let postemp = grid(pos, vec3(3.0));\r\n  return distance(postemp, vec3f(0.0)) - 1.2;  \r\n}\r\n\r\n  `\r\n  ),\r\n});\r\n\r\nconst pipeline = device.createComputePipeline({\r\n  label: \"test\",\r\n  layout: \"auto\",\r\n  compute: {\r\n    module,\r\n  },\r\n});\r\n\r\nconst uniformBuffer = device.createBuffer({\r\n  label: \"uniform buffer\",\r\n  size: 160,\r\n  usage:\r\n    GPUBufferUsage.STORAGE |\r\n    GPUBufferUsage.COPY_DST |\r\n    GPUBufferUsage.COPY_SRC |\r\n    GPUBufferUsage.UNIFORM,\r\n});\r\n\r\nconst width = 1024;\r\nconst height = 1024;\r\n\r\nconst buf = makeUniformBuffer<typeof ComputeWGSLJson, 0, 1>(\r\n  ComputeWGSLJson,\r\n  0,\r\n  1,\r\n  {\r\n    size: [width, height],\r\n    b: {\r\n      test: [\r\n        [1, 2, 3, 4],\r\n        [69, 69, 123, 456],\r\n        [9, 7, 5, 3],\r\n        [2, 4, 6, 8],\r\n      ],\r\n    },\r\n    deeznuts: [1.0, 2.5, 3.14, 2.718],\r\n    mvp: [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1],\r\n  }\r\n);\r\n\r\nconsole.log(new Uint32Array(buf));\r\nconsole.log(new Float32Array(buf));\r\n\r\ndevice.queue.writeBuffer(uniformBuffer, 0, buf);\r\n\r\n// const input = new Float32Array(range(64));\r\n\r\n// const workBuffer = device.createBuffer({\r\n//   label: \"workbuffer\",\r\n//   size: input.byteLength,\r\n//   usage:\r\n//     GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST | GPUBufferUsage.COPY_SRC,\r\n// });\r\n\r\n// device.queue.writeBuffer(workBuffer, 0, input);\r\n\r\n// const resultBuffer = device.createBuffer({\r\n//   label: \"result buffer\",\r\n//   size: input.byteLength,\r\n//   usage: GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST,\r\n// });\r\nconst resultTexture = device.createTexture({\r\n  size: [width, height, 1],\r\n  format: \"rgba8unorm\",\r\n  usage:\r\n    GPUTextureUsage.TEXTURE_BINDING |\r\n    GPUTextureUsage.COPY_DST |\r\n    GPUTextureUsage.STORAGE_BINDING,\r\n});\r\n\r\nconst bindGroup = device.createBindGroup({\r\n  label: \"bindgroup for work buffer\",\r\n  layout: pipeline.getBindGroupLayout(0),\r\n  entries: [\r\n    { binding: 0, resource: resultTexture },\r\n    {\r\n      binding: 1,\r\n      resource: uniformBuffer,\r\n    },\r\n  ],\r\n});\r\n\r\nconst encoder = device.createCommandEncoder({\r\n  label: \"doubling encoder\",\r\n});\r\n\r\nconst pass = encoder.beginComputePass({\r\n  label: \"doubling compute pass\",\r\n});\r\n\r\npass.setPipeline(pipeline);\r\npass.setBindGroup(0, bindGroup);\r\npass.dispatchWorkgroups(width / 8, height / 8);\r\npass.end();\r\n\r\nconst commandBuffer = encoder.finish();\r\ndevice.queue.submit([commandBuffer]);\r\n\r\ninitBlitToScreen(device, resultTexture)();\r\n"],
  "mappings": "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",
  "names": ["buf", "device", "compute_default", "compute_default"]
}
