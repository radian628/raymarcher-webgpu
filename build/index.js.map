{
  "version": 3,
  "sources": ["../r628/src/range.ts", "raw-ns:/mnt/c/Users/baker/Documents/GitHub/raymarcher-webgpu/src/blit-to-screen.wgsl?raw", "../src/blit-to-screen.ts", "raw-ns:/mnt/c/Users/baker/Documents/GitHub/raymarcher-webgpu/src/compute.wgsl?raw", "../src/index.ts"],
  "sourcesContent": ["export function range(hi: number) {\n  let arr: number[] = [];\n  for (let i = 0; i < hi && i < 10_000_000; i++) {\n    arr.push(i);\n  }\n  return arr;\n}\n\nexport function rangeFrom(lo: number, hi: number) {\n  let arr: number[] = [];\n  for (let i = lo; i < hi && i < 10_000_000; i++) {\n    arr.push(i);\n  }\n  return arr;\n}\n\nexport type MapCallback<T, U> = (e: T, i: number, arr: T[]) => U;\n\nexport function stringRangeMapJoin(\n  hi: number,\n  f: MapCallback<number, string>,\n  s = \"\\\\n\"\n) {\n  const r = range(hi);\n  return r.map(f).join(s);\n}\n\nexport function stringMapJoin<T>(a: T[], f: MapCallback<T, string>, s = \"\\\\n\") {\n  return a.map(f).join(s);\n}\n\ntype SmartRangeElement = {\n  remap(lo: number, hi: number, inclEnd?: boolean): number;\n  segment(lo: number, hi: number): [number, number];\n  slidingWindow<T>(arr: T[]): [T, T];\n  randkf(): number;\n  get<T>(arr: T[]): T;\n  i: number;\n  next: number;\n};\n\nexport function smartRangeMap<T>(\n  n: number,\n  cb: MapCallback<SmartRangeElement, T>\n): T[] {\n  const a = range(n);\n  const res = a.map((i, index, arr) => {\n    return cb(\n      {\n        remap(lo: number, hi: number, inclEnd?: boolean) {\n          return (i / (inclEnd ? n - 1 : n)) * (hi - lo) + lo;\n        },\n        segment(lo: number, hi: number): [number, number] {\n          return [(i / n) * (hi - lo) + lo, ((i + 1) / n) * (hi - lo) + lo];\n        },\n        slidingWindow<T>(arr: T[]): [T, T] {\n          return [arr[i], arr[i + 1]];\n        },\n        randkf() {\n          if (i === 0) return 0;\n          if (i === n - 1) return 100;\n          const lo = (i / (n - 2)) * 100;\n          const hi = ((i + 1) / (n - 2)) * 100;\n          return rand(lo, hi);\n        },\n        get<T>(arr: T[]): T {\n          return arr[i];\n        },\n        i,\n        next: i + 1,\n      },\n      index,\n      res\n    );\n  });\n  return res;\n}\n\nexport function id<T>(x: T) {\n  return x;\n}\n\nexport function smartRangeStringMapJoin(n: number, cb, s = \"\\\\n\") {\n  return stringMapJoin(smartRangeMap(n, id), cb, s);\n}\n\nexport function rand(lo: number, hi: number, random?: () => number) {\n  if (!random) random = () => Math.random();\n  return random() * (hi - lo) + lo;\n}\n\nexport function pickrand<T>(arr: T[]) {\n  return arr[Math.floor(Math.random() * arr.length)];\n}\n\nfunction cartesianProductInner<Ts extends any[][]>(\n  ts: Ts,\n  arr: any[]\n): { [K in keyof Ts]: Ts[K][number] }[] {\n  // @ts-expect-error\n  if (ts.length === 0) return [arr];\n  return ts[0]\n    .map((e) => cartesianProductInner(ts.slice(1), [...arr, e]))\n    .flat(1) as ReturnType<typeof cartesianProduct<Ts>>;\n}\n\nexport function cartesianProduct<Ts extends any[][]>(\n  ...ts: Ts\n): { [K in keyof Ts]: Ts[K][number] }[] {\n  const res = cartesianProductInner(ts, []);\n  return res;\n}\n", "struct VSInput {\r\n  @builtin(vertex_index) vertexIndex: u32,\r\n}\r\n\r\nstruct VSOutput {\r\n  @builtin(position) position: vec4f,\r\n  @location(0) uv: vec2f,\r\n}\r\n\r\n@group(0) @binding(0) var mySampler : sampler;\r\n@group(0) @binding(1) var myTexture : texture_2d<f32>;\r\n\r\n@vertex\r\nfn VSMain(input: VSInput) -> VSOutput {\r\n  var vsOut: VSOutput;\r\n\r\n  vsOut.position = vec4(array(\r\n    vec2( 1.0,  1.0),\r\n    vec2( 1.0, -1.0),\r\n    vec2(-1.0, -1.0),\r\n    vec2( 1.0,  1.0),\r\n    vec2(-1.0, -1.0),\r\n    vec2(-1.0,  1.0),\r\n  )[input.vertexIndex], 0.5, 1.0);\r\n\r\n  vsOut.uv = array(\r\n    vec2(1.0, 0.0),\r\n    vec2(1.0, 1.0),\r\n    vec2(0.0, 1.0),\r\n    vec2(1.0, 0.0),\r\n    vec2(0.0, 1.0),\r\n    vec2(0.0, 0.0),\r\n  )[input.vertexIndex];\r\n\r\n  return vsOut;\r\n}\r\n\r\n@fragment\r\nfn FSMain(@location(0) uv: vec2f) -> @location(0) vec4f {\r\n  // return textureSample(myTexture, mySampler, uv);\r\n  return vec4f(uv, 0.0, 1.0);\r\n}", "import BlitToScreen from \"./blit-to-screen.wgsl?raw\";\r\n\r\nconst canvas = document.createElement(\"canvas\");\r\ndocument.body.appendChild(canvas);\r\n\r\nexport function initBlitToScreen(device: GPUDevice) {\r\n  const ctx = canvas.getContext(\"webgpu\");\r\n\r\n  const presentationFormat = navigator.gpu.getPreferredCanvasFormat();\r\n\r\n  ctx.configure({\r\n    device,\r\n    format: presentationFormat,\r\n  });\r\n\r\n  const blitToScreenPipeline = device.createRenderPipeline({\r\n    layout: \"auto\",\r\n    vertex: {\r\n      module: device.createShaderModule({\r\n        code: BlitToScreen,\r\n      }),\r\n    },\r\n    fragment: {\r\n      module: device.createShaderModule({\r\n        code: BlitToScreen,\r\n      }),\r\n      targets: [{ format: presentationFormat }],\r\n    },\r\n    primitive: {\r\n      topology: \"triangle-list\",\r\n    },\r\n  });\r\n\r\n  // const sampler = device.createSampler({\r\n  //   minFilter: \"linear\",\r\n  //   magFilter: \"linear\"\r\n  // });\r\n\r\n  return () => {\r\n    const commandEncoder = device.createCommandEncoder();\r\n\r\n    const passEncoder = commandEncoder.beginRenderPass({\r\n      colorAttachments: [\r\n        {\r\n          view: ctx.getCurrentTexture().createView(),\r\n          clearValue: [0, 0, 0, 1],\r\n          loadOp: \"clear\",\r\n          storeOp: \"store\",\r\n        },\r\n      ],\r\n    });\r\n\r\n    passEncoder.setPipeline(blitToScreenPipeline);\r\n    passEncoder.draw(6);\r\n    passEncoder.end();\r\n    device.queue.submit([commandEncoder.finish()]);\r\n  };\r\n}\r\n", "@group(0) @binding(0) var<storage, read_write> data: array<f32>;\r\n     \r\n@compute @workgroup_size(8, 8, 1) fn computeSomething(\r\n  @builtin(global_invocation_id) id: vec3<u32>\r\n) {\r\n  let i = id.x + id.y * 8;\r\n  data[i] = data[i] * 2.0;\r\n}", "import { range } from \"../r628/src/range\";\r\nimport { initBlitToScreen } from \"./blit-to-screen\";\r\nimport ComputeShader from \"./compute.wgsl?raw\";\r\n\r\nfunction fail(msg: string) {\r\n  window.alert(msg);\r\n  throw new Error(msg);\r\n}\r\n\r\nconsole.log(ComputeShader);\r\n\r\nconst adapter = await navigator.gpu.requestAdapter();\r\nconst device = await adapter.requestDevice();\r\nif (!device) {\r\n  fail(\"No GPU device!\");\r\n}\r\n\r\nconst module = device.createShaderModule({\r\n  label: \"Compute Shader\",\r\n  code: ComputeShader,\r\n});\r\n\r\nconst pipeline = device.createComputePipeline({\r\n  label: \"test\",\r\n  layout: \"auto\",\r\n  compute: {\r\n    module,\r\n  },\r\n});\r\n\r\nconst input = new Float32Array(range(64));\r\n\r\nconst workBuffer = device.createBuffer({\r\n  label: \"workbuffer\",\r\n  size: input.byteLength,\r\n  usage:\r\n    GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST | GPUBufferUsage.COPY_SRC,\r\n});\r\n\r\ndevice.queue.writeBuffer(workBuffer, 0, input);\r\n\r\nconst resultBuffer = device.createBuffer({\r\n  label: \"result buffer\",\r\n  size: input.byteLength,\r\n  usage: GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST,\r\n});\r\n\r\nconst bindGroup = device.createBindGroup({\r\n  label: \"bindgroup for work buffer\",\r\n  layout: pipeline.getBindGroupLayout(0),\r\n  entries: [{ binding: 0, resource: { buffer: workBuffer } }],\r\n});\r\n\r\nconst encoder = device.createCommandEncoder({\r\n  label: \"doubling encoder\",\r\n});\r\n\r\nconst pass = encoder.beginComputePass({\r\n  label: \"doubling compute pass\",\r\n});\r\n\r\npass.setPipeline(pipeline);\r\npass.setBindGroup(0, bindGroup);\r\npass.dispatchWorkgroups(Math.ceil(input.length / 64));\r\npass.end();\r\n\r\nencoder.copyBufferToBuffer(workBuffer, 0, resultBuffer, 0, resultBuffer.size);\r\n\r\nconst commandBuffer = encoder.finish();\r\ndevice.queue.submit([commandBuffer]);\r\n\r\nawait resultBuffer.mapAsync(GPUMapMode.READ);\r\nconst result = new Float32Array(resultBuffer.getMappedRange().slice());\r\n\r\nconsole.log(\"AAAAA\", input, result);\r\n\r\nresultBuffer.unmap();\r\n\r\ninitBlitToScreen(device)();\r\n"],
  "mappings": "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",
  "names": ["device"]
}
